
micro2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a54  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e34  08003e34  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e3c  08003e3c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e3c  08003e3c  00013e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e40  08003e40  00013e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000068  08003eac  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08003eac  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000098ff  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a32  00000000  00000000  000299da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0002b410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000680  00000000  00000000  0002bc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230ed  00000000  00000000  0002c308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b59e  00000000  00000000  0004f3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6be4  00000000  00000000  0005a993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028b4  00000000  00000000  00131578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ad  00000000  00000000  00133e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003c00 	.word	0x08003c00

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08003c00 	.word	0x08003c00

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fd4f 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 fa2d 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fb15 	bl	8000b50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000526:	f000 fae9 	bl	8000afc <MX_USART2_UART_Init>
  MX_ADC3_Init();
 800052a:	f000 fa95 	bl	8000a58 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  printf("The program has correctly been loaded.\r\n");
 800052e:	4886      	ldr	r0, [pc, #536]	; (8000748 <main+0x234>)
 8000530:	f002 ff8e 	bl	8003450 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
      {
		  notStartTime = HAL_GetTick();
 8000534:	f000 fda8 	bl	8001088 <HAL_GetTick>
 8000538:	4603      	mov	r3, r0
 800053a:	4a84      	ldr	r2, [pc, #528]	; (800074c <main+0x238>)
 800053c:	6013      	str	r3, [r2, #0]
		  int silence_duration = notStartTime - endTime;
 800053e:	4b83      	ldr	r3, [pc, #524]	; (800074c <main+0x238>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	4b83      	ldr	r3, [pc, #524]	; (8000750 <main+0x23c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	603b      	str	r3, [r7, #0]
		  if (!haveConverted && (silence_duration >= PAUSE_THRESHOLD || rx_index >= sizeof(rx_buffer)))
 800054a:	4b82      	ldr	r3, [pc, #520]	; (8000754 <main+0x240>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d123      	bne.n	800059a <main+0x86>
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000558:	da03      	bge.n	8000562 <main+0x4e>
 800055a:	4b7f      	ldr	r3, [pc, #508]	; (8000758 <main+0x244>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b63      	cmp	r3, #99	; 0x63
 8000560:	d91b      	bls.n	800059a <main+0x86>
		  {

			  // Decode the Morse code character
			  decodeMorse(rx_buffer, rx_index);
 8000562:	4b7d      	ldr	r3, [pc, #500]	; (8000758 <main+0x244>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4619      	mov	r1, r3
 8000568:	487c      	ldr	r0, [pc, #496]	; (800075c <main+0x248>)
 800056a:	f000 f93f 	bl	80007ec <decodeMorse>
			  // Reset the message buffer index

			  for(int i=0;i<rx_index;i++){
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	e007      	b.n	8000584 <main+0x70>
				  rx_buffer[i] = '\0';
 8000574:	4a79      	ldr	r2, [pc, #484]	; (800075c <main+0x248>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
			  for(int i=0;i<rx_index;i++){
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	3301      	adds	r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b74      	ldr	r3, [pc, #464]	; (8000758 <main+0x244>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	429a      	cmp	r2, r3
 800058c:	dbf2      	blt.n	8000574 <main+0x60>
			  }
			  rx_index = 0;
 800058e:	4b72      	ldr	r3, [pc, #456]	; (8000758 <main+0x244>)
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
			  haveConverted = 1;
 8000594:	4b6f      	ldr	r3, [pc, #444]	; (8000754 <main+0x240>)
 8000596:	2201      	movs	r2, #1
 8000598:	601a      	str	r2, [r3, #0]
		  }
		  /* Check for sound signal */
		  if (isSoundSignalDetected()) {
 800059a:	f000 f8eb 	bl	8000774 <isSoundSignalDetected>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d056      	beq.n	8000652 <main+0x13e>
			  haveConverted = 0;
 80005a4:	4b6b      	ldr	r3, [pc, #428]	; (8000754 <main+0x240>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
			  /* Record start time of signal */

			  if(silence_duration>500){
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005b0:	dd04      	ble.n	80005bc <main+0xa8>
				  startTime = notStartTime;
 80005b2:	4b66      	ldr	r3, [pc, #408]	; (800074c <main+0x238>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a6a      	ldr	r2, [pc, #424]	; (8000760 <main+0x24c>)
 80005b8:	6013      	str	r3, [r2, #0]
 80005ba:	e014      	b.n	80005e6 <main+0xd2>
			  } else {
				  rx_index--;
 80005bc:	4b66      	ldr	r3, [pc, #408]	; (8000758 <main+0x244>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	3b01      	subs	r3, #1
 80005c2:	4a65      	ldr	r2, [pc, #404]	; (8000758 <main+0x244>)
 80005c4:	6013      	str	r3, [r2, #0]
			  }
			  while (adc_value < THRESHOLD_low || adc_value > THRESHOLD_high) {
 80005c6:	e00e      	b.n	80005e6 <main+0xd2>
				  // Check if sound signal ended
				HAL_ADC_Start(&hadc3);
 80005c8:	4866      	ldr	r0, [pc, #408]	; (8000764 <main+0x250>)
 80005ca:	f000 fdd1 	bl	8001170 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80005ce:	f04f 31ff 	mov.w	r1, #4294967295
 80005d2:	4864      	ldr	r0, [pc, #400]	; (8000764 <main+0x250>)
 80005d4:	f000 fed1 	bl	800137a <HAL_ADC_PollForConversion>
				adc_value = HAL_ADC_GetValue(&hadc3);//* (5.0 / 1023.0);
 80005d8:	4862      	ldr	r0, [pc, #392]	; (8000764 <main+0x250>)
 80005da:	f000 ff59 	bl	8001490 <HAL_ADC_GetValue>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	4b61      	ldr	r3, [pc, #388]	; (8000768 <main+0x254>)
 80005e4:	801a      	strh	r2, [r3, #0]
			  while (adc_value < THRESHOLD_low || adc_value > THRESHOLD_high) {
 80005e6:	4b60      	ldr	r3, [pc, #384]	; (8000768 <main+0x254>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	f240 5213 	movw	r2, #1299	; 0x513
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d9ea      	bls.n	80005c8 <main+0xb4>
 80005f2:	4b5d      	ldr	r3, [pc, #372]	; (8000768 <main+0x254>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d8e4      	bhi.n	80005c8 <main+0xb4>
			  }


			  /* Record end time of signal */
			  endTime = HAL_GetTick();
 80005fe:	f000 fd43 	bl	8001088 <HAL_GetTick>
 8000602:	4603      	mov	r3, r0
 8000604:	4a52      	ldr	r2, [pc, #328]	; (8000750 <main+0x23c>)
 8000606:	6013      	str	r3, [r2, #0]

			  /* Calculate duration of signal */
			  duration = (endTime - startTime);
 8000608:	4b51      	ldr	r3, [pc, #324]	; (8000750 <main+0x23c>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b54      	ldr	r3, [pc, #336]	; (8000760 <main+0x24c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	4a56      	ldr	r2, [pc, #344]	; (800076c <main+0x258>)
 8000614:	6013      	str	r3, [r2, #0]

			  if (duration < DOT_THRESHOLD)
 8000616:	4b55      	ldr	r3, [pc, #340]	; (800076c <main+0x258>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b6d      	cmp	r3, #109	; 0x6d
 800061c:	d80a      	bhi.n	8000634 <main+0x120>
			  {
				  rx_buffer[rx_index] = '.';
 800061e:	4b4e      	ldr	r3, [pc, #312]	; (8000758 <main+0x244>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a4e      	ldr	r2, [pc, #312]	; (800075c <main+0x248>)
 8000624:	212e      	movs	r1, #46	; 0x2e
 8000626:	54d1      	strb	r1, [r2, r3]
				  rx_index++;
 8000628:	4b4b      	ldr	r3, [pc, #300]	; (8000758 <main+0x244>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	4a4a      	ldr	r2, [pc, #296]	; (8000758 <main+0x244>)
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	e00e      	b.n	8000652 <main+0x13e>
			  }
			  else if (duration < DASH_THRESHOLD)
 8000634:	4b4d      	ldr	r3, [pc, #308]	; (800076c <main+0x258>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800063c:	d209      	bcs.n	8000652 <main+0x13e>
			  {
				  rx_buffer[rx_index] = '-';
 800063e:	4b46      	ldr	r3, [pc, #280]	; (8000758 <main+0x244>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a46      	ldr	r2, [pc, #280]	; (800075c <main+0x248>)
 8000644:	212d      	movs	r1, #45	; 0x2d
 8000646:	54d1      	strb	r1, [r2, r3]
				  rx_index++;
 8000648:	4b43      	ldr	r3, [pc, #268]	; (8000758 <main+0x244>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	4a42      	ldr	r2, [pc, #264]	; (8000758 <main+0x244>)
 8000650:	6013      	str	r3, [r2, #0]
			  }

			  // Check if the Morse code character is complete

		  }
		 if (isLedSignalDetected()) {
 8000652:	f000 f8b9 	bl	80007c8 <isLedSignalDetected>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d06e      	beq.n	800073a <main+0x226>
			  /* Record end time of signal */

			  startTime = notStartTime;
 800065c:	4b3b      	ldr	r3, [pc, #236]	; (800074c <main+0x238>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a3f      	ldr	r2, [pc, #252]	; (8000760 <main+0x24c>)
 8000662:	6013      	str	r3, [r2, #0]
			  led=1;
 8000664:	4b42      	ldr	r3, [pc, #264]	; (8000770 <main+0x25c>)
 8000666:	2201      	movs	r2, #1
 8000668:	601a      	str	r2, [r3, #0]
			  while (led){
 800066a:	e00a      	b.n	8000682 <main+0x16e>
				  led=!isLedSignalDetected();
 800066c:	f000 f8ac 	bl	80007c8 <isLedSignalDetected>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	bf0c      	ite	eq
 8000676:	2301      	moveq	r3, #1
 8000678:	2300      	movne	r3, #0
 800067a:	b2db      	uxtb	r3, r3
 800067c:	461a      	mov	r2, r3
 800067e:	4b3c      	ldr	r3, [pc, #240]	; (8000770 <main+0x25c>)
 8000680:	601a      	str	r2, [r3, #0]
			  while (led){
 8000682:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <main+0x25c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f0      	bne.n	800066c <main+0x158>
			  }
			  HAL_Delay(250);
 800068a:	20fa      	movs	r0, #250	; 0xfa
 800068c:	f000 fd08 	bl	80010a0 <HAL_Delay>
			  endTime = HAL_GetTick();
 8000690:	f000 fcfa 	bl	8001088 <HAL_GetTick>
 8000694:	4603      	mov	r3, r0
 8000696:	4a2e      	ldr	r2, [pc, #184]	; (8000750 <main+0x23c>)
 8000698:	6013      	str	r3, [r2, #0]

			  /* Calculate duration of signal */
			  duration = (endTime - startTime - 250);
 800069a:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <main+0x23c>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	4b30      	ldr	r3, [pc, #192]	; (8000760 <main+0x24c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	3bfa      	subs	r3, #250	; 0xfa
 80006a6:	4a31      	ldr	r2, [pc, #196]	; (800076c <main+0x258>)
 80006a8:	6013      	str	r3, [r2, #0]
			  if (duration>690 && duration < 710)
 80006aa:	4b30      	ldr	r3, [pc, #192]	; (800076c <main+0x258>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f240 22b2 	movw	r2, #690	; 0x2b2
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d910      	bls.n	80006d8 <main+0x1c4>
 80006b6:	4b2d      	ldr	r3, [pc, #180]	; (800076c <main+0x258>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f240 22c5 	movw	r2, #709	; 0x2c5
 80006be:	4293      	cmp	r3, r2
 80006c0:	d80a      	bhi.n	80006d8 <main+0x1c4>
			  {
				  rx_buffer[rx_index] = '.';
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <main+0x244>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a25      	ldr	r2, [pc, #148]	; (800075c <main+0x248>)
 80006c8:	212e      	movs	r1, #46	; 0x2e
 80006ca:	54d1      	strb	r1, [r2, r3]
				  rx_index++;
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <main+0x244>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	4a21      	ldr	r2, [pc, #132]	; (8000758 <main+0x244>)
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	e02c      	b.n	8000732 <main+0x21e>
			  }
			  else if (duration>890 &&duration < 810)
 80006d8:	4b24      	ldr	r3, [pc, #144]	; (800076c <main+0x258>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f240 327a 	movw	r2, #890	; 0x37a
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d910      	bls.n	8000706 <main+0x1f2>
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <main+0x258>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f240 3229 	movw	r2, #809	; 0x329
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d80a      	bhi.n	8000706 <main+0x1f2>
			  {
				  rx_buffer[rx_index] = '-';
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <main+0x244>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a19      	ldr	r2, [pc, #100]	; (800075c <main+0x248>)
 80006f6:	212d      	movs	r1, #45	; 0x2d
 80006f8:	54d1      	strb	r1, [r2, r3]
				  rx_index++;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <main+0x244>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3301      	adds	r3, #1
 8000700:	4a15      	ldr	r2, [pc, #84]	; (8000758 <main+0x244>)
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	e015      	b.n	8000732 <main+0x21e>
			  }
			  else if (duration>990 &&duration < 910)
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <main+0x258>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f240 32de 	movw	r2, #990	; 0x3de
 800070e:	4293      	cmp	r3, r2
 8000710:	d90f      	bls.n	8000732 <main+0x21e>
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <main+0x258>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f240 328d 	movw	r2, #909	; 0x38d
 800071a:	4293      	cmp	r3, r2
 800071c:	d809      	bhi.n	8000732 <main+0x21e>
			  {
				  rx_buffer[rx_index] = ' ';
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <main+0x244>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a0e      	ldr	r2, [pc, #56]	; (800075c <main+0x248>)
 8000724:	2120      	movs	r1, #32
 8000726:	54d1      	strb	r1, [r2, r3]
				  rx_index++;
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <main+0x244>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <main+0x244>)
 8000730:	6013      	str	r3, [r2, #0]
			  }

			  startTime = endTime;
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <main+0x23c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <main+0x24c>)
 8000738:	6013      	str	r3, [r2, #0]
		  }
		  //decodeMorse(rx_buffer, rx_index);
		  HAL_Delay(2);
 800073a:	2002      	movs	r0, #2
 800073c:	f000 fcb0 	bl	80010a0 <HAL_Delay>
		  HAL_ADC_Stop(&hadc3);
 8000740:	4808      	ldr	r0, [pc, #32]	; (8000764 <main+0x250>)
 8000742:	f000 fde7 	bl	8001314 <HAL_ADC_Stop>
      {
 8000746:	e6f5      	b.n	8000534 <main+0x20>
 8000748:	08003c18 	.word	0x08003c18
 800074c:	20000180 	.word	0x20000180
 8000750:	20000184 	.word	0x20000184
 8000754:	20000194 	.word	0x20000194
 8000758:	2000018c 	.word	0x2000018c
 800075c:	20000114 	.word	0x20000114
 8000760:	2000017c 	.word	0x2000017c
 8000764:	20000084 	.word	0x20000084
 8000768:	20000178 	.word	0x20000178
 800076c:	20000188 	.word	0x20000188
 8000770:	20000190 	.word	0x20000190

08000774 <isSoundSignalDetected>:
      }
  }

  /* Function to detect the presence of a sound signal */
	int isSoundSignalDetected() {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
		HAL_ADC_Start(&hadc3);
 8000778:	4811      	ldr	r0, [pc, #68]	; (80007c0 <isSoundSignalDetected+0x4c>)
 800077a:	f000 fcf9 	bl	8001170 <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 800077e:	f04f 31ff 	mov.w	r1, #4294967295
 8000782:	480f      	ldr	r0, [pc, #60]	; (80007c0 <isSoundSignalDetected+0x4c>)
 8000784:	f000 fdf9 	bl	800137a <HAL_ADC_PollForConversion>

	    // Read the analog input from the sound sensor using the ADC
		//HAL_ADC_PollForConversion(&hadc3, 100);
	    adc_value = HAL_ADC_GetValue(&hadc3);//* (5.0 / 1023.0); // Example ADC reading
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <isSoundSignalDetected+0x4c>)
 800078a:	f000 fe81 	bl	8001490 <HAL_ADC_GetValue>
 800078e:	4603      	mov	r3, r0
 8000790:	b29a      	uxth	r2, r3
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <isSoundSignalDetected+0x50>)
 8000794:	801a      	strh	r2, [r3, #0]

        /* Wait for sound signal to end */
        HAL_ADC_Stop(&hadc3);
 8000796:	480a      	ldr	r0, [pc, #40]	; (80007c0 <isSoundSignalDetected+0x4c>)
 8000798:	f000 fdbc 	bl	8001314 <HAL_ADC_Stop>

	    // Analyze the ADC value to determine if a sound signal is detected
        if (adc_value < THRESHOLD_low || adc_value > THRESHOLD_high) {
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <isSoundSignalDetected+0x50>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	f240 5213 	movw	r2, #1299	; 0x513
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d905      	bls.n	80007b4 <isSoundSignalDetected+0x40>
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <isSoundSignalDetected+0x50>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d901      	bls.n	80007b8 <isSoundSignalDetected+0x44>
	        return 1; // Sound signal detected
 80007b4:	2301      	movs	r3, #1
 80007b6:	e000      	b.n	80007ba <isSoundSignalDetected+0x46>
	    } else {
	    	return 0; // No sound signal detected
 80007b8:	2300      	movs	r3, #0
		}
  }
 80007ba:	4618      	mov	r0, r3
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000084 	.word	0x20000084
 80007c4:	20000178 	.word	0x20000178

080007c8 <isLedSignalDetected>:

	int isLedSignalDetected() {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
		return !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80007cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <isLedSignalDetected+0x20>)
 80007d2:	f001 fb13 	bl	8001dfc <HAL_GPIO_ReadPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf0c      	ite	eq
 80007dc:	2301      	moveq	r3, #1
 80007de:	2300      	movne	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
  }
 80007e2:	4618      	mov	r0, r3
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40020000 	.word	0x40020000

080007ec <decodeMorse>:


	void decodeMorse(char * message, int length) {
 80007ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007f0:	b0b7      	sub	sp, #220	; 0xdc
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	6039      	str	r1, [r7, #0]
 80007f8:	466b      	mov	r3, sp
 80007fa:	461e      	mov	r6, r3
	      //printf("%s\r\n", message);
	      char* morseAlphabet[] = {     "......", ".....-", "....-.", "....--", "...-..", "...-.-", "...--.", "...---", "..-...", "..-..-",
 80007fc:	4a53      	ldr	r2, [pc, #332]	; (800094c <decodeMorse+0x160>)
 80007fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000802:	4611      	mov	r1, r2
 8000804:	2290      	movs	r2, #144	; 0x90
 8000806:	4618      	mov	r0, r3
 8000808:	f002 ff7d 	bl	8003706 <memcpy>
	                "..-.-.", "..-.--", "..--..", "..--.-", "..----", ".-....", ".-...-", ".-..-.", ".-..--", ".-.-..",
	                ".-.-.-", ".-.--.", ".-.---", ".--...", ".--..-", ".--.-.", ".--.--", ".---..", ".---.-", ".----.",
	                ".-----", "-.....", "-....-", "-...-.", "-...--", "-..-.."};

	      char alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
 800080c:	4b50      	ldr	r3, [pc, #320]	; (8000950 <decodeMorse+0x164>)
 800080e:	f107 040c 	add.w	r4, r7, #12
 8000812:	461d      	mov	r5, r3
 8000814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000820:	6020      	str	r0, [r4, #0]
 8000822:	3404      	adds	r4, #4
 8000824:	7021      	strb	r1, [r4, #0]

	      char decoded_message[length + 1]; // Maximum possible length of decoded message
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	1c59      	adds	r1, r3, #1
 800082a:	1e4b      	subs	r3, r1, #1
 800082c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000830:	460a      	mov	r2, r1
 8000832:	2300      	movs	r3, #0
 8000834:	4692      	mov	sl, r2
 8000836:	469b      	mov	fp, r3
 8000838:	f04f 0200 	mov.w	r2, #0
 800083c:	f04f 0300 	mov.w	r3, #0
 8000840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800084c:	460a      	mov	r2, r1
 800084e:	2300      	movs	r3, #0
 8000850:	4690      	mov	r8, r2
 8000852:	4699      	mov	r9, r3
 8000854:	f04f 0200 	mov.w	r2, #0
 8000858:	f04f 0300 	mov.w	r3, #0
 800085c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000860:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000864:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000868:	460b      	mov	r3, r1
 800086a:	3307      	adds	r3, #7
 800086c:	08db      	lsrs	r3, r3, #3
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	ebad 0d03 	sub.w	sp, sp, r3
 8000874:	466b      	mov	r3, sp
 8000876:	3300      	adds	r3, #0
 8000878:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	      int decoded_index = 0; // Index to keep track of the position in the decoded message
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	      for (int i = 0; i <= length; i++)
 8000882:	2300      	movs	r3, #0
 8000884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000888:	e051      	b.n	800092e <decodeMorse+0x142>
	      {
	          if (message[i] == ' ' || message[i] == '\0') // Check for space or end of string
 800088a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b20      	cmp	r3, #32
 8000896:	d006      	beq.n	80008a6 <decodeMorse+0xba>
 8000898:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	4413      	add	r3, r2
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d131      	bne.n	800090a <decodeMorse+0x11e>
	          {
	              // Indicates the end of a Morse code character
	              decoded_message[decoded_index] = '\0'; // Null terminate the decoded message
 80008a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80008aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80008ae:	4413      	add	r3, r2
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
	              for (int j = 0; j < sizeof(morseAlphabet) / sizeof(morseAlphabet[0]); j++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80008ba:	e021      	b.n	8000900 <decodeMorse+0x114>
	              {
	                  if (strcmp(decoded_message, morseAlphabet[j]) == 0) // Compare using strcmp
 80008bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	33d8      	adds	r3, #216	; 0xd8
 80008c4:	443b      	add	r3, r7
 80008c6:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80008ca:	4619      	mov	r1, r3
 80008cc:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80008d0:	f7ff fc98 	bl	8000204 <strcmp>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d10d      	bne.n	80008f6 <decodeMorse+0x10a>
	                  {
	                      // Store the corresponding character
	                      printf("%c", alphabet[j]);
 80008da:	f107 020c 	add.w	r2, r7, #12
 80008de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80008e2:	4413      	add	r3, r2
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fd56 	bl	8003398 <putchar>
	                      decoded_index = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	                      break;
 80008f2:	bf00      	nop
	              for (int j = 0; j < sizeof(morseAlphabet) / sizeof(morseAlphabet[0]); j++)
 80008f4:	e016      	b.n	8000924 <decodeMorse+0x138>
 80008f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80008fa:	3301      	adds	r3, #1
 80008fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000900:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000904:	2b23      	cmp	r3, #35	; 0x23
 8000906:	d9d9      	bls.n	80008bc <decodeMorse+0xd0>
 8000908:	e00c      	b.n	8000924 <decodeMorse+0x138>
	                  }
	              }
	          }
	          else
	          {
	              decoded_message[decoded_index++] = message[i];
 800090a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	441a      	add	r2, r3
 8000912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000916:	1c59      	adds	r1, r3, #1
 8000918:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800091c:	7811      	ldrb	r1, [r2, #0]
 800091e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000922:	54d1      	strb	r1, [r2, r3]
	      for (int i = 0; i <= length; i++)
 8000924:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000928:	3301      	adds	r3, #1
 800092a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800092e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	429a      	cmp	r2, r3
 8000936:	dda8      	ble.n	800088a <decodeMorse+0x9e>
	          }
	      }
	      printf("\r\n");
 8000938:	4806      	ldr	r0, [pc, #24]	; (8000954 <decodeMorse+0x168>)
 800093a:	f002 fd89 	bl	8003450 <puts>
 800093e:	46b5      	mov	sp, r6
	  }
 8000940:	bf00      	nop
 8000942:	37dc      	adds	r7, #220	; 0xdc
 8000944:	46bd      	mov	sp, r7
 8000946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800094a:	bf00      	nop
 800094c:	08003d64 	.word	0x08003d64
 8000950:	08003df4 	.word	0x08003df4
 8000954:	08003c40 	.word	0x08003c40

08000958 <__io_putchar>:



  PUTCHAR_PROTOTYPE
  {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of
  transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000960:	1d39      	adds	r1, r7, #4
 8000962:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000966:	2201      	movs	r2, #1
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <__io_putchar+0x20>)
 800096a:	f002 f897 	bl	8002a9c <HAL_UART_Transmit>
  return ch;
 800096e:	687b      	ldr	r3, [r7, #4]
  }
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000cc 	.word	0x200000cc

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b094      	sub	sp, #80	; 0x50
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	2234      	movs	r2, #52	; 0x34
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f002 fe40 	bl	8003610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <SystemClock_Config+0xd4>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <SystemClock_Config+0xd4>)
 80009aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ae:	6413      	str	r3, [r2, #64]	; 0x40
 80009b0:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <SystemClock_Config+0xd4>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <SystemClock_Config+0xd8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009c8:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <SystemClock_Config+0xd8>)
 80009ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <SystemClock_Config+0xd8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009dc:	2302      	movs	r3, #2
 80009de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e0:	2301      	movs	r3, #1
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e4:	2310      	movs	r3, #16
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e8:	2302      	movs	r3, #2
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ec:	2300      	movs	r3, #0
 80009ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009f0:	2310      	movs	r3, #16
 80009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009fa:	2304      	movs	r3, #4
 80009fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a02:	2302      	movs	r3, #2
 8000a04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 fd58 	bl	80024c0 <HAL_RCC_OscConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a16:	f000 f90d 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1a:	230f      	movs	r3, #15
 8000a1c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	2102      	movs	r1, #2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 f9f8 	bl	8001e2c <HAL_RCC_ClockConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a42:	f000 f8f7 	bl	8000c34 <Error_Handler>
  }
}
 8000a46:	bf00      	nop
 8000a48:	3750      	adds	r7, #80	; 0x50
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40007000 	.word	0x40007000

08000a58 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_ADC3_Init+0x98>)
 8000a6c:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <MX_ADC3_Init+0x9c>)
 8000a6e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_ADC3_Init+0x98>)
 8000a72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a76:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_ADC3_Init+0x98>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_ADC3_Init+0x98>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_ADC3_Init+0x98>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_ADC3_Init+0x98>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_ADC3_Init+0x98>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <MX_ADC3_Init+0x98>)
 8000a9a:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <MX_ADC3_Init+0xa0>)
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_ADC3_Init+0x98>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_ADC3_Init+0x98>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_ADC3_Init+0x98>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_ADC3_Init+0x98>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ab8:	480d      	ldr	r0, [pc, #52]	; (8000af0 <MX_ADC3_Init+0x98>)
 8000aba:	f000 fb15 	bl	80010e8 <HAL_ADC_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000ac4:	f000 f8b6 	bl	8000c34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000acc:	2301      	movs	r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_ADC3_Init+0x98>)
 8000ada:	f000 fce7 	bl	80014ac <HAL_ADC_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000ae4:	f000 f8a6 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000084 	.word	0x20000084
 8000af4:	40012200 	.word	0x40012200
 8000af8:	0f000001 	.word	0x0f000001

08000afc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <MX_USART2_UART_Init+0x50>)
 8000b04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b34:	f001 ff62 	bl	80029fc <HAL_UART_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b3e:	f000 f879 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000cc 	.word	0x200000cc
 8000b4c:	40004400 	.word	0x40004400

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <MX_GPIO_Init+0xd8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a2e      	ldr	r2, [pc, #184]	; (8000c28 <MX_GPIO_Init+0xd8>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <MX_GPIO_Init+0xd8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <MX_GPIO_Init+0xd8>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a27      	ldr	r2, [pc, #156]	; (8000c28 <MX_GPIO_Init+0xd8>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <MX_GPIO_Init+0xd8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <MX_GPIO_Init+0xd8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a20      	ldr	r2, [pc, #128]	; (8000c28 <MX_GPIO_Init+0xd8>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MX_GPIO_Init+0xd8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_GPIO_Init+0xd8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <MX_GPIO_Init+0xd8>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_GPIO_Init+0xd8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4810      	ldr	r0, [pc, #64]	; (8000c2c <MX_GPIO_Init+0xdc>)
 8000bec:	f000 ff72 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	480b      	ldr	r0, [pc, #44]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000c04:	f000 ff66 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c08:	2320      	movs	r3, #32
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_GPIO_Init+0xe0>)
 8000c1c:	f000 ff5a 	bl	8001ad4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	; 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020800 	.word	0x40020800
 8000c30:	40020000 	.word	0x40020000

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <Error_Handler+0x8>
	...

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c7e:	2007      	movs	r0, #7
 8000c80:	f000 fef4 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800

08000c90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_ADC_MspInit+0x7c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d127      	bne.n	8000d02 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_ADC_MspInit+0x80>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a15      	ldr	r2, [pc, #84]	; (8000d10 <HAL_ADC_MspInit+0x80>)
 8000cbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <HAL_ADC_MspInit+0x80>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_ADC_MspInit+0x80>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <HAL_ADC_MspInit+0x80>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_ADC_MspInit+0x80>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0-WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cea:	2301      	movs	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <HAL_ADC_MspInit+0x84>)
 8000cfe:	f000 fee9 	bl	8001ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	; 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40012200 	.word	0x40012200
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <HAL_UART_MspInit+0x84>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d12b      	bne.n	8000d92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d72:	230c      	movs	r3, #12
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d82:	2307      	movs	r3, #7
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_UART_MspInit+0x8c>)
 8000d8e:	f000 fea1 	bl	8001ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40004400 	.word	0x40004400
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f934 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	e00a      	b.n	8000e24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e0e:	f3af 8000 	nop.w
 8000e12:	4601      	mov	r1, r0
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	60ba      	str	r2, [r7, #8]
 8000e1a:	b2ca      	uxtb	r2, r1
 8000e1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	dbf0      	blt.n	8000e0e <_read+0x12>
  }

  return len;
 8000e2c:	687b      	ldr	r3, [r7, #4]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	e009      	b.n	8000e5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	60ba      	str	r2, [r7, #8]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fd81 	bl	8000958 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbf1      	blt.n	8000e48 <_write+0x12>
  }
  return len;
 8000e64:	687b      	ldr	r3, [r7, #4]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_close>:

int _close(int file)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e96:	605a      	str	r2, [r3, #4]
  return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_isatty>:

int _isatty(int file)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee0:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <_sbrk+0x5c>)
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <_sbrk+0x60>)
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <_sbrk+0x64>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <_sbrk+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d207      	bcs.n	8000f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f08:	f002 fbd0 	bl	80036ac <__errno>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	220c      	movs	r2, #12
 8000f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	e009      	b.n	8000f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <_sbrk+0x64>)
 8000f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20020000 	.word	0x20020000
 8000f38:	00000400 	.word	0x00000400
 8000f3c:	20000198 	.word	0x20000198
 8000f40:	200002f0 	.word	0x200002f0

08000f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f6c:	f7ff ffea 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	; (8000fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f96:	f002 fb8f 	bl	80036b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9a:	f7ff fabb 	bl	8000514 <main>
  bx  lr    
 8000f9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fac:	08003e44 	.word	0x08003e44
  ldr r2, =_sbss
 8000fb0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fb4:	200002ec 	.word	0x200002ec

08000fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <HAL_Init+0x40>)
 8000fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_Init+0x40>)
 8000fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_Init+0x40>)
 8000fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 fd41 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f808 	bl	8001000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff fe26 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023c00 	.word	0x40023c00

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_InitTick+0x54>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_InitTick+0x58>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	fbb3 f3f1 	udiv	r3, r3, r1
 800101a:	fbb2 f3f3 	udiv	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fd4b 	bl	8001aba <HAL_SYSTICK_Config>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e00e      	b.n	800104c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d80a      	bhi.n	800104a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f000 fd21 	bl	8001a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <HAL_InitTick+0x5c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000000 	.word	0x20000000
 8001058:	20000008 	.word	0x20000008
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x20>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x24>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_IncTick+0x24>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008
 8001084:	2000019c 	.word	0x2000019c

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <HAL_GetTick+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	2000019c 	.word	0x2000019c

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff ffee 	bl	8001088 <HAL_GetTick>
 80010ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_Delay+0x44>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c6:	bf00      	nop
 80010c8:	f7ff ffde 	bl	8001088 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008

080010e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e033      	b.n	8001166 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	2b00      	cmp	r3, #0
 8001104:	d109      	bne.n	800111a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fdc2 	bl	8000c90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	2b00      	cmp	r3, #0
 8001124:	d118      	bne.n	8001158 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800112e:	f023 0302 	bic.w	r3, r3, #2
 8001132:	f043 0202 	orr.w	r2, r3, #2
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fae8 	bl	8001710 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f023 0303 	bic.w	r3, r3, #3
 800114e:	f043 0201 	orr.w	r2, r3, #1
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	641a      	str	r2, [r3, #64]	; 0x40
 8001156:	e001      	b.n	800115c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001182:	2b01      	cmp	r3, #1
 8001184:	d101      	bne.n	800118a <HAL_ADC_Start+0x1a>
 8001186:	2302      	movs	r3, #2
 8001188:	e0b2      	b.n	80012f0 <HAL_ADC_Start+0x180>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b01      	cmp	r3, #1
 800119e:	d018      	beq.n	80011d2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0201 	orr.w	r2, r2, #1
 80011ae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011b0:	4b52      	ldr	r3, [pc, #328]	; (80012fc <HAL_ADC_Start+0x18c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a52      	ldr	r2, [pc, #328]	; (8001300 <HAL_ADC_Start+0x190>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	0c9a      	lsrs	r2, r3, #18
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80011c4:	e002      	b.n	80011cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f9      	bne.n	80011c6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d17a      	bne.n	80012d6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800120a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800121e:	d106      	bne.n	800122e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	f023 0206 	bic.w	r2, r3, #6
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	645a      	str	r2, [r3, #68]	; 0x44
 800122c:	e002      	b.n	8001234 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800123c:	4b31      	ldr	r3, [pc, #196]	; (8001304 <HAL_ADC_Start+0x194>)
 800123e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001248:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	2b00      	cmp	r3, #0
 8001254:	d12a      	bne.n	80012ac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a2b      	ldr	r2, [pc, #172]	; (8001308 <HAL_ADC_Start+0x198>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d015      	beq.n	800128c <HAL_ADC_Start+0x11c>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a29      	ldr	r2, [pc, #164]	; (800130c <HAL_ADC_Start+0x19c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d105      	bne.n	8001276 <HAL_ADC_Start+0x106>
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <HAL_ADC_Start+0x194>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00a      	beq.n	800128c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a25      	ldr	r2, [pc, #148]	; (8001310 <HAL_ADC_Start+0x1a0>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d136      	bne.n	80012ee <HAL_ADC_Start+0x17e>
 8001280:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_ADC_Start+0x194>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	2b00      	cmp	r3, #0
 800128a:	d130      	bne.n	80012ee <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d129      	bne.n	80012ee <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	e020      	b.n	80012ee <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a15      	ldr	r2, [pc, #84]	; (8001308 <HAL_ADC_Start+0x198>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d11b      	bne.n	80012ee <HAL_ADC_Start+0x17e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d114      	bne.n	80012ee <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	e00b      	b.n	80012ee <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f043 0210 	orr.w	r2, r3, #16
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	20000000 	.word	0x20000000
 8001300:	431bde83 	.word	0x431bde83
 8001304:	40012300 	.word	0x40012300
 8001308:	40012000 	.word	0x40012000
 800130c:	40012100 	.word	0x40012100
 8001310:	40012200 	.word	0x40012200

08001314 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001322:	2b01      	cmp	r3, #1
 8001324:	d101      	bne.n	800132a <HAL_ADC_Stop+0x16>
 8001326:	2302      	movs	r3, #2
 8001328:	e021      	b.n	800136e <HAL_ADC_Stop+0x5a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0201 	bic.w	r2, r2, #1
 8001340:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d109      	bne.n	8001364 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001358:	f023 0301 	bic.w	r3, r3, #1
 800135c:	f043 0201 	orr.w	r2, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b084      	sub	sp, #16
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001396:	d113      	bne.n	80013c0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013a6:	d10b      	bne.n	80013c0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f043 0220 	orr.w	r2, r3, #32
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e063      	b.n	8001488 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c0:	f7ff fe62 	bl	8001088 <HAL_GetTick>
 80013c4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013c6:	e021      	b.n	800140c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ce:	d01d      	beq.n	800140c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d007      	beq.n	80013e6 <HAL_ADC_PollForConversion+0x6c>
 80013d6:	f7ff fe57 	bl	8001088 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d212      	bcs.n	800140c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d00b      	beq.n	800140c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	f043 0204 	orr.w	r2, r3, #4
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e03d      	b.n	8001488 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b02      	cmp	r3, #2
 8001418:	d1d6      	bne.n	80013c8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f06f 0212 	mvn.w	r2, #18
 8001422:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d123      	bne.n	8001486 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001442:	2b00      	cmp	r3, #0
 8001444:	d11f      	bne.n	8001486 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001450:	2b00      	cmp	r3, #0
 8001452:	d006      	beq.n	8001462 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800145e:	2b00      	cmp	r3, #0
 8001460:	d111      	bne.n	8001486 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d105      	bne.n	8001486 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f043 0201 	orr.w	r2, r3, #1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x1c>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e113      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x244>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b09      	cmp	r3, #9
 80014d6:	d925      	bls.n	8001524 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68d9      	ldr	r1, [r3, #12]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	3b1e      	subs	r3, #30
 80014ee:	2207      	movs	r2, #7
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43da      	mvns	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	400a      	ands	r2, r1
 80014fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68d9      	ldr	r1, [r3, #12]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	b29b      	uxth	r3, r3
 800150e:	4618      	mov	r0, r3
 8001510:	4603      	mov	r3, r0
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4403      	add	r3, r0
 8001516:	3b1e      	subs	r3, #30
 8001518:	409a      	lsls	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	e022      	b.n	800156a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6919      	ldr	r1, [r3, #16]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	2207      	movs	r2, #7
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	400a      	ands	r2, r1
 8001546:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6919      	ldr	r1, [r3, #16]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	b29b      	uxth	r3, r3
 8001558:	4618      	mov	r0, r3
 800155a:	4603      	mov	r3, r0
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4403      	add	r3, r0
 8001560:	409a      	lsls	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b06      	cmp	r3, #6
 8001570:	d824      	bhi.n	80015bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	3b05      	subs	r3, #5
 8001584:	221f      	movs	r2, #31
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	400a      	ands	r2, r1
 8001592:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	3b05      	subs	r3, #5
 80015ae:	fa00 f203 	lsl.w	r2, r0, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	635a      	str	r2, [r3, #52]	; 0x34
 80015ba:	e04c      	b.n	8001656 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b0c      	cmp	r3, #12
 80015c2:	d824      	bhi.n	800160e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	3b23      	subs	r3, #35	; 0x23
 80015d6:	221f      	movs	r2, #31
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43da      	mvns	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	400a      	ands	r2, r1
 80015e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	3b23      	subs	r3, #35	; 0x23
 8001600:	fa00 f203 	lsl.w	r2, r0, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	631a      	str	r2, [r3, #48]	; 0x30
 800160c:	e023      	b.n	8001656 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	3b41      	subs	r3, #65	; 0x41
 8001620:	221f      	movs	r2, #31
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	400a      	ands	r2, r1
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	4618      	mov	r0, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	3b41      	subs	r3, #65	; 0x41
 800164a:	fa00 f203 	lsl.w	r2, r0, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001656:	4b29      	ldr	r3, [pc, #164]	; (80016fc <HAL_ADC_ConfigChannel+0x250>)
 8001658:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a28      	ldr	r2, [pc, #160]	; (8001700 <HAL_ADC_ConfigChannel+0x254>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d10f      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x1d8>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b12      	cmp	r3, #18
 800166a:	d10b      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <HAL_ADC_ConfigChannel+0x254>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d12b      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x23a>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <HAL_ADC_ConfigChannel+0x258>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d003      	beq.n	80016a0 <HAL_ADC_ConfigChannel+0x1f4>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b11      	cmp	r3, #17
 800169e:	d122      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a11      	ldr	r2, [pc, #68]	; (8001704 <HAL_ADC_ConfigChannel+0x258>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d111      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_ADC_ConfigChannel+0x25c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a11      	ldr	r2, [pc, #68]	; (800170c <HAL_ADC_ConfigChannel+0x260>)
 80016c8:	fba2 2303 	umull	r2, r3, r2, r3
 80016cc:	0c9a      	lsrs	r2, r3, #18
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016d8:	e002      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	3b01      	subs	r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f9      	bne.n	80016da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40012300 	.word	0x40012300
 8001700:	40012000 	.word	0x40012000
 8001704:	10000012 	.word	0x10000012
 8001708:	20000000 	.word	0x20000000
 800170c:	431bde83 	.word	0x431bde83

08001710 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001718:	4b79      	ldr	r3, [pc, #484]	; (8001900 <ADC_Init+0x1f0>)
 800171a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	431a      	orrs	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001744:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	021a      	lsls	r2, r3, #8
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001768:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800178a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6899      	ldr	r1, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a2:	4a58      	ldr	r2, [pc, #352]	; (8001904 <ADC_Init+0x1f4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d022      	beq.n	80017ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6899      	ldr	r1, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6899      	ldr	r1, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	e00f      	b.n	800180e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800180c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0202 	bic.w	r2, r2, #2
 800181c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6899      	ldr	r1, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7e1b      	ldrb	r3, [r3, #24]
 8001828:	005a      	lsls	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d01b      	beq.n	8001874 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800184a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800185a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6859      	ldr	r1, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	3b01      	subs	r3, #1
 8001868:	035a      	lsls	r2, r3, #13
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	e007      	b.n	8001884 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001882:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	3b01      	subs	r3, #1
 80018a0:	051a      	lsls	r2, r3, #20
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6899      	ldr	r1, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018c6:	025a      	lsls	r2, r3, #9
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6899      	ldr	r1, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	029a      	lsls	r2, r3, #10
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	609a      	str	r2, [r3, #8]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40012300 	.word	0x40012300
 8001904:	0f000001 	.word	0x0f000001

08001908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	60d3      	str	r3, [r2, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	; (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f7ff ff8e 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff47 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a94:	f7ff ff5c 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff8e 	bl	80019c0 <NVIC_EncodePriority>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff5d 	bl	800196c <__NVIC_SetPriority>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffb0 	bl	8001a28 <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e165      	b.n	8001dbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8154 	bne.w	8001db6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d005      	beq.n	8001b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d130      	bne.n	8001b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d017      	beq.n	8001bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d123      	bne.n	8001c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80ae 	beq.w	8001db6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	; (8001dd4 <HAL_GPIO_Init+0x300>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a5c      	ldr	r2, [pc, #368]	; (8001dd4 <HAL_GPIO_Init+0x300>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b5a      	ldr	r3, [pc, #360]	; (8001dd4 <HAL_GPIO_Init+0x300>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c76:	4a58      	ldr	r2, [pc, #352]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4f      	ldr	r2, [pc, #316]	; (8001ddc <HAL_GPIO_Init+0x308>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d025      	beq.n	8001cee <HAL_GPIO_Init+0x21a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4e      	ldr	r2, [pc, #312]	; (8001de0 <HAL_GPIO_Init+0x30c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d01f      	beq.n	8001cea <HAL_GPIO_Init+0x216>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4d      	ldr	r2, [pc, #308]	; (8001de4 <HAL_GPIO_Init+0x310>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d019      	beq.n	8001ce6 <HAL_GPIO_Init+0x212>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4c      	ldr	r2, [pc, #304]	; (8001de8 <HAL_GPIO_Init+0x314>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_GPIO_Init+0x20e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4b      	ldr	r2, [pc, #300]	; (8001dec <HAL_GPIO_Init+0x318>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00d      	beq.n	8001cde <HAL_GPIO_Init+0x20a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4a      	ldr	r2, [pc, #296]	; (8001df0 <HAL_GPIO_Init+0x31c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d007      	beq.n	8001cda <HAL_GPIO_Init+0x206>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a49      	ldr	r2, [pc, #292]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_GPIO_Init+0x202>
 8001cd2:	2306      	movs	r3, #6
 8001cd4:	e00c      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	e00a      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cda:	2305      	movs	r3, #5
 8001cdc:	e008      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cde:	2304      	movs	r3, #4
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e004      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e002      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f002 0203 	and.w	r2, r2, #3
 8001cf6:	0092      	lsls	r2, r2, #2
 8001cf8:	4093      	lsls	r3, r2
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d00:	4935      	ldr	r1, [pc, #212]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d0e:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d32:	4a31      	ldr	r2, [pc, #196]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d38:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d5c:	4a26      	ldr	r2, [pc, #152]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d62:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d86:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db0:	4a11      	ldr	r2, [pc, #68]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3301      	adds	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b0f      	cmp	r3, #15
 8001dc0:	f67f ae96 	bls.w	8001af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3724      	adds	r7, #36	; 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40013800 	.word	0x40013800
 8001ddc:	40020000 	.word	0x40020000
 8001de0:	40020400 	.word	0x40020400
 8001de4:	40020800 	.word	0x40020800
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40021400 	.word	0x40021400
 8001df4:	40021800 	.word	0x40021800
 8001df8:	40013c00 	.word	0x40013c00

08001dfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	e001      	b.n	8001e1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0cc      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e40:	4b68      	ldr	r3, [pc, #416]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d90c      	bls.n	8001e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b65      	ldr	r3, [pc, #404]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e56:	4b63      	ldr	r3, [pc, #396]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0b8      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e80:	4b59      	ldr	r3, [pc, #356]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4a58      	ldr	r2, [pc, #352]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e98:	4b53      	ldr	r3, [pc, #332]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4a52      	ldr	r2, [pc, #328]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea4:	4b50      	ldr	r3, [pc, #320]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	494d      	ldr	r1, [pc, #308]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d044      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d107      	bne.n	8001eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b47      	ldr	r3, [pc, #284]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d119      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e07f      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d003      	beq.n	8001eea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eea:	4b3f      	ldr	r3, [pc, #252]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d109      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e06f      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efa:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e067      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0a:	4b37      	ldr	r3, [pc, #220]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f023 0203 	bic.w	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4934      	ldr	r1, [pc, #208]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f1c:	f7ff f8b4 	bl	8001088 <HAL_GetTick>
 8001f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f24:	f7ff f8b0 	bl	8001088 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e04f      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 020c 	and.w	r2, r3, #12
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d1eb      	bne.n	8001f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d20c      	bcs.n	8001f74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e032      	b.n	8001fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4916      	ldr	r1, [pc, #88]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	490e      	ldr	r1, [pc, #56]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fb2:	f000 f855 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	490a      	ldr	r1, [pc, #40]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	5ccb      	ldrb	r3, [r1, r3]
 8001fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fca:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff f814 	bl	8001000 <HAL_InitTick>

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023c00 	.word	0x40023c00
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	08003e1c 	.word	0x08003e1c
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <HAL_RCC_GetHCLKFreq+0x14>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000000 	.word	0x20000000

08002010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002014:	f7ff fff0 	bl	8001ff8 <HAL_RCC_GetHCLKFreq>
 8002018:	4602      	mov	r2, r0
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	0a9b      	lsrs	r3, r3, #10
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	4903      	ldr	r1, [pc, #12]	; (8002034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40023800 	.word	0x40023800
 8002034:	08003e2c 	.word	0x08003e2c

08002038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800203c:	f7ff ffdc 	bl	8001ff8 <HAL_RCC_GetHCLKFreq>
 8002040:	4602      	mov	r2, r0
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	0b5b      	lsrs	r3, r3, #13
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	4903      	ldr	r1, [pc, #12]	; (800205c <HAL_RCC_GetPCLK2Freq+0x24>)
 800204e:	5ccb      	ldrb	r3, [r1, r3]
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002054:	4618      	mov	r0, r3
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40023800 	.word	0x40023800
 800205c:	08003e2c 	.word	0x08003e2c

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002064:	b0ae      	sub	sp, #184	; 0xb8
 8002066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002086:	4bcb      	ldr	r3, [pc, #812]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b0c      	cmp	r3, #12
 8002090:	f200 8206 	bhi.w	80024a0 <HAL_RCC_GetSysClockFreq+0x440>
 8002094:	a201      	add	r2, pc, #4	; (adr r2, 800209c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209a:	bf00      	nop
 800209c:	080020d1 	.word	0x080020d1
 80020a0:	080024a1 	.word	0x080024a1
 80020a4:	080024a1 	.word	0x080024a1
 80020a8:	080024a1 	.word	0x080024a1
 80020ac:	080020d9 	.word	0x080020d9
 80020b0:	080024a1 	.word	0x080024a1
 80020b4:	080024a1 	.word	0x080024a1
 80020b8:	080024a1 	.word	0x080024a1
 80020bc:	080020e1 	.word	0x080020e1
 80020c0:	080024a1 	.word	0x080024a1
 80020c4:	080024a1 	.word	0x080024a1
 80020c8:	080024a1 	.word	0x080024a1
 80020cc:	080022d1 	.word	0x080022d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d0:	4bb9      	ldr	r3, [pc, #740]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80020d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80020d6:	e1e7      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020d8:	4bb8      	ldr	r3, [pc, #736]	; (80023bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80020da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020de:	e1e3      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e0:	4bb4      	ldr	r3, [pc, #720]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ec:	4bb1      	ldr	r3, [pc, #708]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d071      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f8:	4bae      	ldr	r3, [pc, #696]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	099b      	lsrs	r3, r3, #6
 80020fe:	2200      	movs	r2, #0
 8002100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002104:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800210c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002110:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800211a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800211e:	4622      	mov	r2, r4
 8002120:	462b      	mov	r3, r5
 8002122:	f04f 0000 	mov.w	r0, #0
 8002126:	f04f 0100 	mov.w	r1, #0
 800212a:	0159      	lsls	r1, r3, #5
 800212c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002130:	0150      	lsls	r0, r2, #5
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4621      	mov	r1, r4
 8002138:	1a51      	subs	r1, r2, r1
 800213a:	6439      	str	r1, [r7, #64]	; 0x40
 800213c:	4629      	mov	r1, r5
 800213e:	eb63 0301 	sbc.w	r3, r3, r1
 8002142:	647b      	str	r3, [r7, #68]	; 0x44
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002150:	4649      	mov	r1, r9
 8002152:	018b      	lsls	r3, r1, #6
 8002154:	4641      	mov	r1, r8
 8002156:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800215a:	4641      	mov	r1, r8
 800215c:	018a      	lsls	r2, r1, #6
 800215e:	4641      	mov	r1, r8
 8002160:	1a51      	subs	r1, r2, r1
 8002162:	63b9      	str	r1, [r7, #56]	; 0x38
 8002164:	4649      	mov	r1, r9
 8002166:	eb63 0301 	sbc.w	r3, r3, r1
 800216a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002178:	4649      	mov	r1, r9
 800217a:	00cb      	lsls	r3, r1, #3
 800217c:	4641      	mov	r1, r8
 800217e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002182:	4641      	mov	r1, r8
 8002184:	00ca      	lsls	r2, r1, #3
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	4603      	mov	r3, r0
 800218c:	4622      	mov	r2, r4
 800218e:	189b      	adds	r3, r3, r2
 8002190:	633b      	str	r3, [r7, #48]	; 0x30
 8002192:	462b      	mov	r3, r5
 8002194:	460a      	mov	r2, r1
 8002196:	eb42 0303 	adc.w	r3, r2, r3
 800219a:	637b      	str	r3, [r7, #52]	; 0x34
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021a8:	4629      	mov	r1, r5
 80021aa:	024b      	lsls	r3, r1, #9
 80021ac:	4621      	mov	r1, r4
 80021ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021b2:	4621      	mov	r1, r4
 80021b4:	024a      	lsls	r2, r1, #9
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021be:	2200      	movs	r2, #0
 80021c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80021c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80021cc:	f7fe f824 	bl	8000218 <__aeabi_uldivmod>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4613      	mov	r3, r2
 80021d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021da:	e067      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021dc:	4b75      	ldr	r3, [pc, #468]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	099b      	lsrs	r3, r3, #6
 80021e2:	2200      	movs	r2, #0
 80021e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021e8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80021ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80021f6:	2300      	movs	r3, #0
 80021f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80021fe:	4622      	mov	r2, r4
 8002200:	462b      	mov	r3, r5
 8002202:	f04f 0000 	mov.w	r0, #0
 8002206:	f04f 0100 	mov.w	r1, #0
 800220a:	0159      	lsls	r1, r3, #5
 800220c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002210:	0150      	lsls	r0, r2, #5
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4621      	mov	r1, r4
 8002218:	1a51      	subs	r1, r2, r1
 800221a:	62b9      	str	r1, [r7, #40]	; 0x28
 800221c:	4629      	mov	r1, r5
 800221e:	eb63 0301 	sbc.w	r3, r3, r1
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002230:	4649      	mov	r1, r9
 8002232:	018b      	lsls	r3, r1, #6
 8002234:	4641      	mov	r1, r8
 8002236:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800223a:	4641      	mov	r1, r8
 800223c:	018a      	lsls	r2, r1, #6
 800223e:	4641      	mov	r1, r8
 8002240:	ebb2 0a01 	subs.w	sl, r2, r1
 8002244:	4649      	mov	r1, r9
 8002246:	eb63 0b01 	sbc.w	fp, r3, r1
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002256:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800225a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800225e:	4692      	mov	sl, r2
 8002260:	469b      	mov	fp, r3
 8002262:	4623      	mov	r3, r4
 8002264:	eb1a 0303 	adds.w	r3, sl, r3
 8002268:	623b      	str	r3, [r7, #32]
 800226a:	462b      	mov	r3, r5
 800226c:	eb4b 0303 	adc.w	r3, fp, r3
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800227e:	4629      	mov	r1, r5
 8002280:	028b      	lsls	r3, r1, #10
 8002282:	4621      	mov	r1, r4
 8002284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002288:	4621      	mov	r1, r4
 800228a:	028a      	lsls	r2, r1, #10
 800228c:	4610      	mov	r0, r2
 800228e:	4619      	mov	r1, r3
 8002290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002294:	2200      	movs	r2, #0
 8002296:	673b      	str	r3, [r7, #112]	; 0x70
 8002298:	677a      	str	r2, [r7, #116]	; 0x74
 800229a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800229e:	f7fd ffbb 	bl	8000218 <__aeabi_uldivmod>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4613      	mov	r3, r2
 80022a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022ac:	4b41      	ldr	r3, [pc, #260]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	3301      	adds	r3, #1
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80022be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022ce:	e0eb      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022d0:	4b38      	ldr	r3, [pc, #224]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022dc:	4b35      	ldr	r3, [pc, #212]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d06b      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e8:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	099b      	lsrs	r3, r3, #6
 80022ee:	2200      	movs	r2, #0
 80022f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80022f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022fa:	663b      	str	r3, [r7, #96]	; 0x60
 80022fc:	2300      	movs	r3, #0
 80022fe:	667b      	str	r3, [r7, #100]	; 0x64
 8002300:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002304:	4622      	mov	r2, r4
 8002306:	462b      	mov	r3, r5
 8002308:	f04f 0000 	mov.w	r0, #0
 800230c:	f04f 0100 	mov.w	r1, #0
 8002310:	0159      	lsls	r1, r3, #5
 8002312:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002316:	0150      	lsls	r0, r2, #5
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4621      	mov	r1, r4
 800231e:	1a51      	subs	r1, r2, r1
 8002320:	61b9      	str	r1, [r7, #24]
 8002322:	4629      	mov	r1, r5
 8002324:	eb63 0301 	sbc.w	r3, r3, r1
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002336:	4659      	mov	r1, fp
 8002338:	018b      	lsls	r3, r1, #6
 800233a:	4651      	mov	r1, sl
 800233c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002340:	4651      	mov	r1, sl
 8002342:	018a      	lsls	r2, r1, #6
 8002344:	4651      	mov	r1, sl
 8002346:	ebb2 0801 	subs.w	r8, r2, r1
 800234a:	4659      	mov	r1, fp
 800234c:	eb63 0901 	sbc.w	r9, r3, r1
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800235c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002360:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002364:	4690      	mov	r8, r2
 8002366:	4699      	mov	r9, r3
 8002368:	4623      	mov	r3, r4
 800236a:	eb18 0303 	adds.w	r3, r8, r3
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	462b      	mov	r3, r5
 8002372:	eb49 0303 	adc.w	r3, r9, r3
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002384:	4629      	mov	r1, r5
 8002386:	024b      	lsls	r3, r1, #9
 8002388:	4621      	mov	r1, r4
 800238a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800238e:	4621      	mov	r1, r4
 8002390:	024a      	lsls	r2, r1, #9
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800239a:	2200      	movs	r2, #0
 800239c:	65bb      	str	r3, [r7, #88]	; 0x58
 800239e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80023a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023a4:	f7fd ff38 	bl	8000218 <__aeabi_uldivmod>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4613      	mov	r3, r2
 80023ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023b2:	e065      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x420>
 80023b4:	40023800 	.word	0x40023800
 80023b8:	00f42400 	.word	0x00f42400
 80023bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c0:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	2200      	movs	r2, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	4611      	mov	r1, r2
 80023cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023d0:	653b      	str	r3, [r7, #80]	; 0x50
 80023d2:	2300      	movs	r3, #0
 80023d4:	657b      	str	r3, [r7, #84]	; 0x54
 80023d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80023da:	4642      	mov	r2, r8
 80023dc:	464b      	mov	r3, r9
 80023de:	f04f 0000 	mov.w	r0, #0
 80023e2:	f04f 0100 	mov.w	r1, #0
 80023e6:	0159      	lsls	r1, r3, #5
 80023e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ec:	0150      	lsls	r0, r2, #5
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4641      	mov	r1, r8
 80023f4:	1a51      	subs	r1, r2, r1
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	4649      	mov	r1, r9
 80023fa:	eb63 0301 	sbc.w	r3, r3, r1
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800240c:	4659      	mov	r1, fp
 800240e:	018b      	lsls	r3, r1, #6
 8002410:	4651      	mov	r1, sl
 8002412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002416:	4651      	mov	r1, sl
 8002418:	018a      	lsls	r2, r1, #6
 800241a:	4651      	mov	r1, sl
 800241c:	1a54      	subs	r4, r2, r1
 800241e:	4659      	mov	r1, fp
 8002420:	eb63 0501 	sbc.w	r5, r3, r1
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	00eb      	lsls	r3, r5, #3
 800242e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002432:	00e2      	lsls	r2, r4, #3
 8002434:	4614      	mov	r4, r2
 8002436:	461d      	mov	r5, r3
 8002438:	4643      	mov	r3, r8
 800243a:	18e3      	adds	r3, r4, r3
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	464b      	mov	r3, r9
 8002440:	eb45 0303 	adc.w	r3, r5, r3
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002452:	4629      	mov	r1, r5
 8002454:	028b      	lsls	r3, r1, #10
 8002456:	4621      	mov	r1, r4
 8002458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800245c:	4621      	mov	r1, r4
 800245e:	028a      	lsls	r2, r1, #10
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002468:	2200      	movs	r2, #0
 800246a:	64bb      	str	r3, [r7, #72]	; 0x48
 800246c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800246e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002472:	f7fd fed1 	bl	8000218 <__aeabi_uldivmod>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4613      	mov	r3, r2
 800247c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	0f1b      	lsrs	r3, r3, #28
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800248e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800249e:	e003      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80024a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	37b8      	adds	r7, #184	; 0xb8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	00f42400 	.word	0x00f42400

080024c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e28d      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8083 	beq.w	80025e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024e0:	4b94      	ldr	r3, [pc, #592]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d019      	beq.n	8002520 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024ec:	4b91      	ldr	r3, [pc, #580]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024f8:	4b8e      	ldr	r3, [pc, #568]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002504:	d00c      	beq.n	8002520 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002506:	4b8b      	ldr	r3, [pc, #556]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d112      	bne.n	8002538 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002512:	4b88      	ldr	r3, [pc, #544]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800251e:	d10b      	bne.n	8002538 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	4b84      	ldr	r3, [pc, #528]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d05b      	beq.n	80025e4 <HAL_RCC_OscConfig+0x124>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d157      	bne.n	80025e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e25a      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002540:	d106      	bne.n	8002550 <HAL_RCC_OscConfig+0x90>
 8002542:	4b7c      	ldr	r3, [pc, #496]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a7b      	ldr	r2, [pc, #492]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e01d      	b.n	800258c <HAL_RCC_OscConfig+0xcc>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0xb4>
 800255a:	4b76      	ldr	r3, [pc, #472]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a75      	ldr	r2, [pc, #468]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b73      	ldr	r3, [pc, #460]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a72      	ldr	r2, [pc, #456]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0xcc>
 8002574:	4b6f      	ldr	r3, [pc, #444]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a6e      	ldr	r2, [pc, #440]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 800257a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b6c      	ldr	r3, [pc, #432]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a6b      	ldr	r2, [pc, #428]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe fd78 	bl	8001088 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259c:	f7fe fd74 	bl	8001088 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e21f      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b61      	ldr	r3, [pc, #388]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0xdc>
 80025ba:	e014      	b.n	80025e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fd64 	bl	8001088 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fd60 	bl	8001088 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e20b      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d6:	4b57      	ldr	r3, [pc, #348]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x104>
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d06f      	beq.n	80026d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025f2:	4b50      	ldr	r3, [pc, #320]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d017      	beq.n	800262e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025fe:	4b4d      	ldr	r3, [pc, #308]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002606:	2b08      	cmp	r3, #8
 8002608:	d105      	bne.n	8002616 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800260a:	4b4a      	ldr	r3, [pc, #296]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002616:	4b47      	ldr	r3, [pc, #284]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d11c      	bne.n	800265c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002622:	4b44      	ldr	r3, [pc, #272]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d116      	bne.n	800265c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_RCC_OscConfig+0x186>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e1d3      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4937      	ldr	r1, [pc, #220]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	e03a      	b.n	80026d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002664:	4b34      	ldr	r3, [pc, #208]	; (8002738 <HAL_RCC_OscConfig+0x278>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe fd0d 	bl	8001088 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002672:	f7fe fd09 	bl	8001088 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e1b4      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002684:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b28      	ldr	r3, [pc, #160]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4925      	ldr	r1, [pc, #148]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
 80026a4:	e015      	b.n	80026d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_RCC_OscConfig+0x278>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fcec 	bl	8001088 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b4:	f7fe fce8 	bl	8001088 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e193      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d036      	beq.n	800274c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d016      	beq.n	8002714 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_RCC_OscConfig+0x27c>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7fe fccc 	bl	8001088 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f4:	f7fe fcc8 	bl	8001088 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e173      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 8002708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0x234>
 8002712:	e01b      	b.n	800274c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_OscConfig+0x27c>)
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271a:	f7fe fcb5 	bl	8001088 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	e00e      	b.n	8002740 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002722:	f7fe fcb1 	bl	8001088 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d907      	bls.n	8002740 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e15c      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
 8002734:	40023800 	.word	0x40023800
 8002738:	42470000 	.word	0x42470000
 800273c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002740:	4b8a      	ldr	r3, [pc, #552]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 8002742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1ea      	bne.n	8002722 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8097 	beq.w	8002888 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275e:	4b83      	ldr	r3, [pc, #524]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10f      	bne.n	800278a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b7f      	ldr	r3, [pc, #508]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a7e      	ldr	r2, [pc, #504]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b7c      	ldr	r3, [pc, #496]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002786:	2301      	movs	r3, #1
 8002788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278a:	4b79      	ldr	r3, [pc, #484]	; (8002970 <HAL_RCC_OscConfig+0x4b0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d118      	bne.n	80027c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002796:	4b76      	ldr	r3, [pc, #472]	; (8002970 <HAL_RCC_OscConfig+0x4b0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a75      	ldr	r2, [pc, #468]	; (8002970 <HAL_RCC_OscConfig+0x4b0>)
 800279c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a2:	f7fe fc71 	bl	8001088 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027aa:	f7fe fc6d 	bl	8001088 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e118      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	4b6c      	ldr	r3, [pc, #432]	; (8002970 <HAL_RCC_OscConfig+0x4b0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d106      	bne.n	80027de <HAL_RCC_OscConfig+0x31e>
 80027d0:	4b66      	ldr	r3, [pc, #408]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	4a65      	ldr	r2, [pc, #404]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	6713      	str	r3, [r2, #112]	; 0x70
 80027dc:	e01c      	b.n	8002818 <HAL_RCC_OscConfig+0x358>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b05      	cmp	r3, #5
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x340>
 80027e6:	4b61      	ldr	r3, [pc, #388]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a60      	ldr	r2, [pc, #384]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
 80027f2:	4b5e      	ldr	r3, [pc, #376]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	4a5d      	ldr	r2, [pc, #372]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70
 80027fe:	e00b      	b.n	8002818 <HAL_RCC_OscConfig+0x358>
 8002800:	4b5a      	ldr	r3, [pc, #360]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	4a59      	ldr	r2, [pc, #356]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	6713      	str	r3, [r2, #112]	; 0x70
 800280c:	4b57      	ldr	r3, [pc, #348]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	4a56      	ldr	r2, [pc, #344]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 8002812:	f023 0304 	bic.w	r3, r3, #4
 8002816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d015      	beq.n	800284c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fe fc32 	bl	8001088 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	e00a      	b.n	800283e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe fc2e 	bl	8001088 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0d7      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	4b4b      	ldr	r3, [pc, #300]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0ee      	beq.n	8002828 <HAL_RCC_OscConfig+0x368>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7fe fc1c 	bl	8001088 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002852:	e00a      	b.n	800286a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7fe fc18 	bl	8001088 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0c1      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286a:	4b40      	ldr	r3, [pc, #256]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1ee      	bne.n	8002854 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002876:	7dfb      	ldrb	r3, [r7, #23]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d105      	bne.n	8002888 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287c:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	4a3a      	ldr	r2, [pc, #232]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 8002882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80ad 	beq.w	80029ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002892:	4b36      	ldr	r3, [pc, #216]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b08      	cmp	r3, #8
 800289c:	d060      	beq.n	8002960 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d145      	bne.n	8002932 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	4b33      	ldr	r3, [pc, #204]	; (8002974 <HAL_RCC_OscConfig+0x4b4>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fbec 	bl	8001088 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe fbe8 	bl	8001088 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e093      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	019b      	lsls	r3, r3, #6
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	3b01      	subs	r3, #1
 80028ec:	041b      	lsls	r3, r3, #16
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	071b      	lsls	r3, r3, #28
 80028fe:	491b      	ldr	r1, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002904:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x4b4>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290a:	f7fe fbbd 	bl	8001088 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002912:	f7fe fbb9 	bl	8001088 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e064      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x452>
 8002930:	e05c      	b.n	80029ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_RCC_OscConfig+0x4b4>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe fba6 	bl	8001088 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fba2 	bl	8001088 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e04d      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_RCC_OscConfig+0x4ac>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x480>
 800295e:	e045      	b.n	80029ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d107      	bne.n	8002978 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e040      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
 800296c:	40023800 	.word	0x40023800
 8002970:	40007000 	.word	0x40007000
 8002974:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002978:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <HAL_RCC_OscConfig+0x538>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d030      	beq.n	80029e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d129      	bne.n	80029e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d122      	bne.n	80029e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029a8:	4013      	ands	r3, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d119      	bne.n	80029e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	3b01      	subs	r3, #1
 80029c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d10f      	bne.n	80029e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d107      	bne.n	80029e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800

080029fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e042      	b.n	8002a94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe f978 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2224      	movs	r2, #36	; 0x24
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f973 	bl	8002d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d175      	bne.n	8002ba8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_UART_Transmit+0x2c>
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e06e      	b.n	8002baa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2221      	movs	r2, #33	; 0x21
 8002ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ada:	f7fe fad5 	bl	8001088 <HAL_GetTick>
 8002ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	88fa      	ldrh	r2, [r7, #6]
 8002ae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	88fa      	ldrh	r2, [r7, #6]
 8002aea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af4:	d108      	bne.n	8002b08 <HAL_UART_Transmit+0x6c>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d104      	bne.n	8002b08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	e003      	b.n	8002b10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b10:	e02e      	b.n	8002b70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2180      	movs	r1, #128	; 0x80
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f848 	bl	8002bb2 <UART_WaitOnFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e03a      	b.n	8002baa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10b      	bne.n	8002b52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	e007      	b.n	8002b62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1cb      	bne.n	8002b12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2200      	movs	r2, #0
 8002b82:	2140      	movs	r1, #64	; 0x40
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f814 	bl	8002bb2 <UART_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e006      	b.n	8002baa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b086      	sub	sp, #24
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bc2:	e03b      	b.n	8002c3c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bca:	d037      	beq.n	8002c3c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bcc:	f7fe fa5c 	bl	8001088 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	6a3a      	ldr	r2, [r7, #32]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d302      	bcc.n	8002be2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e03a      	b.n	8002c5c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d023      	beq.n	8002c3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b80      	cmp	r3, #128	; 0x80
 8002bf8:	d020      	beq.n	8002c3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b40      	cmp	r3, #64	; 0x40
 8002bfe:	d01d      	beq.n	8002c3c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d116      	bne.n	8002c3c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f81d 	bl	8002c64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e00f      	b.n	8002c5c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4013      	ands	r3, r2
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d0b4      	beq.n	8002bc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b095      	sub	sp, #84	; 0x54
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c76:	e853 3f00 	ldrex	r3, [r3]
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c8c:	643a      	str	r2, [r7, #64]	; 0x40
 8002c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e5      	bne.n	8002c6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3314      	adds	r3, #20
 8002ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	e853 3f00 	ldrex	r3, [r3]
 8002cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f023 0301 	bic.w	r3, r3, #1
 8002cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3314      	adds	r3, #20
 8002cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc8:	e841 2300 	strex	r3, r2, [r1]
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e5      	bne.n	8002ca0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d119      	bne.n	8002d10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	e853 3f00 	ldrex	r3, [r3]
 8002cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f023 0310 	bic.w	r3, r3, #16
 8002cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cfc:	61ba      	str	r2, [r7, #24]
 8002cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d00:	6979      	ldr	r1, [r7, #20]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	e841 2300 	strex	r3, r2, [r1]
 8002d08:	613b      	str	r3, [r7, #16]
   return(result);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e5      	bne.n	8002cdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d1e:	bf00      	nop
 8002d20:	3754      	adds	r7, #84	; 0x54
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d30:	b0c0      	sub	sp, #256	; 0x100
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d48:	68d9      	ldr	r1, [r3, #12]
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	ea40 0301 	orr.w	r3, r0, r1
 8002d54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d84:	f021 010c 	bic.w	r1, r1, #12
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d92:	430b      	orrs	r3, r1
 8002d94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da6:	6999      	ldr	r1, [r3, #24]
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	ea40 0301 	orr.w	r3, r0, r1
 8002db2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4b8f      	ldr	r3, [pc, #572]	; (8002ff8 <UART_SetConfig+0x2cc>)
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d005      	beq.n	8002dcc <UART_SetConfig+0xa0>
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b8d      	ldr	r3, [pc, #564]	; (8002ffc <UART_SetConfig+0x2d0>)
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d104      	bne.n	8002dd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dcc:	f7ff f934 	bl	8002038 <HAL_RCC_GetPCLK2Freq>
 8002dd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002dd4:	e003      	b.n	8002dde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dd6:	f7ff f91b 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 8002dda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de8:	f040 810c 	bne.w	8003004 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002df6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002dfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002dfe:	4622      	mov	r2, r4
 8002e00:	462b      	mov	r3, r5
 8002e02:	1891      	adds	r1, r2, r2
 8002e04:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e06:	415b      	adcs	r3, r3
 8002e08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e0e:	4621      	mov	r1, r4
 8002e10:	eb12 0801 	adds.w	r8, r2, r1
 8002e14:	4629      	mov	r1, r5
 8002e16:	eb43 0901 	adc.w	r9, r3, r1
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e2e:	4690      	mov	r8, r2
 8002e30:	4699      	mov	r9, r3
 8002e32:	4623      	mov	r3, r4
 8002e34:	eb18 0303 	adds.w	r3, r8, r3
 8002e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e3c:	462b      	mov	r3, r5
 8002e3e:	eb49 0303 	adc.w	r3, r9, r3
 8002e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	18db      	adds	r3, r3, r3
 8002e5e:	653b      	str	r3, [r7, #80]	; 0x50
 8002e60:	4613      	mov	r3, r2
 8002e62:	eb42 0303 	adc.w	r3, r2, r3
 8002e66:	657b      	str	r3, [r7, #84]	; 0x54
 8002e68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e70:	f7fd f9d2 	bl	8000218 <__aeabi_uldivmod>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4b61      	ldr	r3, [pc, #388]	; (8003000 <UART_SetConfig+0x2d4>)
 8002e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	011c      	lsls	r4, r3, #4
 8002e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e94:	4642      	mov	r2, r8
 8002e96:	464b      	mov	r3, r9
 8002e98:	1891      	adds	r1, r2, r2
 8002e9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e9c:	415b      	adcs	r3, r3
 8002e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ea4:	4641      	mov	r1, r8
 8002ea6:	eb12 0a01 	adds.w	sl, r2, r1
 8002eaa:	4649      	mov	r1, r9
 8002eac:	eb43 0b01 	adc.w	fp, r3, r1
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ebc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ec0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ec4:	4692      	mov	sl, r2
 8002ec6:	469b      	mov	fp, r3
 8002ec8:	4643      	mov	r3, r8
 8002eca:	eb1a 0303 	adds.w	r3, sl, r3
 8002ece:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ed2:	464b      	mov	r3, r9
 8002ed4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ed8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ee8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002eec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	18db      	adds	r3, r3, r3
 8002ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	eb42 0303 	adc.w	r3, r2, r3
 8002efc:	647b      	str	r3, [r7, #68]	; 0x44
 8002efe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f06:	f7fd f987 	bl	8000218 <__aeabi_uldivmod>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <UART_SetConfig+0x2d4>)
 8002f12:	fba3 2301 	umull	r2, r3, r3, r1
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2264      	movs	r2, #100	; 0x64
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	1acb      	subs	r3, r1, r3
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f26:	4b36      	ldr	r3, [pc, #216]	; (8003000 <UART_SetConfig+0x2d4>)
 8002f28:	fba3 2302 	umull	r2, r3, r3, r2
 8002f2c:	095b      	lsrs	r3, r3, #5
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f34:	441c      	add	r4, r3
 8002f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f48:	4642      	mov	r2, r8
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	1891      	adds	r1, r2, r2
 8002f4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f50:	415b      	adcs	r3, r3
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f58:	4641      	mov	r1, r8
 8002f5a:	1851      	adds	r1, r2, r1
 8002f5c:	6339      	str	r1, [r7, #48]	; 0x30
 8002f5e:	4649      	mov	r1, r9
 8002f60:	414b      	adcs	r3, r1
 8002f62:	637b      	str	r3, [r7, #52]	; 0x34
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f70:	4659      	mov	r1, fp
 8002f72:	00cb      	lsls	r3, r1, #3
 8002f74:	4651      	mov	r1, sl
 8002f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f7a:	4651      	mov	r1, sl
 8002f7c:	00ca      	lsls	r2, r1, #3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	4603      	mov	r3, r0
 8002f84:	4642      	mov	r2, r8
 8002f86:	189b      	adds	r3, r3, r2
 8002f88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f8c:	464b      	mov	r3, r9
 8002f8e:	460a      	mov	r2, r1
 8002f90:	eb42 0303 	adc.w	r3, r2, r3
 8002f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fa4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002fa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fac:	460b      	mov	r3, r1
 8002fae:	18db      	adds	r3, r3, r3
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	eb42 0303 	adc.w	r3, r2, r3
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fc2:	f7fd f929 	bl	8000218 <__aeabi_uldivmod>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <UART_SetConfig+0x2d4>)
 8002fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd0:	095b      	lsrs	r3, r3, #5
 8002fd2:	2164      	movs	r1, #100	; 0x64
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	3332      	adds	r3, #50	; 0x32
 8002fde:	4a08      	ldr	r2, [pc, #32]	; (8003000 <UART_SetConfig+0x2d4>)
 8002fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	f003 0207 	and.w	r2, r3, #7
 8002fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4422      	add	r2, r4
 8002ff2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ff4:	e106      	b.n	8003204 <UART_SetConfig+0x4d8>
 8002ff6:	bf00      	nop
 8002ff8:	40011000 	.word	0x40011000
 8002ffc:	40011400 	.word	0x40011400
 8003000:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003008:	2200      	movs	r2, #0
 800300a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800300e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003012:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003016:	4642      	mov	r2, r8
 8003018:	464b      	mov	r3, r9
 800301a:	1891      	adds	r1, r2, r2
 800301c:	6239      	str	r1, [r7, #32]
 800301e:	415b      	adcs	r3, r3
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
 8003022:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003026:	4641      	mov	r1, r8
 8003028:	1854      	adds	r4, r2, r1
 800302a:	4649      	mov	r1, r9
 800302c:	eb43 0501 	adc.w	r5, r3, r1
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	00eb      	lsls	r3, r5, #3
 800303a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800303e:	00e2      	lsls	r2, r4, #3
 8003040:	4614      	mov	r4, r2
 8003042:	461d      	mov	r5, r3
 8003044:	4643      	mov	r3, r8
 8003046:	18e3      	adds	r3, r4, r3
 8003048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800304c:	464b      	mov	r3, r9
 800304e:	eb45 0303 	adc.w	r3, r5, r3
 8003052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003062:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003072:	4629      	mov	r1, r5
 8003074:	008b      	lsls	r3, r1, #2
 8003076:	4621      	mov	r1, r4
 8003078:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800307c:	4621      	mov	r1, r4
 800307e:	008a      	lsls	r2, r1, #2
 8003080:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003084:	f7fd f8c8 	bl	8000218 <__aeabi_uldivmod>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4b60      	ldr	r3, [pc, #384]	; (8003210 <UART_SetConfig+0x4e4>)
 800308e:	fba3 2302 	umull	r2, r3, r3, r2
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	011c      	lsls	r4, r3, #4
 8003096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800309a:	2200      	movs	r2, #0
 800309c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030a8:	4642      	mov	r2, r8
 80030aa:	464b      	mov	r3, r9
 80030ac:	1891      	adds	r1, r2, r2
 80030ae:	61b9      	str	r1, [r7, #24]
 80030b0:	415b      	adcs	r3, r3
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030b8:	4641      	mov	r1, r8
 80030ba:	1851      	adds	r1, r2, r1
 80030bc:	6139      	str	r1, [r7, #16]
 80030be:	4649      	mov	r1, r9
 80030c0:	414b      	adcs	r3, r1
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030d0:	4659      	mov	r1, fp
 80030d2:	00cb      	lsls	r3, r1, #3
 80030d4:	4651      	mov	r1, sl
 80030d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030da:	4651      	mov	r1, sl
 80030dc:	00ca      	lsls	r2, r1, #3
 80030de:	4610      	mov	r0, r2
 80030e0:	4619      	mov	r1, r3
 80030e2:	4603      	mov	r3, r0
 80030e4:	4642      	mov	r2, r8
 80030e6:	189b      	adds	r3, r3, r2
 80030e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030ec:	464b      	mov	r3, r9
 80030ee:	460a      	mov	r2, r1
 80030f0:	eb42 0303 	adc.w	r3, r2, r3
 80030f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	67bb      	str	r3, [r7, #120]	; 0x78
 8003102:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003110:	4649      	mov	r1, r9
 8003112:	008b      	lsls	r3, r1, #2
 8003114:	4641      	mov	r1, r8
 8003116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800311a:	4641      	mov	r1, r8
 800311c:	008a      	lsls	r2, r1, #2
 800311e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003122:	f7fd f879 	bl	8000218 <__aeabi_uldivmod>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4611      	mov	r1, r2
 800312c:	4b38      	ldr	r3, [pc, #224]	; (8003210 <UART_SetConfig+0x4e4>)
 800312e:	fba3 2301 	umull	r2, r3, r3, r1
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	2264      	movs	r2, #100	; 0x64
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	1acb      	subs	r3, r1, r3
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	3332      	adds	r3, #50	; 0x32
 8003140:	4a33      	ldr	r2, [pc, #204]	; (8003210 <UART_SetConfig+0x4e4>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800314c:	441c      	add	r4, r3
 800314e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003152:	2200      	movs	r2, #0
 8003154:	673b      	str	r3, [r7, #112]	; 0x70
 8003156:	677a      	str	r2, [r7, #116]	; 0x74
 8003158:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800315c:	4642      	mov	r2, r8
 800315e:	464b      	mov	r3, r9
 8003160:	1891      	adds	r1, r2, r2
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	415b      	adcs	r3, r3
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800316c:	4641      	mov	r1, r8
 800316e:	1851      	adds	r1, r2, r1
 8003170:	6039      	str	r1, [r7, #0]
 8003172:	4649      	mov	r1, r9
 8003174:	414b      	adcs	r3, r1
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003184:	4659      	mov	r1, fp
 8003186:	00cb      	lsls	r3, r1, #3
 8003188:	4651      	mov	r1, sl
 800318a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800318e:	4651      	mov	r1, sl
 8003190:	00ca      	lsls	r2, r1, #3
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	4603      	mov	r3, r0
 8003198:	4642      	mov	r2, r8
 800319a:	189b      	adds	r3, r3, r2
 800319c:	66bb      	str	r3, [r7, #104]	; 0x68
 800319e:	464b      	mov	r3, r9
 80031a0:	460a      	mov	r2, r1
 80031a2:	eb42 0303 	adc.w	r3, r2, r3
 80031a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	663b      	str	r3, [r7, #96]	; 0x60
 80031b2:	667a      	str	r2, [r7, #100]	; 0x64
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031c0:	4649      	mov	r1, r9
 80031c2:	008b      	lsls	r3, r1, #2
 80031c4:	4641      	mov	r1, r8
 80031c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ca:	4641      	mov	r1, r8
 80031cc:	008a      	lsls	r2, r1, #2
 80031ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031d2:	f7fd f821 	bl	8000218 <__aeabi_uldivmod>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <UART_SetConfig+0x4e4>)
 80031dc:	fba3 1302 	umull	r1, r3, r3, r2
 80031e0:	095b      	lsrs	r3, r3, #5
 80031e2:	2164      	movs	r1, #100	; 0x64
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	3332      	adds	r3, #50	; 0x32
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <UART_SetConfig+0x4e4>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	f003 020f 	and.w	r2, r3, #15
 80031fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4422      	add	r2, r4
 8003202:	609a      	str	r2, [r3, #8]
}
 8003204:	bf00      	nop
 8003206:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800320a:	46bd      	mov	sp, r7
 800320c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003210:	51eb851f 	.word	0x51eb851f

08003214 <std>:
 8003214:	2300      	movs	r3, #0
 8003216:	b510      	push	{r4, lr}
 8003218:	4604      	mov	r4, r0
 800321a:	e9c0 3300 	strd	r3, r3, [r0]
 800321e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003222:	6083      	str	r3, [r0, #8]
 8003224:	8181      	strh	r1, [r0, #12]
 8003226:	6643      	str	r3, [r0, #100]	; 0x64
 8003228:	81c2      	strh	r2, [r0, #14]
 800322a:	6183      	str	r3, [r0, #24]
 800322c:	4619      	mov	r1, r3
 800322e:	2208      	movs	r2, #8
 8003230:	305c      	adds	r0, #92	; 0x5c
 8003232:	f000 f9ed 	bl	8003610 <memset>
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <std+0x58>)
 8003238:	6263      	str	r3, [r4, #36]	; 0x24
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <std+0x5c>)
 800323c:	62a3      	str	r3, [r4, #40]	; 0x28
 800323e:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <std+0x60>)
 8003240:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003242:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <std+0x64>)
 8003244:	6323      	str	r3, [r4, #48]	; 0x30
 8003246:	4b0d      	ldr	r3, [pc, #52]	; (800327c <std+0x68>)
 8003248:	6224      	str	r4, [r4, #32]
 800324a:	429c      	cmp	r4, r3
 800324c:	d006      	beq.n	800325c <std+0x48>
 800324e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003252:	4294      	cmp	r4, r2
 8003254:	d002      	beq.n	800325c <std+0x48>
 8003256:	33d0      	adds	r3, #208	; 0xd0
 8003258:	429c      	cmp	r4, r3
 800325a:	d105      	bne.n	8003268 <std+0x54>
 800325c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003264:	f000 ba4c 	b.w	8003700 <__retarget_lock_init_recursive>
 8003268:	bd10      	pop	{r4, pc}
 800326a:	bf00      	nop
 800326c:	08003461 	.word	0x08003461
 8003270:	08003483 	.word	0x08003483
 8003274:	080034bb 	.word	0x080034bb
 8003278:	080034df 	.word	0x080034df
 800327c:	200001a0 	.word	0x200001a0

08003280 <stdio_exit_handler>:
 8003280:	4a02      	ldr	r2, [pc, #8]	; (800328c <stdio_exit_handler+0xc>)
 8003282:	4903      	ldr	r1, [pc, #12]	; (8003290 <stdio_exit_handler+0x10>)
 8003284:	4803      	ldr	r0, [pc, #12]	; (8003294 <stdio_exit_handler+0x14>)
 8003286:	f000 b869 	b.w	800335c <_fwalk_sglue>
 800328a:	bf00      	nop
 800328c:	2000000c 	.word	0x2000000c
 8003290:	08003a21 	.word	0x08003a21
 8003294:	20000018 	.word	0x20000018

08003298 <cleanup_stdio>:
 8003298:	6841      	ldr	r1, [r0, #4]
 800329a:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <cleanup_stdio+0x34>)
 800329c:	4299      	cmp	r1, r3
 800329e:	b510      	push	{r4, lr}
 80032a0:	4604      	mov	r4, r0
 80032a2:	d001      	beq.n	80032a8 <cleanup_stdio+0x10>
 80032a4:	f000 fbbc 	bl	8003a20 <_fflush_r>
 80032a8:	68a1      	ldr	r1, [r4, #8]
 80032aa:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <cleanup_stdio+0x38>)
 80032ac:	4299      	cmp	r1, r3
 80032ae:	d002      	beq.n	80032b6 <cleanup_stdio+0x1e>
 80032b0:	4620      	mov	r0, r4
 80032b2:	f000 fbb5 	bl	8003a20 <_fflush_r>
 80032b6:	68e1      	ldr	r1, [r4, #12]
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <cleanup_stdio+0x3c>)
 80032ba:	4299      	cmp	r1, r3
 80032bc:	d004      	beq.n	80032c8 <cleanup_stdio+0x30>
 80032be:	4620      	mov	r0, r4
 80032c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032c4:	f000 bbac 	b.w	8003a20 <_fflush_r>
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	bf00      	nop
 80032cc:	200001a0 	.word	0x200001a0
 80032d0:	20000208 	.word	0x20000208
 80032d4:	20000270 	.word	0x20000270

080032d8 <global_stdio_init.part.0>:
 80032d8:	b510      	push	{r4, lr}
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <global_stdio_init.part.0+0x30>)
 80032dc:	4c0b      	ldr	r4, [pc, #44]	; (800330c <global_stdio_init.part.0+0x34>)
 80032de:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <global_stdio_init.part.0+0x38>)
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	4620      	mov	r0, r4
 80032e4:	2200      	movs	r2, #0
 80032e6:	2104      	movs	r1, #4
 80032e8:	f7ff ff94 	bl	8003214 <std>
 80032ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80032f0:	2201      	movs	r2, #1
 80032f2:	2109      	movs	r1, #9
 80032f4:	f7ff ff8e 	bl	8003214 <std>
 80032f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80032fc:	2202      	movs	r2, #2
 80032fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003302:	2112      	movs	r1, #18
 8003304:	f7ff bf86 	b.w	8003214 <std>
 8003308:	200002d8 	.word	0x200002d8
 800330c:	200001a0 	.word	0x200001a0
 8003310:	08003281 	.word	0x08003281

08003314 <__sfp_lock_acquire>:
 8003314:	4801      	ldr	r0, [pc, #4]	; (800331c <__sfp_lock_acquire+0x8>)
 8003316:	f000 b9f4 	b.w	8003702 <__retarget_lock_acquire_recursive>
 800331a:	bf00      	nop
 800331c:	200002e1 	.word	0x200002e1

08003320 <__sfp_lock_release>:
 8003320:	4801      	ldr	r0, [pc, #4]	; (8003328 <__sfp_lock_release+0x8>)
 8003322:	f000 b9ef 	b.w	8003704 <__retarget_lock_release_recursive>
 8003326:	bf00      	nop
 8003328:	200002e1 	.word	0x200002e1

0800332c <__sinit>:
 800332c:	b510      	push	{r4, lr}
 800332e:	4604      	mov	r4, r0
 8003330:	f7ff fff0 	bl	8003314 <__sfp_lock_acquire>
 8003334:	6a23      	ldr	r3, [r4, #32]
 8003336:	b11b      	cbz	r3, 8003340 <__sinit+0x14>
 8003338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800333c:	f7ff bff0 	b.w	8003320 <__sfp_lock_release>
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <__sinit+0x28>)
 8003342:	6223      	str	r3, [r4, #32]
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <__sinit+0x2c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f5      	bne.n	8003338 <__sinit+0xc>
 800334c:	f7ff ffc4 	bl	80032d8 <global_stdio_init.part.0>
 8003350:	e7f2      	b.n	8003338 <__sinit+0xc>
 8003352:	bf00      	nop
 8003354:	08003299 	.word	0x08003299
 8003358:	200002d8 	.word	0x200002d8

0800335c <_fwalk_sglue>:
 800335c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003360:	4607      	mov	r7, r0
 8003362:	4688      	mov	r8, r1
 8003364:	4614      	mov	r4, r2
 8003366:	2600      	movs	r6, #0
 8003368:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800336c:	f1b9 0901 	subs.w	r9, r9, #1
 8003370:	d505      	bpl.n	800337e <_fwalk_sglue+0x22>
 8003372:	6824      	ldr	r4, [r4, #0]
 8003374:	2c00      	cmp	r4, #0
 8003376:	d1f7      	bne.n	8003368 <_fwalk_sglue+0xc>
 8003378:	4630      	mov	r0, r6
 800337a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800337e:	89ab      	ldrh	r3, [r5, #12]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d907      	bls.n	8003394 <_fwalk_sglue+0x38>
 8003384:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003388:	3301      	adds	r3, #1
 800338a:	d003      	beq.n	8003394 <_fwalk_sglue+0x38>
 800338c:	4629      	mov	r1, r5
 800338e:	4638      	mov	r0, r7
 8003390:	47c0      	blx	r8
 8003392:	4306      	orrs	r6, r0
 8003394:	3568      	adds	r5, #104	; 0x68
 8003396:	e7e9      	b.n	800336c <_fwalk_sglue+0x10>

08003398 <putchar>:
 8003398:	4b02      	ldr	r3, [pc, #8]	; (80033a4 <putchar+0xc>)
 800339a:	4601      	mov	r1, r0
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	6882      	ldr	r2, [r0, #8]
 80033a0:	f000 bbc8 	b.w	8003b34 <_putc_r>
 80033a4:	20000064 	.word	0x20000064

080033a8 <_puts_r>:
 80033a8:	6a03      	ldr	r3, [r0, #32]
 80033aa:	b570      	push	{r4, r5, r6, lr}
 80033ac:	6884      	ldr	r4, [r0, #8]
 80033ae:	4605      	mov	r5, r0
 80033b0:	460e      	mov	r6, r1
 80033b2:	b90b      	cbnz	r3, 80033b8 <_puts_r+0x10>
 80033b4:	f7ff ffba 	bl	800332c <__sinit>
 80033b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033ba:	07db      	lsls	r3, r3, #31
 80033bc:	d405      	bmi.n	80033ca <_puts_r+0x22>
 80033be:	89a3      	ldrh	r3, [r4, #12]
 80033c0:	0598      	lsls	r0, r3, #22
 80033c2:	d402      	bmi.n	80033ca <_puts_r+0x22>
 80033c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033c6:	f000 f99c 	bl	8003702 <__retarget_lock_acquire_recursive>
 80033ca:	89a3      	ldrh	r3, [r4, #12]
 80033cc:	0719      	lsls	r1, r3, #28
 80033ce:	d513      	bpl.n	80033f8 <_puts_r+0x50>
 80033d0:	6923      	ldr	r3, [r4, #16]
 80033d2:	b18b      	cbz	r3, 80033f8 <_puts_r+0x50>
 80033d4:	3e01      	subs	r6, #1
 80033d6:	68a3      	ldr	r3, [r4, #8]
 80033d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80033dc:	3b01      	subs	r3, #1
 80033de:	60a3      	str	r3, [r4, #8]
 80033e0:	b9e9      	cbnz	r1, 800341e <_puts_r+0x76>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	da2e      	bge.n	8003444 <_puts_r+0x9c>
 80033e6:	4622      	mov	r2, r4
 80033e8:	210a      	movs	r1, #10
 80033ea:	4628      	mov	r0, r5
 80033ec:	f000 f87b 	bl	80034e6 <__swbuf_r>
 80033f0:	3001      	adds	r0, #1
 80033f2:	d007      	beq.n	8003404 <_puts_r+0x5c>
 80033f4:	250a      	movs	r5, #10
 80033f6:	e007      	b.n	8003408 <_puts_r+0x60>
 80033f8:	4621      	mov	r1, r4
 80033fa:	4628      	mov	r0, r5
 80033fc:	f000 f8b0 	bl	8003560 <__swsetup_r>
 8003400:	2800      	cmp	r0, #0
 8003402:	d0e7      	beq.n	80033d4 <_puts_r+0x2c>
 8003404:	f04f 35ff 	mov.w	r5, #4294967295
 8003408:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800340a:	07da      	lsls	r2, r3, #31
 800340c:	d405      	bmi.n	800341a <_puts_r+0x72>
 800340e:	89a3      	ldrh	r3, [r4, #12]
 8003410:	059b      	lsls	r3, r3, #22
 8003412:	d402      	bmi.n	800341a <_puts_r+0x72>
 8003414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003416:	f000 f975 	bl	8003704 <__retarget_lock_release_recursive>
 800341a:	4628      	mov	r0, r5
 800341c:	bd70      	pop	{r4, r5, r6, pc}
 800341e:	2b00      	cmp	r3, #0
 8003420:	da04      	bge.n	800342c <_puts_r+0x84>
 8003422:	69a2      	ldr	r2, [r4, #24]
 8003424:	429a      	cmp	r2, r3
 8003426:	dc06      	bgt.n	8003436 <_puts_r+0x8e>
 8003428:	290a      	cmp	r1, #10
 800342a:	d004      	beq.n	8003436 <_puts_r+0x8e>
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	6022      	str	r2, [r4, #0]
 8003432:	7019      	strb	r1, [r3, #0]
 8003434:	e7cf      	b.n	80033d6 <_puts_r+0x2e>
 8003436:	4622      	mov	r2, r4
 8003438:	4628      	mov	r0, r5
 800343a:	f000 f854 	bl	80034e6 <__swbuf_r>
 800343e:	3001      	adds	r0, #1
 8003440:	d1c9      	bne.n	80033d6 <_puts_r+0x2e>
 8003442:	e7df      	b.n	8003404 <_puts_r+0x5c>
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	250a      	movs	r5, #10
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	6022      	str	r2, [r4, #0]
 800344c:	701d      	strb	r5, [r3, #0]
 800344e:	e7db      	b.n	8003408 <_puts_r+0x60>

08003450 <puts>:
 8003450:	4b02      	ldr	r3, [pc, #8]	; (800345c <puts+0xc>)
 8003452:	4601      	mov	r1, r0
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	f7ff bfa7 	b.w	80033a8 <_puts_r>
 800345a:	bf00      	nop
 800345c:	20000064 	.word	0x20000064

08003460 <__sread>:
 8003460:	b510      	push	{r4, lr}
 8003462:	460c      	mov	r4, r1
 8003464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003468:	f000 f8fc 	bl	8003664 <_read_r>
 800346c:	2800      	cmp	r0, #0
 800346e:	bfab      	itete	ge
 8003470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003472:	89a3      	ldrhlt	r3, [r4, #12]
 8003474:	181b      	addge	r3, r3, r0
 8003476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800347a:	bfac      	ite	ge
 800347c:	6563      	strge	r3, [r4, #84]	; 0x54
 800347e:	81a3      	strhlt	r3, [r4, #12]
 8003480:	bd10      	pop	{r4, pc}

08003482 <__swrite>:
 8003482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003486:	461f      	mov	r7, r3
 8003488:	898b      	ldrh	r3, [r1, #12]
 800348a:	05db      	lsls	r3, r3, #23
 800348c:	4605      	mov	r5, r0
 800348e:	460c      	mov	r4, r1
 8003490:	4616      	mov	r6, r2
 8003492:	d505      	bpl.n	80034a0 <__swrite+0x1e>
 8003494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003498:	2302      	movs	r3, #2
 800349a:	2200      	movs	r2, #0
 800349c:	f000 f8d0 	bl	8003640 <_lseek_r>
 80034a0:	89a3      	ldrh	r3, [r4, #12]
 80034a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034aa:	81a3      	strh	r3, [r4, #12]
 80034ac:	4632      	mov	r2, r6
 80034ae:	463b      	mov	r3, r7
 80034b0:	4628      	mov	r0, r5
 80034b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034b6:	f000 b8e7 	b.w	8003688 <_write_r>

080034ba <__sseek>:
 80034ba:	b510      	push	{r4, lr}
 80034bc:	460c      	mov	r4, r1
 80034be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034c2:	f000 f8bd 	bl	8003640 <_lseek_r>
 80034c6:	1c43      	adds	r3, r0, #1
 80034c8:	89a3      	ldrh	r3, [r4, #12]
 80034ca:	bf15      	itete	ne
 80034cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80034ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034d6:	81a3      	strheq	r3, [r4, #12]
 80034d8:	bf18      	it	ne
 80034da:	81a3      	strhne	r3, [r4, #12]
 80034dc:	bd10      	pop	{r4, pc}

080034de <__sclose>:
 80034de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034e2:	f000 b89d 	b.w	8003620 <_close_r>

080034e6 <__swbuf_r>:
 80034e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e8:	460e      	mov	r6, r1
 80034ea:	4614      	mov	r4, r2
 80034ec:	4605      	mov	r5, r0
 80034ee:	b118      	cbz	r0, 80034f8 <__swbuf_r+0x12>
 80034f0:	6a03      	ldr	r3, [r0, #32]
 80034f2:	b90b      	cbnz	r3, 80034f8 <__swbuf_r+0x12>
 80034f4:	f7ff ff1a 	bl	800332c <__sinit>
 80034f8:	69a3      	ldr	r3, [r4, #24]
 80034fa:	60a3      	str	r3, [r4, #8]
 80034fc:	89a3      	ldrh	r3, [r4, #12]
 80034fe:	071a      	lsls	r2, r3, #28
 8003500:	d525      	bpl.n	800354e <__swbuf_r+0x68>
 8003502:	6923      	ldr	r3, [r4, #16]
 8003504:	b31b      	cbz	r3, 800354e <__swbuf_r+0x68>
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	6922      	ldr	r2, [r4, #16]
 800350a:	1a98      	subs	r0, r3, r2
 800350c:	6963      	ldr	r3, [r4, #20]
 800350e:	b2f6      	uxtb	r6, r6
 8003510:	4283      	cmp	r3, r0
 8003512:	4637      	mov	r7, r6
 8003514:	dc04      	bgt.n	8003520 <__swbuf_r+0x3a>
 8003516:	4621      	mov	r1, r4
 8003518:	4628      	mov	r0, r5
 800351a:	f000 fa81 	bl	8003a20 <_fflush_r>
 800351e:	b9e0      	cbnz	r0, 800355a <__swbuf_r+0x74>
 8003520:	68a3      	ldr	r3, [r4, #8]
 8003522:	3b01      	subs	r3, #1
 8003524:	60a3      	str	r3, [r4, #8]
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	6022      	str	r2, [r4, #0]
 800352c:	701e      	strb	r6, [r3, #0]
 800352e:	6962      	ldr	r2, [r4, #20]
 8003530:	1c43      	adds	r3, r0, #1
 8003532:	429a      	cmp	r2, r3
 8003534:	d004      	beq.n	8003540 <__swbuf_r+0x5a>
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	07db      	lsls	r3, r3, #31
 800353a:	d506      	bpl.n	800354a <__swbuf_r+0x64>
 800353c:	2e0a      	cmp	r6, #10
 800353e:	d104      	bne.n	800354a <__swbuf_r+0x64>
 8003540:	4621      	mov	r1, r4
 8003542:	4628      	mov	r0, r5
 8003544:	f000 fa6c 	bl	8003a20 <_fflush_r>
 8003548:	b938      	cbnz	r0, 800355a <__swbuf_r+0x74>
 800354a:	4638      	mov	r0, r7
 800354c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800354e:	4621      	mov	r1, r4
 8003550:	4628      	mov	r0, r5
 8003552:	f000 f805 	bl	8003560 <__swsetup_r>
 8003556:	2800      	cmp	r0, #0
 8003558:	d0d5      	beq.n	8003506 <__swbuf_r+0x20>
 800355a:	f04f 37ff 	mov.w	r7, #4294967295
 800355e:	e7f4      	b.n	800354a <__swbuf_r+0x64>

08003560 <__swsetup_r>:
 8003560:	b538      	push	{r3, r4, r5, lr}
 8003562:	4b2a      	ldr	r3, [pc, #168]	; (800360c <__swsetup_r+0xac>)
 8003564:	4605      	mov	r5, r0
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	460c      	mov	r4, r1
 800356a:	b118      	cbz	r0, 8003574 <__swsetup_r+0x14>
 800356c:	6a03      	ldr	r3, [r0, #32]
 800356e:	b90b      	cbnz	r3, 8003574 <__swsetup_r+0x14>
 8003570:	f7ff fedc 	bl	800332c <__sinit>
 8003574:	89a3      	ldrh	r3, [r4, #12]
 8003576:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800357a:	0718      	lsls	r0, r3, #28
 800357c:	d422      	bmi.n	80035c4 <__swsetup_r+0x64>
 800357e:	06d9      	lsls	r1, r3, #27
 8003580:	d407      	bmi.n	8003592 <__swsetup_r+0x32>
 8003582:	2309      	movs	r3, #9
 8003584:	602b      	str	r3, [r5, #0]
 8003586:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800358a:	81a3      	strh	r3, [r4, #12]
 800358c:	f04f 30ff 	mov.w	r0, #4294967295
 8003590:	e034      	b.n	80035fc <__swsetup_r+0x9c>
 8003592:	0758      	lsls	r0, r3, #29
 8003594:	d512      	bpl.n	80035bc <__swsetup_r+0x5c>
 8003596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003598:	b141      	cbz	r1, 80035ac <__swsetup_r+0x4c>
 800359a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800359e:	4299      	cmp	r1, r3
 80035a0:	d002      	beq.n	80035a8 <__swsetup_r+0x48>
 80035a2:	4628      	mov	r0, r5
 80035a4:	f000 f8be 	bl	8003724 <_free_r>
 80035a8:	2300      	movs	r3, #0
 80035aa:	6363      	str	r3, [r4, #52]	; 0x34
 80035ac:	89a3      	ldrh	r3, [r4, #12]
 80035ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035b2:	81a3      	strh	r3, [r4, #12]
 80035b4:	2300      	movs	r3, #0
 80035b6:	6063      	str	r3, [r4, #4]
 80035b8:	6923      	ldr	r3, [r4, #16]
 80035ba:	6023      	str	r3, [r4, #0]
 80035bc:	89a3      	ldrh	r3, [r4, #12]
 80035be:	f043 0308 	orr.w	r3, r3, #8
 80035c2:	81a3      	strh	r3, [r4, #12]
 80035c4:	6923      	ldr	r3, [r4, #16]
 80035c6:	b94b      	cbnz	r3, 80035dc <__swsetup_r+0x7c>
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d2:	d003      	beq.n	80035dc <__swsetup_r+0x7c>
 80035d4:	4621      	mov	r1, r4
 80035d6:	4628      	mov	r0, r5
 80035d8:	f000 fa70 	bl	8003abc <__smakebuf_r>
 80035dc:	89a0      	ldrh	r0, [r4, #12]
 80035de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035e2:	f010 0301 	ands.w	r3, r0, #1
 80035e6:	d00a      	beq.n	80035fe <__swsetup_r+0x9e>
 80035e8:	2300      	movs	r3, #0
 80035ea:	60a3      	str	r3, [r4, #8]
 80035ec:	6963      	ldr	r3, [r4, #20]
 80035ee:	425b      	negs	r3, r3
 80035f0:	61a3      	str	r3, [r4, #24]
 80035f2:	6923      	ldr	r3, [r4, #16]
 80035f4:	b943      	cbnz	r3, 8003608 <__swsetup_r+0xa8>
 80035f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80035fa:	d1c4      	bne.n	8003586 <__swsetup_r+0x26>
 80035fc:	bd38      	pop	{r3, r4, r5, pc}
 80035fe:	0781      	lsls	r1, r0, #30
 8003600:	bf58      	it	pl
 8003602:	6963      	ldrpl	r3, [r4, #20]
 8003604:	60a3      	str	r3, [r4, #8]
 8003606:	e7f4      	b.n	80035f2 <__swsetup_r+0x92>
 8003608:	2000      	movs	r0, #0
 800360a:	e7f7      	b.n	80035fc <__swsetup_r+0x9c>
 800360c:	20000064 	.word	0x20000064

08003610 <memset>:
 8003610:	4402      	add	r2, r0
 8003612:	4603      	mov	r3, r0
 8003614:	4293      	cmp	r3, r2
 8003616:	d100      	bne.n	800361a <memset+0xa>
 8003618:	4770      	bx	lr
 800361a:	f803 1b01 	strb.w	r1, [r3], #1
 800361e:	e7f9      	b.n	8003614 <memset+0x4>

08003620 <_close_r>:
 8003620:	b538      	push	{r3, r4, r5, lr}
 8003622:	4d06      	ldr	r5, [pc, #24]	; (800363c <_close_r+0x1c>)
 8003624:	2300      	movs	r3, #0
 8003626:	4604      	mov	r4, r0
 8003628:	4608      	mov	r0, r1
 800362a:	602b      	str	r3, [r5, #0]
 800362c:	f7fd fc1f 	bl	8000e6e <_close>
 8003630:	1c43      	adds	r3, r0, #1
 8003632:	d102      	bne.n	800363a <_close_r+0x1a>
 8003634:	682b      	ldr	r3, [r5, #0]
 8003636:	b103      	cbz	r3, 800363a <_close_r+0x1a>
 8003638:	6023      	str	r3, [r4, #0]
 800363a:	bd38      	pop	{r3, r4, r5, pc}
 800363c:	200002dc 	.word	0x200002dc

08003640 <_lseek_r>:
 8003640:	b538      	push	{r3, r4, r5, lr}
 8003642:	4d07      	ldr	r5, [pc, #28]	; (8003660 <_lseek_r+0x20>)
 8003644:	4604      	mov	r4, r0
 8003646:	4608      	mov	r0, r1
 8003648:	4611      	mov	r1, r2
 800364a:	2200      	movs	r2, #0
 800364c:	602a      	str	r2, [r5, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	f7fd fc34 	bl	8000ebc <_lseek>
 8003654:	1c43      	adds	r3, r0, #1
 8003656:	d102      	bne.n	800365e <_lseek_r+0x1e>
 8003658:	682b      	ldr	r3, [r5, #0]
 800365a:	b103      	cbz	r3, 800365e <_lseek_r+0x1e>
 800365c:	6023      	str	r3, [r4, #0]
 800365e:	bd38      	pop	{r3, r4, r5, pc}
 8003660:	200002dc 	.word	0x200002dc

08003664 <_read_r>:
 8003664:	b538      	push	{r3, r4, r5, lr}
 8003666:	4d07      	ldr	r5, [pc, #28]	; (8003684 <_read_r+0x20>)
 8003668:	4604      	mov	r4, r0
 800366a:	4608      	mov	r0, r1
 800366c:	4611      	mov	r1, r2
 800366e:	2200      	movs	r2, #0
 8003670:	602a      	str	r2, [r5, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	f7fd fbc2 	bl	8000dfc <_read>
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	d102      	bne.n	8003682 <_read_r+0x1e>
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	b103      	cbz	r3, 8003682 <_read_r+0x1e>
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	bd38      	pop	{r3, r4, r5, pc}
 8003684:	200002dc 	.word	0x200002dc

08003688 <_write_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	4d07      	ldr	r5, [pc, #28]	; (80036a8 <_write_r+0x20>)
 800368c:	4604      	mov	r4, r0
 800368e:	4608      	mov	r0, r1
 8003690:	4611      	mov	r1, r2
 8003692:	2200      	movs	r2, #0
 8003694:	602a      	str	r2, [r5, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	f7fd fbcd 	bl	8000e36 <_write>
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d102      	bne.n	80036a6 <_write_r+0x1e>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	b103      	cbz	r3, 80036a6 <_write_r+0x1e>
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	bd38      	pop	{r3, r4, r5, pc}
 80036a8:	200002dc 	.word	0x200002dc

080036ac <__errno>:
 80036ac:	4b01      	ldr	r3, [pc, #4]	; (80036b4 <__errno+0x8>)
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20000064 	.word	0x20000064

080036b8 <__libc_init_array>:
 80036b8:	b570      	push	{r4, r5, r6, lr}
 80036ba:	4d0d      	ldr	r5, [pc, #52]	; (80036f0 <__libc_init_array+0x38>)
 80036bc:	4c0d      	ldr	r4, [pc, #52]	; (80036f4 <__libc_init_array+0x3c>)
 80036be:	1b64      	subs	r4, r4, r5
 80036c0:	10a4      	asrs	r4, r4, #2
 80036c2:	2600      	movs	r6, #0
 80036c4:	42a6      	cmp	r6, r4
 80036c6:	d109      	bne.n	80036dc <__libc_init_array+0x24>
 80036c8:	4d0b      	ldr	r5, [pc, #44]	; (80036f8 <__libc_init_array+0x40>)
 80036ca:	4c0c      	ldr	r4, [pc, #48]	; (80036fc <__libc_init_array+0x44>)
 80036cc:	f000 fa98 	bl	8003c00 <_init>
 80036d0:	1b64      	subs	r4, r4, r5
 80036d2:	10a4      	asrs	r4, r4, #2
 80036d4:	2600      	movs	r6, #0
 80036d6:	42a6      	cmp	r6, r4
 80036d8:	d105      	bne.n	80036e6 <__libc_init_array+0x2e>
 80036da:	bd70      	pop	{r4, r5, r6, pc}
 80036dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e0:	4798      	blx	r3
 80036e2:	3601      	adds	r6, #1
 80036e4:	e7ee      	b.n	80036c4 <__libc_init_array+0xc>
 80036e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ea:	4798      	blx	r3
 80036ec:	3601      	adds	r6, #1
 80036ee:	e7f2      	b.n	80036d6 <__libc_init_array+0x1e>
 80036f0:	08003e3c 	.word	0x08003e3c
 80036f4:	08003e3c 	.word	0x08003e3c
 80036f8:	08003e3c 	.word	0x08003e3c
 80036fc:	08003e40 	.word	0x08003e40

08003700 <__retarget_lock_init_recursive>:
 8003700:	4770      	bx	lr

08003702 <__retarget_lock_acquire_recursive>:
 8003702:	4770      	bx	lr

08003704 <__retarget_lock_release_recursive>:
 8003704:	4770      	bx	lr

08003706 <memcpy>:
 8003706:	440a      	add	r2, r1
 8003708:	4291      	cmp	r1, r2
 800370a:	f100 33ff 	add.w	r3, r0, #4294967295
 800370e:	d100      	bne.n	8003712 <memcpy+0xc>
 8003710:	4770      	bx	lr
 8003712:	b510      	push	{r4, lr}
 8003714:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800371c:	4291      	cmp	r1, r2
 800371e:	d1f9      	bne.n	8003714 <memcpy+0xe>
 8003720:	bd10      	pop	{r4, pc}
	...

08003724 <_free_r>:
 8003724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003726:	2900      	cmp	r1, #0
 8003728:	d044      	beq.n	80037b4 <_free_r+0x90>
 800372a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800372e:	9001      	str	r0, [sp, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f1a1 0404 	sub.w	r4, r1, #4
 8003736:	bfb8      	it	lt
 8003738:	18e4      	addlt	r4, r4, r3
 800373a:	f000 f8df 	bl	80038fc <__malloc_lock>
 800373e:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <_free_r+0x94>)
 8003740:	9801      	ldr	r0, [sp, #4]
 8003742:	6813      	ldr	r3, [r2, #0]
 8003744:	b933      	cbnz	r3, 8003754 <_free_r+0x30>
 8003746:	6063      	str	r3, [r4, #4]
 8003748:	6014      	str	r4, [r2, #0]
 800374a:	b003      	add	sp, #12
 800374c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003750:	f000 b8da 	b.w	8003908 <__malloc_unlock>
 8003754:	42a3      	cmp	r3, r4
 8003756:	d908      	bls.n	800376a <_free_r+0x46>
 8003758:	6825      	ldr	r5, [r4, #0]
 800375a:	1961      	adds	r1, r4, r5
 800375c:	428b      	cmp	r3, r1
 800375e:	bf01      	itttt	eq
 8003760:	6819      	ldreq	r1, [r3, #0]
 8003762:	685b      	ldreq	r3, [r3, #4]
 8003764:	1949      	addeq	r1, r1, r5
 8003766:	6021      	streq	r1, [r4, #0]
 8003768:	e7ed      	b.n	8003746 <_free_r+0x22>
 800376a:	461a      	mov	r2, r3
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	b10b      	cbz	r3, 8003774 <_free_r+0x50>
 8003770:	42a3      	cmp	r3, r4
 8003772:	d9fa      	bls.n	800376a <_free_r+0x46>
 8003774:	6811      	ldr	r1, [r2, #0]
 8003776:	1855      	adds	r5, r2, r1
 8003778:	42a5      	cmp	r5, r4
 800377a:	d10b      	bne.n	8003794 <_free_r+0x70>
 800377c:	6824      	ldr	r4, [r4, #0]
 800377e:	4421      	add	r1, r4
 8003780:	1854      	adds	r4, r2, r1
 8003782:	42a3      	cmp	r3, r4
 8003784:	6011      	str	r1, [r2, #0]
 8003786:	d1e0      	bne.n	800374a <_free_r+0x26>
 8003788:	681c      	ldr	r4, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	6053      	str	r3, [r2, #4]
 800378e:	440c      	add	r4, r1
 8003790:	6014      	str	r4, [r2, #0]
 8003792:	e7da      	b.n	800374a <_free_r+0x26>
 8003794:	d902      	bls.n	800379c <_free_r+0x78>
 8003796:	230c      	movs	r3, #12
 8003798:	6003      	str	r3, [r0, #0]
 800379a:	e7d6      	b.n	800374a <_free_r+0x26>
 800379c:	6825      	ldr	r5, [r4, #0]
 800379e:	1961      	adds	r1, r4, r5
 80037a0:	428b      	cmp	r3, r1
 80037a2:	bf04      	itt	eq
 80037a4:	6819      	ldreq	r1, [r3, #0]
 80037a6:	685b      	ldreq	r3, [r3, #4]
 80037a8:	6063      	str	r3, [r4, #4]
 80037aa:	bf04      	itt	eq
 80037ac:	1949      	addeq	r1, r1, r5
 80037ae:	6021      	streq	r1, [r4, #0]
 80037b0:	6054      	str	r4, [r2, #4]
 80037b2:	e7ca      	b.n	800374a <_free_r+0x26>
 80037b4:	b003      	add	sp, #12
 80037b6:	bd30      	pop	{r4, r5, pc}
 80037b8:	200002e4 	.word	0x200002e4

080037bc <sbrk_aligned>:
 80037bc:	b570      	push	{r4, r5, r6, lr}
 80037be:	4e0e      	ldr	r6, [pc, #56]	; (80037f8 <sbrk_aligned+0x3c>)
 80037c0:	460c      	mov	r4, r1
 80037c2:	6831      	ldr	r1, [r6, #0]
 80037c4:	4605      	mov	r5, r0
 80037c6:	b911      	cbnz	r1, 80037ce <sbrk_aligned+0x12>
 80037c8:	f000 fa0a 	bl	8003be0 <_sbrk_r>
 80037cc:	6030      	str	r0, [r6, #0]
 80037ce:	4621      	mov	r1, r4
 80037d0:	4628      	mov	r0, r5
 80037d2:	f000 fa05 	bl	8003be0 <_sbrk_r>
 80037d6:	1c43      	adds	r3, r0, #1
 80037d8:	d00a      	beq.n	80037f0 <sbrk_aligned+0x34>
 80037da:	1cc4      	adds	r4, r0, #3
 80037dc:	f024 0403 	bic.w	r4, r4, #3
 80037e0:	42a0      	cmp	r0, r4
 80037e2:	d007      	beq.n	80037f4 <sbrk_aligned+0x38>
 80037e4:	1a21      	subs	r1, r4, r0
 80037e6:	4628      	mov	r0, r5
 80037e8:	f000 f9fa 	bl	8003be0 <_sbrk_r>
 80037ec:	3001      	adds	r0, #1
 80037ee:	d101      	bne.n	80037f4 <sbrk_aligned+0x38>
 80037f0:	f04f 34ff 	mov.w	r4, #4294967295
 80037f4:	4620      	mov	r0, r4
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	200002e8 	.word	0x200002e8

080037fc <_malloc_r>:
 80037fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003800:	1ccd      	adds	r5, r1, #3
 8003802:	f025 0503 	bic.w	r5, r5, #3
 8003806:	3508      	adds	r5, #8
 8003808:	2d0c      	cmp	r5, #12
 800380a:	bf38      	it	cc
 800380c:	250c      	movcc	r5, #12
 800380e:	2d00      	cmp	r5, #0
 8003810:	4607      	mov	r7, r0
 8003812:	db01      	blt.n	8003818 <_malloc_r+0x1c>
 8003814:	42a9      	cmp	r1, r5
 8003816:	d905      	bls.n	8003824 <_malloc_r+0x28>
 8003818:	230c      	movs	r3, #12
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	2600      	movs	r6, #0
 800381e:	4630      	mov	r0, r6
 8003820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003824:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80038f8 <_malloc_r+0xfc>
 8003828:	f000 f868 	bl	80038fc <__malloc_lock>
 800382c:	f8d8 3000 	ldr.w	r3, [r8]
 8003830:	461c      	mov	r4, r3
 8003832:	bb5c      	cbnz	r4, 800388c <_malloc_r+0x90>
 8003834:	4629      	mov	r1, r5
 8003836:	4638      	mov	r0, r7
 8003838:	f7ff ffc0 	bl	80037bc <sbrk_aligned>
 800383c:	1c43      	adds	r3, r0, #1
 800383e:	4604      	mov	r4, r0
 8003840:	d155      	bne.n	80038ee <_malloc_r+0xf2>
 8003842:	f8d8 4000 	ldr.w	r4, [r8]
 8003846:	4626      	mov	r6, r4
 8003848:	2e00      	cmp	r6, #0
 800384a:	d145      	bne.n	80038d8 <_malloc_r+0xdc>
 800384c:	2c00      	cmp	r4, #0
 800384e:	d048      	beq.n	80038e2 <_malloc_r+0xe6>
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	4631      	mov	r1, r6
 8003854:	4638      	mov	r0, r7
 8003856:	eb04 0903 	add.w	r9, r4, r3
 800385a:	f000 f9c1 	bl	8003be0 <_sbrk_r>
 800385e:	4581      	cmp	r9, r0
 8003860:	d13f      	bne.n	80038e2 <_malloc_r+0xe6>
 8003862:	6821      	ldr	r1, [r4, #0]
 8003864:	1a6d      	subs	r5, r5, r1
 8003866:	4629      	mov	r1, r5
 8003868:	4638      	mov	r0, r7
 800386a:	f7ff ffa7 	bl	80037bc <sbrk_aligned>
 800386e:	3001      	adds	r0, #1
 8003870:	d037      	beq.n	80038e2 <_malloc_r+0xe6>
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	442b      	add	r3, r5
 8003876:	6023      	str	r3, [r4, #0]
 8003878:	f8d8 3000 	ldr.w	r3, [r8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d038      	beq.n	80038f2 <_malloc_r+0xf6>
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	42a2      	cmp	r2, r4
 8003884:	d12b      	bne.n	80038de <_malloc_r+0xe2>
 8003886:	2200      	movs	r2, #0
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	e00f      	b.n	80038ac <_malloc_r+0xb0>
 800388c:	6822      	ldr	r2, [r4, #0]
 800388e:	1b52      	subs	r2, r2, r5
 8003890:	d41f      	bmi.n	80038d2 <_malloc_r+0xd6>
 8003892:	2a0b      	cmp	r2, #11
 8003894:	d917      	bls.n	80038c6 <_malloc_r+0xca>
 8003896:	1961      	adds	r1, r4, r5
 8003898:	42a3      	cmp	r3, r4
 800389a:	6025      	str	r5, [r4, #0]
 800389c:	bf18      	it	ne
 800389e:	6059      	strne	r1, [r3, #4]
 80038a0:	6863      	ldr	r3, [r4, #4]
 80038a2:	bf08      	it	eq
 80038a4:	f8c8 1000 	streq.w	r1, [r8]
 80038a8:	5162      	str	r2, [r4, r5]
 80038aa:	604b      	str	r3, [r1, #4]
 80038ac:	4638      	mov	r0, r7
 80038ae:	f104 060b 	add.w	r6, r4, #11
 80038b2:	f000 f829 	bl	8003908 <__malloc_unlock>
 80038b6:	f026 0607 	bic.w	r6, r6, #7
 80038ba:	1d23      	adds	r3, r4, #4
 80038bc:	1af2      	subs	r2, r6, r3
 80038be:	d0ae      	beq.n	800381e <_malloc_r+0x22>
 80038c0:	1b9b      	subs	r3, r3, r6
 80038c2:	50a3      	str	r3, [r4, r2]
 80038c4:	e7ab      	b.n	800381e <_malloc_r+0x22>
 80038c6:	42a3      	cmp	r3, r4
 80038c8:	6862      	ldr	r2, [r4, #4]
 80038ca:	d1dd      	bne.n	8003888 <_malloc_r+0x8c>
 80038cc:	f8c8 2000 	str.w	r2, [r8]
 80038d0:	e7ec      	b.n	80038ac <_malloc_r+0xb0>
 80038d2:	4623      	mov	r3, r4
 80038d4:	6864      	ldr	r4, [r4, #4]
 80038d6:	e7ac      	b.n	8003832 <_malloc_r+0x36>
 80038d8:	4634      	mov	r4, r6
 80038da:	6876      	ldr	r6, [r6, #4]
 80038dc:	e7b4      	b.n	8003848 <_malloc_r+0x4c>
 80038de:	4613      	mov	r3, r2
 80038e0:	e7cc      	b.n	800387c <_malloc_r+0x80>
 80038e2:	230c      	movs	r3, #12
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	4638      	mov	r0, r7
 80038e8:	f000 f80e 	bl	8003908 <__malloc_unlock>
 80038ec:	e797      	b.n	800381e <_malloc_r+0x22>
 80038ee:	6025      	str	r5, [r4, #0]
 80038f0:	e7dc      	b.n	80038ac <_malloc_r+0xb0>
 80038f2:	605b      	str	r3, [r3, #4]
 80038f4:	deff      	udf	#255	; 0xff
 80038f6:	bf00      	nop
 80038f8:	200002e4 	.word	0x200002e4

080038fc <__malloc_lock>:
 80038fc:	4801      	ldr	r0, [pc, #4]	; (8003904 <__malloc_lock+0x8>)
 80038fe:	f7ff bf00 	b.w	8003702 <__retarget_lock_acquire_recursive>
 8003902:	bf00      	nop
 8003904:	200002e0 	.word	0x200002e0

08003908 <__malloc_unlock>:
 8003908:	4801      	ldr	r0, [pc, #4]	; (8003910 <__malloc_unlock+0x8>)
 800390a:	f7ff befb 	b.w	8003704 <__retarget_lock_release_recursive>
 800390e:	bf00      	nop
 8003910:	200002e0 	.word	0x200002e0

08003914 <__sflush_r>:
 8003914:	898a      	ldrh	r2, [r1, #12]
 8003916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800391a:	4605      	mov	r5, r0
 800391c:	0710      	lsls	r0, r2, #28
 800391e:	460c      	mov	r4, r1
 8003920:	d458      	bmi.n	80039d4 <__sflush_r+0xc0>
 8003922:	684b      	ldr	r3, [r1, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	dc05      	bgt.n	8003934 <__sflush_r+0x20>
 8003928:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	dc02      	bgt.n	8003934 <__sflush_r+0x20>
 800392e:	2000      	movs	r0, #0
 8003930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003934:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003936:	2e00      	cmp	r6, #0
 8003938:	d0f9      	beq.n	800392e <__sflush_r+0x1a>
 800393a:	2300      	movs	r3, #0
 800393c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003940:	682f      	ldr	r7, [r5, #0]
 8003942:	6a21      	ldr	r1, [r4, #32]
 8003944:	602b      	str	r3, [r5, #0]
 8003946:	d032      	beq.n	80039ae <__sflush_r+0x9a>
 8003948:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	075a      	lsls	r2, r3, #29
 800394e:	d505      	bpl.n	800395c <__sflush_r+0x48>
 8003950:	6863      	ldr	r3, [r4, #4]
 8003952:	1ac0      	subs	r0, r0, r3
 8003954:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003956:	b10b      	cbz	r3, 800395c <__sflush_r+0x48>
 8003958:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800395a:	1ac0      	subs	r0, r0, r3
 800395c:	2300      	movs	r3, #0
 800395e:	4602      	mov	r2, r0
 8003960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003962:	6a21      	ldr	r1, [r4, #32]
 8003964:	4628      	mov	r0, r5
 8003966:	47b0      	blx	r6
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	89a3      	ldrh	r3, [r4, #12]
 800396c:	d106      	bne.n	800397c <__sflush_r+0x68>
 800396e:	6829      	ldr	r1, [r5, #0]
 8003970:	291d      	cmp	r1, #29
 8003972:	d82b      	bhi.n	80039cc <__sflush_r+0xb8>
 8003974:	4a29      	ldr	r2, [pc, #164]	; (8003a1c <__sflush_r+0x108>)
 8003976:	410a      	asrs	r2, r1
 8003978:	07d6      	lsls	r6, r2, #31
 800397a:	d427      	bmi.n	80039cc <__sflush_r+0xb8>
 800397c:	2200      	movs	r2, #0
 800397e:	6062      	str	r2, [r4, #4]
 8003980:	04d9      	lsls	r1, r3, #19
 8003982:	6922      	ldr	r2, [r4, #16]
 8003984:	6022      	str	r2, [r4, #0]
 8003986:	d504      	bpl.n	8003992 <__sflush_r+0x7e>
 8003988:	1c42      	adds	r2, r0, #1
 800398a:	d101      	bne.n	8003990 <__sflush_r+0x7c>
 800398c:	682b      	ldr	r3, [r5, #0]
 800398e:	b903      	cbnz	r3, 8003992 <__sflush_r+0x7e>
 8003990:	6560      	str	r0, [r4, #84]	; 0x54
 8003992:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003994:	602f      	str	r7, [r5, #0]
 8003996:	2900      	cmp	r1, #0
 8003998:	d0c9      	beq.n	800392e <__sflush_r+0x1a>
 800399a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800399e:	4299      	cmp	r1, r3
 80039a0:	d002      	beq.n	80039a8 <__sflush_r+0x94>
 80039a2:	4628      	mov	r0, r5
 80039a4:	f7ff febe 	bl	8003724 <_free_r>
 80039a8:	2000      	movs	r0, #0
 80039aa:	6360      	str	r0, [r4, #52]	; 0x34
 80039ac:	e7c0      	b.n	8003930 <__sflush_r+0x1c>
 80039ae:	2301      	movs	r3, #1
 80039b0:	4628      	mov	r0, r5
 80039b2:	47b0      	blx	r6
 80039b4:	1c41      	adds	r1, r0, #1
 80039b6:	d1c8      	bne.n	800394a <__sflush_r+0x36>
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0c5      	beq.n	800394a <__sflush_r+0x36>
 80039be:	2b1d      	cmp	r3, #29
 80039c0:	d001      	beq.n	80039c6 <__sflush_r+0xb2>
 80039c2:	2b16      	cmp	r3, #22
 80039c4:	d101      	bne.n	80039ca <__sflush_r+0xb6>
 80039c6:	602f      	str	r7, [r5, #0]
 80039c8:	e7b1      	b.n	800392e <__sflush_r+0x1a>
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d0:	81a3      	strh	r3, [r4, #12]
 80039d2:	e7ad      	b.n	8003930 <__sflush_r+0x1c>
 80039d4:	690f      	ldr	r7, [r1, #16]
 80039d6:	2f00      	cmp	r7, #0
 80039d8:	d0a9      	beq.n	800392e <__sflush_r+0x1a>
 80039da:	0793      	lsls	r3, r2, #30
 80039dc:	680e      	ldr	r6, [r1, #0]
 80039de:	bf08      	it	eq
 80039e0:	694b      	ldreq	r3, [r1, #20]
 80039e2:	600f      	str	r7, [r1, #0]
 80039e4:	bf18      	it	ne
 80039e6:	2300      	movne	r3, #0
 80039e8:	eba6 0807 	sub.w	r8, r6, r7
 80039ec:	608b      	str	r3, [r1, #8]
 80039ee:	f1b8 0f00 	cmp.w	r8, #0
 80039f2:	dd9c      	ble.n	800392e <__sflush_r+0x1a>
 80039f4:	6a21      	ldr	r1, [r4, #32]
 80039f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039f8:	4643      	mov	r3, r8
 80039fa:	463a      	mov	r2, r7
 80039fc:	4628      	mov	r0, r5
 80039fe:	47b0      	blx	r6
 8003a00:	2800      	cmp	r0, #0
 8003a02:	dc06      	bgt.n	8003a12 <__sflush_r+0xfe>
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a0a:	81a3      	strh	r3, [r4, #12]
 8003a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a10:	e78e      	b.n	8003930 <__sflush_r+0x1c>
 8003a12:	4407      	add	r7, r0
 8003a14:	eba8 0800 	sub.w	r8, r8, r0
 8003a18:	e7e9      	b.n	80039ee <__sflush_r+0xda>
 8003a1a:	bf00      	nop
 8003a1c:	dfbffffe 	.word	0xdfbffffe

08003a20 <_fflush_r>:
 8003a20:	b538      	push	{r3, r4, r5, lr}
 8003a22:	690b      	ldr	r3, [r1, #16]
 8003a24:	4605      	mov	r5, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	b913      	cbnz	r3, 8003a30 <_fflush_r+0x10>
 8003a2a:	2500      	movs	r5, #0
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	b118      	cbz	r0, 8003a3a <_fflush_r+0x1a>
 8003a32:	6a03      	ldr	r3, [r0, #32]
 8003a34:	b90b      	cbnz	r3, 8003a3a <_fflush_r+0x1a>
 8003a36:	f7ff fc79 	bl	800332c <__sinit>
 8003a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f3      	beq.n	8003a2a <_fflush_r+0xa>
 8003a42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a44:	07d0      	lsls	r0, r2, #31
 8003a46:	d404      	bmi.n	8003a52 <_fflush_r+0x32>
 8003a48:	0599      	lsls	r1, r3, #22
 8003a4a:	d402      	bmi.n	8003a52 <_fflush_r+0x32>
 8003a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a4e:	f7ff fe58 	bl	8003702 <__retarget_lock_acquire_recursive>
 8003a52:	4628      	mov	r0, r5
 8003a54:	4621      	mov	r1, r4
 8003a56:	f7ff ff5d 	bl	8003914 <__sflush_r>
 8003a5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a5c:	07da      	lsls	r2, r3, #31
 8003a5e:	4605      	mov	r5, r0
 8003a60:	d4e4      	bmi.n	8003a2c <_fflush_r+0xc>
 8003a62:	89a3      	ldrh	r3, [r4, #12]
 8003a64:	059b      	lsls	r3, r3, #22
 8003a66:	d4e1      	bmi.n	8003a2c <_fflush_r+0xc>
 8003a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a6a:	f7ff fe4b 	bl	8003704 <__retarget_lock_release_recursive>
 8003a6e:	e7dd      	b.n	8003a2c <_fflush_r+0xc>

08003a70 <__swhatbuf_r>:
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	460c      	mov	r4, r1
 8003a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a78:	2900      	cmp	r1, #0
 8003a7a:	b096      	sub	sp, #88	; 0x58
 8003a7c:	4615      	mov	r5, r2
 8003a7e:	461e      	mov	r6, r3
 8003a80:	da0d      	bge.n	8003a9e <__swhatbuf_r+0x2e>
 8003a82:	89a3      	ldrh	r3, [r4, #12]
 8003a84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	bf0c      	ite	eq
 8003a8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003a92:	2340      	movne	r3, #64	; 0x40
 8003a94:	2000      	movs	r0, #0
 8003a96:	6031      	str	r1, [r6, #0]
 8003a98:	602b      	str	r3, [r5, #0]
 8003a9a:	b016      	add	sp, #88	; 0x58
 8003a9c:	bd70      	pop	{r4, r5, r6, pc}
 8003a9e:	466a      	mov	r2, sp
 8003aa0:	f000 f87c 	bl	8003b9c <_fstat_r>
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	dbec      	blt.n	8003a82 <__swhatbuf_r+0x12>
 8003aa8:	9901      	ldr	r1, [sp, #4]
 8003aaa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003aae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003ab2:	4259      	negs	r1, r3
 8003ab4:	4159      	adcs	r1, r3
 8003ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aba:	e7eb      	b.n	8003a94 <__swhatbuf_r+0x24>

08003abc <__smakebuf_r>:
 8003abc:	898b      	ldrh	r3, [r1, #12]
 8003abe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ac0:	079d      	lsls	r5, r3, #30
 8003ac2:	4606      	mov	r6, r0
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	d507      	bpl.n	8003ad8 <__smakebuf_r+0x1c>
 8003ac8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	6123      	str	r3, [r4, #16]
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	6163      	str	r3, [r4, #20]
 8003ad4:	b002      	add	sp, #8
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
 8003ad8:	ab01      	add	r3, sp, #4
 8003ada:	466a      	mov	r2, sp
 8003adc:	f7ff ffc8 	bl	8003a70 <__swhatbuf_r>
 8003ae0:	9900      	ldr	r1, [sp, #0]
 8003ae2:	4605      	mov	r5, r0
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	f7ff fe89 	bl	80037fc <_malloc_r>
 8003aea:	b948      	cbnz	r0, 8003b00 <__smakebuf_r+0x44>
 8003aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003af0:	059a      	lsls	r2, r3, #22
 8003af2:	d4ef      	bmi.n	8003ad4 <__smakebuf_r+0x18>
 8003af4:	f023 0303 	bic.w	r3, r3, #3
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	81a3      	strh	r3, [r4, #12]
 8003afe:	e7e3      	b.n	8003ac8 <__smakebuf_r+0xc>
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	6020      	str	r0, [r4, #0]
 8003b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b08:	81a3      	strh	r3, [r4, #12]
 8003b0a:	9b00      	ldr	r3, [sp, #0]
 8003b0c:	6163      	str	r3, [r4, #20]
 8003b0e:	9b01      	ldr	r3, [sp, #4]
 8003b10:	6120      	str	r0, [r4, #16]
 8003b12:	b15b      	cbz	r3, 8003b2c <__smakebuf_r+0x70>
 8003b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f000 f851 	bl	8003bc0 <_isatty_r>
 8003b1e:	b128      	cbz	r0, 8003b2c <__smakebuf_r+0x70>
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	81a3      	strh	r3, [r4, #12]
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	431d      	orrs	r5, r3
 8003b30:	81a5      	strh	r5, [r4, #12]
 8003b32:	e7cf      	b.n	8003ad4 <__smakebuf_r+0x18>

08003b34 <_putc_r>:
 8003b34:	b570      	push	{r4, r5, r6, lr}
 8003b36:	460d      	mov	r5, r1
 8003b38:	4614      	mov	r4, r2
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	b118      	cbz	r0, 8003b46 <_putc_r+0x12>
 8003b3e:	6a03      	ldr	r3, [r0, #32]
 8003b40:	b90b      	cbnz	r3, 8003b46 <_putc_r+0x12>
 8003b42:	f7ff fbf3 	bl	800332c <__sinit>
 8003b46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b48:	07d8      	lsls	r0, r3, #31
 8003b4a:	d405      	bmi.n	8003b58 <_putc_r+0x24>
 8003b4c:	89a3      	ldrh	r3, [r4, #12]
 8003b4e:	0599      	lsls	r1, r3, #22
 8003b50:	d402      	bmi.n	8003b58 <_putc_r+0x24>
 8003b52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b54:	f7ff fdd5 	bl	8003702 <__retarget_lock_acquire_recursive>
 8003b58:	68a3      	ldr	r3, [r4, #8]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	60a3      	str	r3, [r4, #8]
 8003b60:	da05      	bge.n	8003b6e <_putc_r+0x3a>
 8003b62:	69a2      	ldr	r2, [r4, #24]
 8003b64:	4293      	cmp	r3, r2
 8003b66:	db12      	blt.n	8003b8e <_putc_r+0x5a>
 8003b68:	b2eb      	uxtb	r3, r5
 8003b6a:	2b0a      	cmp	r3, #10
 8003b6c:	d00f      	beq.n	8003b8e <_putc_r+0x5a>
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	6022      	str	r2, [r4, #0]
 8003b74:	701d      	strb	r5, [r3, #0]
 8003b76:	b2ed      	uxtb	r5, r5
 8003b78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b7a:	07da      	lsls	r2, r3, #31
 8003b7c:	d405      	bmi.n	8003b8a <_putc_r+0x56>
 8003b7e:	89a3      	ldrh	r3, [r4, #12]
 8003b80:	059b      	lsls	r3, r3, #22
 8003b82:	d402      	bmi.n	8003b8a <_putc_r+0x56>
 8003b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b86:	f7ff fdbd 	bl	8003704 <__retarget_lock_release_recursive>
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	bd70      	pop	{r4, r5, r6, pc}
 8003b8e:	4629      	mov	r1, r5
 8003b90:	4622      	mov	r2, r4
 8003b92:	4630      	mov	r0, r6
 8003b94:	f7ff fca7 	bl	80034e6 <__swbuf_r>
 8003b98:	4605      	mov	r5, r0
 8003b9a:	e7ed      	b.n	8003b78 <_putc_r+0x44>

08003b9c <_fstat_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4d07      	ldr	r5, [pc, #28]	; (8003bbc <_fstat_r+0x20>)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	f7fd f96c 	bl	8000e86 <_fstat>
 8003bae:	1c43      	adds	r3, r0, #1
 8003bb0:	d102      	bne.n	8003bb8 <_fstat_r+0x1c>
 8003bb2:	682b      	ldr	r3, [r5, #0]
 8003bb4:	b103      	cbz	r3, 8003bb8 <_fstat_r+0x1c>
 8003bb6:	6023      	str	r3, [r4, #0]
 8003bb8:	bd38      	pop	{r3, r4, r5, pc}
 8003bba:	bf00      	nop
 8003bbc:	200002dc 	.word	0x200002dc

08003bc0 <_isatty_r>:
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	4d06      	ldr	r5, [pc, #24]	; (8003bdc <_isatty_r+0x1c>)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	4608      	mov	r0, r1
 8003bca:	602b      	str	r3, [r5, #0]
 8003bcc:	f7fd f96b 	bl	8000ea6 <_isatty>
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	d102      	bne.n	8003bda <_isatty_r+0x1a>
 8003bd4:	682b      	ldr	r3, [r5, #0]
 8003bd6:	b103      	cbz	r3, 8003bda <_isatty_r+0x1a>
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	bd38      	pop	{r3, r4, r5, pc}
 8003bdc:	200002dc 	.word	0x200002dc

08003be0 <_sbrk_r>:
 8003be0:	b538      	push	{r3, r4, r5, lr}
 8003be2:	4d06      	ldr	r5, [pc, #24]	; (8003bfc <_sbrk_r+0x1c>)
 8003be4:	2300      	movs	r3, #0
 8003be6:	4604      	mov	r4, r0
 8003be8:	4608      	mov	r0, r1
 8003bea:	602b      	str	r3, [r5, #0]
 8003bec:	f7fd f974 	bl	8000ed8 <_sbrk>
 8003bf0:	1c43      	adds	r3, r0, #1
 8003bf2:	d102      	bne.n	8003bfa <_sbrk_r+0x1a>
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	b103      	cbz	r3, 8003bfa <_sbrk_r+0x1a>
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}
 8003bfc:	200002dc 	.word	0x200002dc

08003c00 <_init>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	bf00      	nop
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr

08003c0c <_fini>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	bf00      	nop
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr
