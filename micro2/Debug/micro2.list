
micro2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000363c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b8  080039b8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080039b8  080039b8  000139b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039c0  080039c0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039c0  080039c0  000139c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039c4  080039c4  000139c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080039c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000068  08003a30  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08003a30  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000986f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019d4  00000000  00000000  0002994a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0002b320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000674  00000000  00000000  0002bb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230e7  00000000  00000000  0002c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b36c  00000000  00000000  0004f2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6b91  00000000  00000000  0005a65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028b0  00000000  00000000  001311f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ad  00000000  00000000  00133aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080037e8 	.word	0x080037e8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	080037e8 	.word	0x080037e8

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char mess[1]="";
 800051a:	2300      	movs	r3, #0
 800051c:	703b      	strb	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fc83 	bl	8000e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f961 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 fa49 	bl	80009bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052a:	f000 fa1d 	bl	8000968 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 800052e:	f000 f9c9 	bl	80008c4 <MX_ADC3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
      {
	  HAL_ADC_Start(&hadc3);
 8000532:	481b      	ldr	r0, [pc, #108]	; (80005a0 <main+0x8c>)
 8000534:	f000 fd2e 	bl	8000f94 <HAL_ADC_Start>
          /* Check for sound signal */
          if (isSoundSignalDetected()) {
 8000538:	f000 f838 	bl	80005ac <isSoundSignalDetected>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d0f7      	beq.n	8000532 <main+0x1e>

              //HAL_UART_Transmit(&huart2, (uint8_t *) "bonjour2", 8, 20);
              /* Record start time of signal */
              uint32_t startTime = HAL_GetTick();
 8000542:	f000 fcd7 	bl	8000ef4 <HAL_GetTick>
 8000546:	60f8      	str	r0, [r7, #12]

              /* Wait for sound signal to end */
              while (isSoundSignalInProgress()) {
 8000548:	bf00      	nop
 800054a:	f000 f845 	bl	80005d8 <isSoundSignalInProgress>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1fa      	bne.n	800054a <main+0x36>
                  // Check if sound signal ended
              }

              /* Record end time of signal */
              uint32_t endTime = HAL_GetTick();
 8000554:	f000 fcce 	bl	8000ef4 <HAL_GetTick>
 8000558:	60b8      	str	r0, [r7, #8]

              /* Calculate duration of signal */
              uint32_t duration = endTime - startTime;
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	607b      	str	r3, [r7, #4]

              /* Decode duration into Morse code */
              if (duration < DOT_THRESHOLD) {
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b63      	cmp	r3, #99	; 0x63
 8000566:	d802      	bhi.n	800056e <main+0x5a>
            	  mess[0] = '.';
 8000568:	232e      	movs	r3, #46	; 0x2e
 800056a:	703b      	strb	r3, [r7, #0]
 800056c:	e00c      	b.n	8000588 <main+0x74>
              } else if (duration < DASH_THRESHOLD) {
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000574:	d202      	bcs.n	800057c <main+0x68>
            	  mess[0] = '-';
 8000576:	232d      	movs	r3, #45	; 0x2d
 8000578:	703b      	strb	r3, [r7, #0]
 800057a:	e005      	b.n	8000588 <main+0x74>
              } else if (duration < PAUSE_THRESHOLD) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000582:	d201      	bcs.n	8000588 <main+0x74>
            	  mess[0] = ' ';
 8000584:	2320      	movs	r3, #32
 8000586:	703b      	strb	r3, [r7, #0]
              }

              /* Decode Morse code message */
              decodeMorse(rx_buffer, 1);
 8000588:	2101      	movs	r1, #1
 800058a:	4806      	ldr	r0, [pc, #24]	; (80005a4 <main+0x90>)
 800058c:	f000 f840 	bl	8000610 <decodeMorse>

              /* Echo received data back */
              HAL_UART_Transmit(&huart2, rx_buffer, 1, HAL_MAX_DELAY);
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	2201      	movs	r2, #1
 8000596:	4903      	ldr	r1, [pc, #12]	; (80005a4 <main+0x90>)
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <main+0x94>)
 800059a:	f002 f8bb 	bl	8002714 <HAL_UART_Transmit>
	  HAL_ADC_Start(&hadc3);
 800059e:	e7c8      	b.n	8000532 <main+0x1e>
 80005a0:	200000e8 	.word	0x200000e8
 80005a4:	20000084 	.word	0x20000084
 80005a8:	20000130 	.word	0x20000130

080005ac <isSoundSignalDetected>:
          }
      }
  }

  /* Function to detect the presence of a sound signal */
  uint8_t isSoundSignalDetected() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
      // Read the analog input from the sound sensor using the ADC
      uint16_t adc_value = HAL_ADC_GetValue(&hadc3); // Example ADC reading
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <isSoundSignalDetected+0x28>)
 80005b4:	f000 fdc0 	bl	8001138 <HAL_ADC_GetValue>
 80005b8:	4603      	mov	r3, r0
 80005ba:	80fb      	strh	r3, [r7, #6]

      // Analyze the ADC value to determine if a sound signal is detected
      if (adc_value > THRESHOLD) {
 80005bc:	88fb      	ldrh	r3, [r7, #6]
 80005be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005c2:	d901      	bls.n	80005c8 <isSoundSignalDetected+0x1c>
          return 1; // Sound signal detected
 80005c4:	2301      	movs	r3, #1
 80005c6:	e000      	b.n	80005ca <isSoundSignalDetected+0x1e>
      } else {
          return 0; // No sound signal detected
 80005c8:	2300      	movs	r3, #0
      }
  }
 80005ca:	4618      	mov	r0, r3
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000e8 	.word	0x200000e8

080005d8 <isSoundSignalInProgress>:

  /* Function to check if the sound signal is still in progress */
  uint8_t isSoundSignalInProgress() {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
      // While the sound signal is detected, continuously sample the analog input
      while (isSoundSignalDetected()) {
 80005de:	e00a      	b.n	80005f6 <isSoundSignalInProgress+0x1e>
          // Read the analog input from the sound sensor using the ADC
          uint16_t adc_value = HAL_ADC_GetValue(&hadc3); // Example ADC reading
 80005e0:	480a      	ldr	r0, [pc, #40]	; (800060c <isSoundSignalInProgress+0x34>)
 80005e2:	f000 fda9 	bl	8001138 <HAL_ADC_GetValue>
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]

          // Analyze the ADC value to determine if the sound signal is still in progress
          if (adc_value > THRESHOLD) {
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005f0:	d801      	bhi.n	80005f6 <isSoundSignalInProgress+0x1e>
              // Sound signal is still in progress
              // You might want to add a delay here to control the sampling rate
          } else {
              return 0; // Sound signal ended
 80005f2:	2300      	movs	r3, #0
 80005f4:	e005      	b.n	8000602 <isSoundSignalInProgress+0x2a>
      while (isSoundSignalDetected()) {
 80005f6:	f7ff ffd9 	bl	80005ac <isSoundSignalDetected>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1ef      	bne.n	80005e0 <isSoundSignalInProgress+0x8>
          }
      }

      return 0; // Sound signal ended
 8000600:	2300      	movs	r3, #0
  }
 8000602:	4618      	mov	r0, r3
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000e8 	.word	0x200000e8

08000610 <decodeMorse>:


  void decodeMorse(char* message, int length) {
 8000610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000614:	b0b6      	sub	sp, #216	; 0xd8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
 800061a:	6039      	str	r1, [r7, #0]
      // Define the Morse code alphabet
      char* morseAlphabet[] = {".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..",
 800061c:	4a67      	ldr	r2, [pc, #412]	; (80007bc <decodeMorse+0x1ac>)
 800061e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000622:	4611      	mov	r1, r2
 8000624:	2290      	movs	r2, #144	; 0x90
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fdcb 	bl	80031c2 <memcpy>
                                ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..",
                                "-----", ".----", "..---", "...--", "....-", ".....", "-....",
                                "--...", "---..", "----."};

      // Define the corresponding characters for each Morse code
      char alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
 800062c:	4b64      	ldr	r3, [pc, #400]	; (80007c0 <decodeMorse+0x1b0>)
 800062e:	f107 040c 	add.w	r4, r7, #12
 8000632:	461d      	mov	r5, r3
 8000634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000640:	6020      	str	r0, [r4, #0]
 8000642:	3404      	adds	r4, #4
 8000644:	7021      	strb	r1, [r4, #0]

      // Loop through the message
      for (int i = 0; i < length; i++) {
 8000646:	2300      	movs	r3, #0
 8000648:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800064c:	e0a8      	b.n	80007a0 <decodeMorse+0x190>
          // If the current character is a dot, dash, or space, process it
          if (message[i] == '.' || message[i] == '-') {
 800064e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b2e      	cmp	r3, #46	; 0x2e
 800065a:	d007      	beq.n	800066c <decodeMorse+0x5c>
 800065c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4413      	add	r3, r2
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b2d      	cmp	r3, #45	; 0x2d
 8000668:	f040 808b 	bne.w	8000782 <decodeMorse+0x172>
 800066c:	466b      	mov	r3, sp
 800066e:	461c      	mov	r4, r3
              int j = i + 1;
 8000670:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000674:	3301      	adds	r3, #1
 8000676:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
              // Find the end of the current Morse code character
              while (j < length && message[j] != ' ') {
 800067a:	e004      	b.n	8000686 <decodeMorse+0x76>
                  j++;
 800067c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000680:	3301      	adds	r3, #1
 8000682:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
              while (j < length && message[j] != ' ') {
 8000686:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	da06      	bge.n	800069e <decodeMorse+0x8e>
 8000690:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	4413      	add	r3, r2
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b20      	cmp	r3, #32
 800069c:	d1ee      	bne.n	800067c <decodeMorse+0x6c>
              }
              // Extract the Morse code character
              char morseChar[j - i + 1];
 800069e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80006a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	1c59      	adds	r1, r3, #1
 80006aa:	1e4b      	subs	r3, r1, #1
 80006ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80006b0:	460a      	mov	r2, r1
 80006b2:	2300      	movs	r3, #0
 80006b4:	4690      	mov	r8, r2
 80006b6:	4699      	mov	r9, r3
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	f04f 0300 	mov.w	r3, #0
 80006c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80006c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006cc:	460a      	mov	r2, r1
 80006ce:	2300      	movs	r3, #0
 80006d0:	4692      	mov	sl, r2
 80006d2:	469b      	mov	fp, r3
 80006d4:	f04f 0200 	mov.w	r2, #0
 80006d8:	f04f 0300 	mov.w	r3, #0
 80006dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80006e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80006e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80006e8:	460b      	mov	r3, r1
 80006ea:	3307      	adds	r3, #7
 80006ec:	08db      	lsrs	r3, r3, #3
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	ebad 0d03 	sub.w	sp, sp, r3
 80006f4:	466b      	mov	r3, sp
 80006f6:	3300      	adds	r3, #0
 80006f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
              strncpy(morseChar, &message[i], j - i);
 80006fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	18d1      	adds	r1, r2, r3
 8000704:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000708:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	461a      	mov	r2, r3
 8000710:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000714:	f002 fccf 	bl	80030b6 <strncpy>
              morseChar[j - i] = '\0';
 8000718:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800071c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000726:	2100      	movs	r1, #0
 8000728:	54d1      	strb	r1, [r2, r3]

              // Decode the Morse code character
              for (int k = 0; k < 36; k++) {
 800072a:	2300      	movs	r3, #0
 800072c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000730:	e01d      	b.n	800076e <decodeMorse+0x15e>
                  if (strcmp(morseChar, morseAlphabet[k]) == 0) {
 8000732:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	33d8      	adds	r3, #216	; 0xd8
 800073a:	443b      	add	r3, r7
 800073c:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8000740:	4619      	mov	r1, r3
 8000742:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000746:	f7ff fd5d 	bl	8000204 <strcmp>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d109      	bne.n	8000764 <decodeMorse+0x154>
                      // Print or store the decoded character
                      printf("%c", alphabet[k]);
 8000750:	f107 020c 	add.w	r2, r7, #12
 8000754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f002 fc57 	bl	8003010 <putchar>
                      break;
 8000762:	e008      	b.n	8000776 <decodeMorse+0x166>
              for (int k = 0; k < 36; k++) {
 8000764:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000768:	3301      	adds	r3, #1
 800076a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800076e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000772:	2b23      	cmp	r3, #35	; 0x23
 8000774:	dddd      	ble.n	8000732 <decodeMorse+0x122>
                  }
              }
              i = j; // Move the index to the next character
 8000776:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800077a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800077e:	46a5      	mov	sp, r4
          if (message[i] == '.' || message[i] == '-') {
 8000780:	e009      	b.n	8000796 <decodeMorse+0x186>
          } else if (message[i] == ' ') {
 8000782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b20      	cmp	r3, #32
 800078e:	d102      	bne.n	8000796 <decodeMorse+0x186>
              // Print or store a space between words
              printf(" ");
 8000790:	2020      	movs	r0, #32
 8000792:	f002 fc3d 	bl	8003010 <putchar>
      for (int i = 0; i < length; i++) {
 8000796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800079a:	3301      	adds	r3, #1
 800079c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80007a0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	f6ff af51 	blt.w	800064e <decodeMorse+0x3e>
          }
      }
      printf("\n"); // Print a newline at the end of the message
 80007ac:	200a      	movs	r0, #10
 80007ae:	f002 fc2f 	bl	8003010 <putchar>
  }
 80007b2:	bf00      	nop
 80007b4:	37d8      	adds	r7, #216	; 0xd8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80007bc:	080038e8 	.word	0x080038e8
 80007c0:	08003978 	.word	0x08003978

080007c4 <__io_putchar>:


  PUTCHAR_PROTOTYPE
  {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of
  transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80007cc:	1d39      	adds	r1, r7, #4
 80007ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007d2:	2201      	movs	r2, #1
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <__io_putchar+0x20>)
 80007d6:	f001 ff9d 	bl	8002714 <HAL_UART_Transmit>
  return ch;
 80007da:	687b      	ldr	r3, [r7, #4]
  }
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000130 	.word	0x20000130

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	; 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2234      	movs	r2, #52	; 0x34
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fc55 	bl	80030a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <SystemClock_Config+0xd4>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	4a29      	ldr	r2, [pc, #164]	; (80008bc <SystemClock_Config+0xd4>)
 8000816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081a:	6413      	str	r3, [r2, #64]	; 0x40
 800081c:	4b27      	ldr	r3, [pc, #156]	; (80008bc <SystemClock_Config+0xd4>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000828:	2300      	movs	r3, #0
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <SystemClock_Config+0xd8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000834:	4a22      	ldr	r2, [pc, #136]	; (80008c0 <SystemClock_Config+0xd8>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <SystemClock_Config+0xd8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000848:	2302      	movs	r3, #2
 800084a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084c:	2301      	movs	r3, #1
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000850:	2310      	movs	r3, #16
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000854:	2302      	movs	r3, #2
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000858:	2300      	movs	r3, #0
 800085a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800085c:	2310      	movs	r3, #16
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000860:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000864:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000866:	2304      	movs	r3, #4
 8000868:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4618      	mov	r0, r3
 8000878:	f001 fc5e 	bl	8002138 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000882:	f000 f90d 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	2102      	movs	r1, #2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 f8fe 	bl	8001aa4 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008ae:	f000 f8f7 	bl	8000aa0 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3750      	adds	r7, #80	; 0x50
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ca:	463b      	mov	r3, r7
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_ADC3_Init+0x98>)
 80008d8:	4a21      	ldr	r2, [pc, #132]	; (8000960 <MX_ADC3_Init+0x9c>)
 80008da:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_ADC3_Init+0x98>)
 80008de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008e2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_ADC3_Init+0x98>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_ADC3_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_ADC3_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_ADC3_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_ADC3_Init+0x98>)
 8000900:	2200      	movs	r2, #0
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_ADC3_Init+0x98>)
 8000906:	4a17      	ldr	r2, [pc, #92]	; (8000964 <MX_ADC3_Init+0xa0>)
 8000908:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_ADC3_Init+0x98>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_ADC3_Init+0x98>)
 8000912:	2201      	movs	r2, #1
 8000914:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_ADC3_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_ADC3_Init+0x98>)
 8000920:	2201      	movs	r2, #1
 8000922:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_ADC3_Init+0x98>)
 8000926:	f000 faf1 	bl	8000f0c <HAL_ADC_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000930:	f000 f8b6 	bl	8000aa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000934:	2300      	movs	r3, #0
 8000936:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000938:	2301      	movs	r3, #1
 800093a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_ADC3_Init+0x98>)
 8000946:	f000 fc05 	bl	8001154 <HAL_ADC_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000950:	f000 f8a6 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200000e8 	.word	0x200000e8
 8000960:	40012200 	.word	0x40012200
 8000964:	0f000001 	.word	0x0f000001

08000968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <MX_USART2_UART_Init+0x50>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f001 fe68 	bl	8002674 <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009aa:	f000 f879 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000130 	.word	0x20000130
 80009b8:	40004400 	.word	0x40004400

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <MX_GPIO_Init+0xd8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a2e      	ldr	r2, [pc, #184]	; (8000a94 <MX_GPIO_Init+0xd8>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_GPIO_Init+0xd8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <MX_GPIO_Init+0xd8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a27      	ldr	r2, [pc, #156]	; (8000a94 <MX_GPIO_Init+0xd8>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_GPIO_Init+0xd8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_GPIO_Init+0xd8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <MX_GPIO_Init+0xd8>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_GPIO_Init+0xd8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_GPIO_Init+0xd8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <MX_GPIO_Init+0xd8>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_GPIO_Init+0xd8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4810      	ldr	r0, [pc, #64]	; (8000a98 <MX_GPIO_Init+0xdc>)
 8000a58:	f000 fe90 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a60:	2303      	movs	r3, #3
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480b      	ldr	r0, [pc, #44]	; (8000a9c <MX_GPIO_Init+0xe0>)
 8000a70:	f000 fe84 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a74:	2320      	movs	r3, #32
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_GPIO_Init+0xe0>)
 8000a88:	f000 fe78 	bl	800177c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <HAL_MspInit+0x4c>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aea:	2007      	movs	r0, #7
 8000aec:	f000 fe12 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x7c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d127      	bne.n	8000b6e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0-WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b56:	2301      	movs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_ADC_MspInit+0x84>)
 8000b6a:	f000 fe07 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40012200 	.word	0x40012200
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <HAL_UART_MspInit+0x84>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d12b      	bne.n	8000bfe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bde:	230c      	movs	r3, #12
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <HAL_UART_MspInit+0x8c>)
 8000bfa:	f000 fdbf 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	; 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	e7fe      	b.n	8000c18 <NMI_Handler+0x4>

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 f934 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	e00a      	b.n	8000c90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c7a:	f3af 8000 	nop.w
 8000c7e:	4601      	mov	r1, r0
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	60ba      	str	r2, [r7, #8]
 8000c86:	b2ca      	uxtb	r2, r1
 8000c88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	dbf0      	blt.n	8000c7a <_read+0x12>
  }

  return len;
 8000c98:	687b      	ldr	r3, [r7, #4]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	e009      	b.n	8000cc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	60ba      	str	r2, [r7, #8]
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fd81 	bl	80007c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbf1      	blt.n	8000cb4 <_write+0x12>
  }
  return len;
 8000cd0:	687b      	ldr	r3, [r7, #4]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <_close>:

int _close(int file)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d02:	605a      	str	r2, [r3, #4]
  return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <_isatty>:

int _isatty(int file)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d4c:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <_sbrk+0x5c>)
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <_sbrk+0x60>)
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <_sbrk+0x64>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	; (8000dac <_sbrk+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d207      	bcs.n	8000d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d74:	f002 f9f8 	bl	8003168 <__errno>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	e009      	b.n	8000d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <_sbrk+0x64>)
 8000d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20020000 	.word	0x20020000
 8000da4:	00000400 	.word	0x00000400
 8000da8:	20000178 	.word	0x20000178
 8000dac:	200002d0 	.word	0x200002d0

08000db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <SystemInit+0x20>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <SystemInit+0x20>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dd8:	f7ff ffea 	bl	8000db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ddc:	480c      	ldr	r0, [pc, #48]	; (8000e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dde:	490d      	ldr	r1, [pc, #52]	; (8000e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df4:	4c0a      	ldr	r4, [pc, #40]	; (8000e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e02:	f002 f9b7 	bl	8003174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e06:	f7ff fb85 	bl	8000514 <main>
  bx  lr    
 8000e0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e18:	080039c8 	.word	0x080039c8
  ldr r2, =_sbss
 8000e1c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e20:	200002cc 	.word	0x200002cc

08000e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC_IRQHandler>
	...

08000e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <HAL_Init+0x40>)
 8000e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <HAL_Init+0x40>)
 8000e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_Init+0x40>)
 8000e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 fc5f 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 f808 	bl	8000e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5c:	f7ff fe26 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023c00 	.word	0x40023c00

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x54>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x58>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fc69 	bl	8001762 <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 fc3f 	bl	800172a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_InitTick+0x5c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	2000017c 	.word	0x2000017c

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	2000017c 	.word	0x2000017c

08000f0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e033      	b.n	8000f8a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d109      	bne.n	8000f3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fde6 	bl	8000afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d118      	bne.n	8000f7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f52:	f023 0302 	bic.w	r3, r3, #2
 8000f56:	f043 0202 	orr.w	r2, r3, #2
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 fa2a 	bl	80013b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f023 0303 	bic.w	r3, r3, #3
 8000f72:	f043 0201 	orr.w	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	641a      	str	r2, [r3, #64]	; 0x40
 8000f7a:	e001      	b.n	8000f80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d101      	bne.n	8000fae <HAL_ADC_Start+0x1a>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e0b2      	b.n	8001114 <HAL_ADC_Start+0x180>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d018      	beq.n	8000ff6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fd4:	4b52      	ldr	r3, [pc, #328]	; (8001120 <HAL_ADC_Start+0x18c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a52      	ldr	r2, [pc, #328]	; (8001124 <HAL_ADC_Start+0x190>)
 8000fda:	fba2 2303 	umull	r2, r3, r2, r3
 8000fde:	0c9a      	lsrs	r2, r3, #18
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000fe8:	e002      	b.n	8000ff0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f9      	bne.n	8000fea <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b01      	cmp	r3, #1
 8001002:	d17a      	bne.n	80010fa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800100c:	f023 0301 	bic.w	r3, r3, #1
 8001010:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800102e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001042:	d106      	bne.n	8001052 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001048:	f023 0206 	bic.w	r2, r3, #6
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	645a      	str	r2, [r3, #68]	; 0x44
 8001050:	e002      	b.n	8001058 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001060:	4b31      	ldr	r3, [pc, #196]	; (8001128 <HAL_ADC_Start+0x194>)
 8001062:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800106c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 031f 	and.w	r3, r3, #31
 8001076:	2b00      	cmp	r3, #0
 8001078:	d12a      	bne.n	80010d0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a2b      	ldr	r2, [pc, #172]	; (800112c <HAL_ADC_Start+0x198>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d015      	beq.n	80010b0 <HAL_ADC_Start+0x11c>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a29      	ldr	r2, [pc, #164]	; (8001130 <HAL_ADC_Start+0x19c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d105      	bne.n	800109a <HAL_ADC_Start+0x106>
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <HAL_ADC_Start+0x194>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00a      	beq.n	80010b0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a25      	ldr	r2, [pc, #148]	; (8001134 <HAL_ADC_Start+0x1a0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d136      	bne.n	8001112 <HAL_ADC_Start+0x17e>
 80010a4:	4b20      	ldr	r3, [pc, #128]	; (8001128 <HAL_ADC_Start+0x194>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0310 	and.w	r3, r3, #16
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d130      	bne.n	8001112 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d129      	bne.n	8001112 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	e020      	b.n	8001112 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a15      	ldr	r2, [pc, #84]	; (800112c <HAL_ADC_Start+0x198>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d11b      	bne.n	8001112 <HAL_ADC_Start+0x17e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d114      	bne.n	8001112 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	e00b      	b.n	8001112 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f043 0210 	orr.w	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f043 0201 	orr.w	r2, r3, #1
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	20000000 	.word	0x20000000
 8001124:	431bde83 	.word	0x431bde83
 8001128:	40012300 	.word	0x40012300
 800112c:	40012000 	.word	0x40012000
 8001130:	40012100 	.word	0x40012100
 8001134:	40012200 	.word	0x40012200

08001138 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x1c>
 800116c:	2302      	movs	r3, #2
 800116e:	e113      	b.n	8001398 <HAL_ADC_ConfigChannel+0x244>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b09      	cmp	r3, #9
 800117e:	d925      	bls.n	80011cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68d9      	ldr	r1, [r3, #12]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	461a      	mov	r2, r3
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	3b1e      	subs	r3, #30
 8001196:	2207      	movs	r2, #7
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43da      	mvns	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	400a      	ands	r2, r1
 80011a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68d9      	ldr	r1, [r3, #12]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	4603      	mov	r3, r0
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4403      	add	r3, r0
 80011be:	3b1e      	subs	r3, #30
 80011c0:	409a      	lsls	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	e022      	b.n	8001212 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6919      	ldr	r1, [r3, #16]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	2207      	movs	r2, #7
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	400a      	ands	r2, r1
 80011ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6919      	ldr	r1, [r3, #16]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	4603      	mov	r3, r0
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4403      	add	r3, r0
 8001208:	409a      	lsls	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b06      	cmp	r3, #6
 8001218:	d824      	bhi.n	8001264 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	3b05      	subs	r3, #5
 800122c:	221f      	movs	r2, #31
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	400a      	ands	r2, r1
 800123a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	3b05      	subs	r3, #5
 8001256:	fa00 f203 	lsl.w	r2, r0, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
 8001262:	e04c      	b.n	80012fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b0c      	cmp	r3, #12
 800126a:	d824      	bhi.n	80012b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	3b23      	subs	r3, #35	; 0x23
 800127e:	221f      	movs	r2, #31
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43da      	mvns	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	400a      	ands	r2, r1
 800128c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	3b23      	subs	r3, #35	; 0x23
 80012a8:	fa00 f203 	lsl.w	r2, r0, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	631a      	str	r2, [r3, #48]	; 0x30
 80012b4:	e023      	b.n	80012fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	3b41      	subs	r3, #65	; 0x41
 80012c8:	221f      	movs	r2, #31
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	400a      	ands	r2, r1
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3b41      	subs	r3, #65	; 0x41
 80012f2:	fa00 f203 	lsl.w	r2, r0, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012fe:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <HAL_ADC_ConfigChannel+0x250>)
 8001300:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a28      	ldr	r2, [pc, #160]	; (80013a8 <HAL_ADC_ConfigChannel+0x254>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d10f      	bne.n	800132c <HAL_ADC_ConfigChannel+0x1d8>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b12      	cmp	r3, #18
 8001312:	d10b      	bne.n	800132c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HAL_ADC_ConfigChannel+0x254>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12b      	bne.n	800138e <HAL_ADC_ConfigChannel+0x23a>
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <HAL_ADC_ConfigChannel+0x258>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d003      	beq.n	8001348 <HAL_ADC_ConfigChannel+0x1f4>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b11      	cmp	r3, #17
 8001346:	d122      	bne.n	800138e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a11      	ldr	r2, [pc, #68]	; (80013ac <HAL_ADC_ConfigChannel+0x258>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d111      	bne.n	800138e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_ADC_ConfigChannel+0x25c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <HAL_ADC_ConfigChannel+0x260>)
 8001370:	fba2 2303 	umull	r2, r3, r2, r3
 8001374:	0c9a      	lsrs	r2, r3, #18
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001380:	e002      	b.n	8001388 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	3b01      	subs	r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f9      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40012300 	.word	0x40012300
 80013a8:	40012000 	.word	0x40012000
 80013ac:	10000012 	.word	0x10000012
 80013b0:	20000000 	.word	0x20000000
 80013b4:	431bde83 	.word	0x431bde83

080013b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013c0:	4b79      	ldr	r3, [pc, #484]	; (80015a8 <ADC_Init+0x1f0>)
 80013c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	431a      	orrs	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6859      	ldr	r1, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	021a      	lsls	r2, r3, #8
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001432:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6899      	ldr	r1, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	4a58      	ldr	r2, [pc, #352]	; (80015ac <ADC_Init+0x1f4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d022      	beq.n	8001496 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800145e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6899      	ldr	r1, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6899      	ldr	r1, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	e00f      	b.n	80014b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0202 	bic.w	r2, r2, #2
 80014c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6899      	ldr	r1, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7e1b      	ldrb	r3, [r3, #24]
 80014d0:	005a      	lsls	r2, r3, #1
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d01b      	beq.n	800151c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001502:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6859      	ldr	r1, [r3, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	3b01      	subs	r3, #1
 8001510:	035a      	lsls	r2, r3, #13
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	e007      	b.n	800152c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800152a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	3b01      	subs	r3, #1
 8001548:	051a      	lsls	r2, r3, #20
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6899      	ldr	r1, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800156e:	025a      	lsls	r2, r3, #9
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001586:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6899      	ldr	r1, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	029a      	lsls	r2, r3, #10
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	609a      	str	r2, [r3, #8]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40012300 	.word	0x40012300
 80015ac:	0f000001 	.word	0x0f000001

080015b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	; (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	; (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f1c3 0307 	rsb	r3, r3, #7
 8001682:	2b04      	cmp	r3, #4
 8001684:	bf28      	it	cs
 8001686:	2304      	movcs	r3, #4
 8001688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3304      	adds	r3, #4
 800168e:	2b06      	cmp	r3, #6
 8001690:	d902      	bls.n	8001698 <NVIC_EncodePriority+0x30>
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3b03      	subs	r3, #3
 8001696:	e000      	b.n	800169a <NVIC_EncodePriority+0x32>
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	f04f 32ff 	mov.w	r2, #4294967295
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	401a      	ands	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43d9      	mvns	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	4313      	orrs	r3, r2
         );
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3724      	adds	r7, #36	; 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e0:	d301      	bcc.n	80016e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00f      	b.n	8001706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <SysTick_Config+0x40>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ee:	210f      	movs	r1, #15
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f7ff ff8e 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x40>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff47 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff5c 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff8e 	bl	8001668 <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5d 	bl	8001614 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffb0 	bl	80016d0 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	e165      	b.n	8001a64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001798:	2201      	movs	r2, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	f040 8154 	bne.w	8001a5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d005      	beq.n	80017ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d130      	bne.n	8001830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001804:	2201      	movs	r2, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 0201 	and.w	r2, r3, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b03      	cmp	r3, #3
 800183a:	d017      	beq.n	800186c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d123      	bne.n	80018c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3208      	adds	r2, #8
 8001880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	220f      	movs	r2, #15
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	08da      	lsrs	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3208      	adds	r2, #8
 80018ba:	69b9      	ldr	r1, [r7, #24]
 80018bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0203 	and.w	r2, r3, #3
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80ae 	beq.w	8001a5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <HAL_GPIO_Init+0x300>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a5c      	ldr	r2, [pc, #368]	; (8001a7c <HAL_GPIO_Init+0x300>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b5a      	ldr	r3, [pc, #360]	; (8001a7c <HAL_GPIO_Init+0x300>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800191e:	4a58      	ldr	r2, [pc, #352]	; (8001a80 <HAL_GPIO_Init+0x304>)
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	3302      	adds	r3, #2
 8001926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	220f      	movs	r2, #15
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4f      	ldr	r2, [pc, #316]	; (8001a84 <HAL_GPIO_Init+0x308>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d025      	beq.n	8001996 <HAL_GPIO_Init+0x21a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4e      	ldr	r2, [pc, #312]	; (8001a88 <HAL_GPIO_Init+0x30c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d01f      	beq.n	8001992 <HAL_GPIO_Init+0x216>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4d      	ldr	r2, [pc, #308]	; (8001a8c <HAL_GPIO_Init+0x310>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d019      	beq.n	800198e <HAL_GPIO_Init+0x212>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4c      	ldr	r2, [pc, #304]	; (8001a90 <HAL_GPIO_Init+0x314>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d013      	beq.n	800198a <HAL_GPIO_Init+0x20e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4b      	ldr	r2, [pc, #300]	; (8001a94 <HAL_GPIO_Init+0x318>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d00d      	beq.n	8001986 <HAL_GPIO_Init+0x20a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4a      	ldr	r2, [pc, #296]	; (8001a98 <HAL_GPIO_Init+0x31c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d007      	beq.n	8001982 <HAL_GPIO_Init+0x206>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a49      	ldr	r2, [pc, #292]	; (8001a9c <HAL_GPIO_Init+0x320>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d101      	bne.n	800197e <HAL_GPIO_Init+0x202>
 800197a:	2306      	movs	r3, #6
 800197c:	e00c      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 800197e:	2307      	movs	r3, #7
 8001980:	e00a      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 8001982:	2305      	movs	r3, #5
 8001984:	e008      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 8001986:	2304      	movs	r3, #4
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 800198a:	2303      	movs	r3, #3
 800198c:	e004      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 800198e:	2302      	movs	r3, #2
 8001990:	e002      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 8001996:	2300      	movs	r3, #0
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	f002 0203 	and.w	r2, r2, #3
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	4093      	lsls	r3, r2
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a8:	4935      	ldr	r1, [pc, #212]	; (8001a80 <HAL_GPIO_Init+0x304>)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b6:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019da:	4a31      	ldr	r2, [pc, #196]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e0:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a04:	4a26      	ldr	r2, [pc, #152]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a0a:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a58:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <HAL_GPIO_Init+0x324>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3301      	adds	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2b0f      	cmp	r3, #15
 8001a68:	f67f ae96 	bls.w	8001798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40013800 	.word	0x40013800
 8001a84:	40020000 	.word	0x40020000
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40020c00 	.word	0x40020c00
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40021400 	.word	0x40021400
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	40013c00 	.word	0x40013c00

08001aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0cc      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d90c      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b65      	ldr	r3, [pc, #404]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0b8      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af8:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b10:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	494d      	ldr	r1, [pc, #308]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d044      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d119      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e07f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b72:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e067      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b82:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f023 0203 	bic.w	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4934      	ldr	r1, [pc, #208]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b94:	f7ff f9ae 	bl	8000ef4 <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7ff f9aa 	bl	8000ef4 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e04f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 020c 	and.w	r2, r3, #12
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d1eb      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d20c      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e032      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4916      	ldr	r1, [pc, #88]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	490e      	ldr	r1, [pc, #56]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c2a:	f000 f855 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	490a      	ldr	r1, [pc, #40]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	5ccb      	ldrb	r3, [r1, r3]
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1c8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f90e 	bl	8000e6c <HAL_InitTick>

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00
 8001c60:	40023800 	.word	0x40023800
 8001c64:	080039a0 	.word	0x080039a0
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000000 	.word	0x20000000

08001c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c8c:	f7ff fff0 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	0a9b      	lsrs	r3, r3, #10
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4903      	ldr	r1, [pc, #12]	; (8001cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	080039b0 	.word	0x080039b0

08001cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cb4:	f7ff ffdc 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	0b5b      	lsrs	r3, r3, #13
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	4903      	ldr	r1, [pc, #12]	; (8001cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc6:	5ccb      	ldrb	r3, [r1, r3]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	080039b0 	.word	0x080039b0

08001cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cdc:	b0ae      	sub	sp, #184	; 0xb8
 8001cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cfe:	4bcb      	ldr	r3, [pc, #812]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	f200 8206 	bhi.w	8002118 <HAL_RCC_GetSysClockFreq+0x440>
 8001d0c:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d12:	bf00      	nop
 8001d14:	08001d49 	.word	0x08001d49
 8001d18:	08002119 	.word	0x08002119
 8001d1c:	08002119 	.word	0x08002119
 8001d20:	08002119 	.word	0x08002119
 8001d24:	08001d51 	.word	0x08001d51
 8001d28:	08002119 	.word	0x08002119
 8001d2c:	08002119 	.word	0x08002119
 8001d30:	08002119 	.word	0x08002119
 8001d34:	08001d59 	.word	0x08001d59
 8001d38:	08002119 	.word	0x08002119
 8001d3c:	08002119 	.word	0x08002119
 8001d40:	08002119 	.word	0x08002119
 8001d44:	08001f49 	.word	0x08001f49
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4bb9      	ldr	r3, [pc, #740]	; (8002030 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001d4e:	e1e7      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d50:	4bb8      	ldr	r3, [pc, #736]	; (8002034 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d56:	e1e3      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d58:	4bb4      	ldr	r3, [pc, #720]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d64:	4bb1      	ldr	r3, [pc, #708]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d071      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d70:	4bae      	ldr	r3, [pc, #696]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	2200      	movs	r2, #0
 8001d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d7c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d96:	4622      	mov	r2, r4
 8001d98:	462b      	mov	r3, r5
 8001d9a:	f04f 0000 	mov.w	r0, #0
 8001d9e:	f04f 0100 	mov.w	r1, #0
 8001da2:	0159      	lsls	r1, r3, #5
 8001da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da8:	0150      	lsls	r0, r2, #5
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4621      	mov	r1, r4
 8001db0:	1a51      	subs	r1, r2, r1
 8001db2:	6439      	str	r1, [r7, #64]	; 0x40
 8001db4:	4629      	mov	r1, r5
 8001db6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dba:	647b      	str	r3, [r7, #68]	; 0x44
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001dc8:	4649      	mov	r1, r9
 8001dca:	018b      	lsls	r3, r1, #6
 8001dcc:	4641      	mov	r1, r8
 8001dce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dd2:	4641      	mov	r1, r8
 8001dd4:	018a      	lsls	r2, r1, #6
 8001dd6:	4641      	mov	r1, r8
 8001dd8:	1a51      	subs	r1, r2, r1
 8001dda:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ddc:	4649      	mov	r1, r9
 8001dde:	eb63 0301 	sbc.w	r3, r3, r1
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001df0:	4649      	mov	r1, r9
 8001df2:	00cb      	lsls	r3, r1, #3
 8001df4:	4641      	mov	r1, r8
 8001df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dfa:	4641      	mov	r1, r8
 8001dfc:	00ca      	lsls	r2, r1, #3
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	4603      	mov	r3, r0
 8001e04:	4622      	mov	r2, r4
 8001e06:	189b      	adds	r3, r3, r2
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
 8001e0a:	462b      	mov	r3, r5
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	eb42 0303 	adc.w	r3, r2, r3
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e20:	4629      	mov	r1, r5
 8001e22:	024b      	lsls	r3, r1, #9
 8001e24:	4621      	mov	r1, r4
 8001e26:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	024a      	lsls	r2, r1, #9
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e40:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001e44:	f7fe f9e8 	bl	8000218 <__aeabi_uldivmod>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e52:	e067      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e54:	4b75      	ldr	r3, [pc, #468]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e60:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001e64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e6e:	2300      	movs	r3, #0
 8001e70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e72:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001e76:	4622      	mov	r2, r4
 8001e78:	462b      	mov	r3, r5
 8001e7a:	f04f 0000 	mov.w	r0, #0
 8001e7e:	f04f 0100 	mov.w	r1, #0
 8001e82:	0159      	lsls	r1, r3, #5
 8001e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e88:	0150      	lsls	r0, r2, #5
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4621      	mov	r1, r4
 8001e90:	1a51      	subs	r1, r2, r1
 8001e92:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e94:	4629      	mov	r1, r5
 8001e96:	eb63 0301 	sbc.w	r3, r3, r1
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	018b      	lsls	r3, r1, #6
 8001eac:	4641      	mov	r1, r8
 8001eae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eb2:	4641      	mov	r1, r8
 8001eb4:	018a      	lsls	r2, r1, #6
 8001eb6:	4641      	mov	r1, r8
 8001eb8:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ebc:	4649      	mov	r1, r9
 8001ebe:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ece:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ed2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ed6:	4692      	mov	sl, r2
 8001ed8:	469b      	mov	fp, r3
 8001eda:	4623      	mov	r3, r4
 8001edc:	eb1a 0303 	adds.w	r3, sl, r3
 8001ee0:	623b      	str	r3, [r7, #32]
 8001ee2:	462b      	mov	r3, r5
 8001ee4:	eb4b 0303 	adc.w	r3, fp, r3
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	028b      	lsls	r3, r1, #10
 8001efa:	4621      	mov	r1, r4
 8001efc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f00:	4621      	mov	r1, r4
 8001f02:	028a      	lsls	r2, r1, #10
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8001f10:	677a      	str	r2, [r7, #116]	; 0x74
 8001f12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001f16:	f7fe f97f 	bl	8000218 <__aeabi_uldivmod>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4613      	mov	r3, r2
 8001f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f24:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	0c1b      	lsrs	r3, r3, #16
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001f36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f46:	e0eb      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f48:	4b38      	ldr	r3, [pc, #224]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d06b      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f60:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	2200      	movs	r2, #0
 8001f68:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f72:	663b      	str	r3, [r7, #96]	; 0x60
 8001f74:	2300      	movs	r3, #0
 8001f76:	667b      	str	r3, [r7, #100]	; 0x64
 8001f78:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f7c:	4622      	mov	r2, r4
 8001f7e:	462b      	mov	r3, r5
 8001f80:	f04f 0000 	mov.w	r0, #0
 8001f84:	f04f 0100 	mov.w	r1, #0
 8001f88:	0159      	lsls	r1, r3, #5
 8001f8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f8e:	0150      	lsls	r0, r2, #5
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4621      	mov	r1, r4
 8001f96:	1a51      	subs	r1, r2, r1
 8001f98:	61b9      	str	r1, [r7, #24]
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	eb63 0301 	sbc.w	r3, r3, r1
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001fae:	4659      	mov	r1, fp
 8001fb0:	018b      	lsls	r3, r1, #6
 8001fb2:	4651      	mov	r1, sl
 8001fb4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fb8:	4651      	mov	r1, sl
 8001fba:	018a      	lsls	r2, r1, #6
 8001fbc:	4651      	mov	r1, sl
 8001fbe:	ebb2 0801 	subs.w	r8, r2, r1
 8001fc2:	4659      	mov	r1, fp
 8001fc4:	eb63 0901 	sbc.w	r9, r3, r1
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fd4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fd8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fdc:	4690      	mov	r8, r2
 8001fde:	4699      	mov	r9, r3
 8001fe0:	4623      	mov	r3, r4
 8001fe2:	eb18 0303 	adds.w	r3, r8, r3
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	462b      	mov	r3, r5
 8001fea:	eb49 0303 	adc.w	r3, r9, r3
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	024b      	lsls	r3, r1, #9
 8002000:	4621      	mov	r1, r4
 8002002:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002006:	4621      	mov	r1, r4
 8002008:	024a      	lsls	r2, r1, #9
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002012:	2200      	movs	r2, #0
 8002014:	65bb      	str	r3, [r7, #88]	; 0x58
 8002016:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002018:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800201c:	f7fe f8fc 	bl	8000218 <__aeabi_uldivmod>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4613      	mov	r3, r2
 8002026:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800202a:	e065      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x420>
 800202c:	40023800 	.word	0x40023800
 8002030:	00f42400 	.word	0x00f42400
 8002034:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002038:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_RCC_GetSysClockFreq+0x458>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	099b      	lsrs	r3, r3, #6
 800203e:	2200      	movs	r2, #0
 8002040:	4618      	mov	r0, r3
 8002042:	4611      	mov	r1, r2
 8002044:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002048:	653b      	str	r3, [r7, #80]	; 0x50
 800204a:	2300      	movs	r3, #0
 800204c:	657b      	str	r3, [r7, #84]	; 0x54
 800204e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002052:	4642      	mov	r2, r8
 8002054:	464b      	mov	r3, r9
 8002056:	f04f 0000 	mov.w	r0, #0
 800205a:	f04f 0100 	mov.w	r1, #0
 800205e:	0159      	lsls	r1, r3, #5
 8002060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002064:	0150      	lsls	r0, r2, #5
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4641      	mov	r1, r8
 800206c:	1a51      	subs	r1, r2, r1
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	4649      	mov	r1, r9
 8002072:	eb63 0301 	sbc.w	r3, r3, r1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002084:	4659      	mov	r1, fp
 8002086:	018b      	lsls	r3, r1, #6
 8002088:	4651      	mov	r1, sl
 800208a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800208e:	4651      	mov	r1, sl
 8002090:	018a      	lsls	r2, r1, #6
 8002092:	4651      	mov	r1, sl
 8002094:	1a54      	subs	r4, r2, r1
 8002096:	4659      	mov	r1, fp
 8002098:	eb63 0501 	sbc.w	r5, r3, r1
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	00eb      	lsls	r3, r5, #3
 80020a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020aa:	00e2      	lsls	r2, r4, #3
 80020ac:	4614      	mov	r4, r2
 80020ae:	461d      	mov	r5, r3
 80020b0:	4643      	mov	r3, r8
 80020b2:	18e3      	adds	r3, r4, r3
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	464b      	mov	r3, r9
 80020b8:	eb45 0303 	adc.w	r3, r5, r3
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ca:	4629      	mov	r1, r5
 80020cc:	028b      	lsls	r3, r1, #10
 80020ce:	4621      	mov	r1, r4
 80020d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020d4:	4621      	mov	r1, r4
 80020d6:	028a      	lsls	r2, r1, #10
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020e0:	2200      	movs	r2, #0
 80020e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80020e4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80020e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020ea:	f7fe f895 	bl	8000218 <__aeabi_uldivmod>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4613      	mov	r3, r2
 80020f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <HAL_RCC_GetSysClockFreq+0x458>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	0f1b      	lsrs	r3, r3, #28
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800210a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002116:	e003      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_RCC_GetSysClockFreq+0x45c>)
 800211a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800211e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002120:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002124:	4618      	mov	r0, r3
 8002126:	37b8      	adds	r7, #184	; 0xb8
 8002128:	46bd      	mov	sp, r7
 800212a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	00f42400 	.word	0x00f42400

08002138 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e28d      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 8083 	beq.w	800225e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002158:	4b94      	ldr	r3, [pc, #592]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b04      	cmp	r3, #4
 8002162:	d019      	beq.n	8002198 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002164:	4b91      	ldr	r3, [pc, #580]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800216c:	2b08      	cmp	r3, #8
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002170:	4b8e      	ldr	r3, [pc, #568]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800217c:	d00c      	beq.n	8002198 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217e:	4b8b      	ldr	r3, [pc, #556]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d112      	bne.n	80021b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218a:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002196:	d10b      	bne.n	80021b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	4b84      	ldr	r3, [pc, #528]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d05b      	beq.n	800225c <HAL_RCC_OscConfig+0x124>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d157      	bne.n	800225c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e25a      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b8:	d106      	bne.n	80021c8 <HAL_RCC_OscConfig+0x90>
 80021ba:	4b7c      	ldr	r3, [pc, #496]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a7b      	ldr	r2, [pc, #492]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e01d      	b.n	8002204 <HAL_RCC_OscConfig+0xcc>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0xb4>
 80021d2:	4b76      	ldr	r3, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a75      	ldr	r2, [pc, #468]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b73      	ldr	r3, [pc, #460]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a72      	ldr	r2, [pc, #456]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e00b      	b.n	8002204 <HAL_RCC_OscConfig+0xcc>
 80021ec:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a6e      	ldr	r2, [pc, #440]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b6c      	ldr	r3, [pc, #432]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a6b      	ldr	r2, [pc, #428]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80021fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe fe72 	bl	8000ef4 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002214:	f7fe fe6e 	bl	8000ef4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e21f      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	4b61      	ldr	r3, [pc, #388]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0xdc>
 8002232:	e014      	b.n	800225e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fe5e 	bl	8000ef4 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800223c:	f7fe fe5a 	bl	8000ef4 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e20b      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224e:	4b57      	ldr	r3, [pc, #348]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x104>
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d06f      	beq.n	800234a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800226a:	4b50      	ldr	r3, [pc, #320]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b00      	cmp	r3, #0
 8002274:	d017      	beq.n	80022a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002276:	4b4d      	ldr	r3, [pc, #308]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800227e:	2b08      	cmp	r3, #8
 8002280:	d105      	bne.n	800228e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002282:	4b4a      	ldr	r3, [pc, #296]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228e:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d11c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229a:	4b44      	ldr	r3, [pc, #272]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d116      	bne.n	80022d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	4b41      	ldr	r3, [pc, #260]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_RCC_OscConfig+0x186>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e1d3      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4937      	ldr	r1, [pc, #220]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d2:	e03a      	b.n	800234a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022dc:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <HAL_RCC_OscConfig+0x278>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e2:	f7fe fe07 	bl	8000ef4 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ea:	f7fe fe03 	bl	8000ef4 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e1b4      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002308:	4b28      	ldr	r3, [pc, #160]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4925      	ldr	r1, [pc, #148]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
 800231c:	e015      	b.n	800234a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231e:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <HAL_RCC_OscConfig+0x278>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7fe fde6 	bl	8000ef4 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232c:	f7fe fde2 	bl	8000ef4 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e193      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d036      	beq.n	80023c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d016      	beq.n	800238c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_RCC_OscConfig+0x27c>)
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002364:	f7fe fdc6 	bl	8000ef4 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236c:	f7fe fdc2 	bl	8000ef4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e173      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_OscConfig+0x274>)
 8002380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x234>
 800238a:	e01b      	b.n	80023c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_OscConfig+0x27c>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002392:	f7fe fdaf 	bl	8000ef4 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002398:	e00e      	b.n	80023b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800239a:	f7fe fdab 	bl	8000ef4 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d907      	bls.n	80023b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e15c      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
 80023ac:	40023800 	.word	0x40023800
 80023b0:	42470000 	.word	0x42470000
 80023b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	4b8a      	ldr	r3, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80023ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1ea      	bne.n	800239a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8097 	beq.w	8002500 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b83      	ldr	r3, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10f      	bne.n	8002402 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	4b7f      	ldr	r3, [pc, #508]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a7e      	ldr	r2, [pc, #504]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b7c      	ldr	r3, [pc, #496]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fe:	2301      	movs	r3, #1
 8002400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002402:	4b79      	ldr	r3, [pc, #484]	; (80025e8 <HAL_RCC_OscConfig+0x4b0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d118      	bne.n	8002440 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240e:	4b76      	ldr	r3, [pc, #472]	; (80025e8 <HAL_RCC_OscConfig+0x4b0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a75      	ldr	r2, [pc, #468]	; (80025e8 <HAL_RCC_OscConfig+0x4b0>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241a:	f7fe fd6b 	bl	8000ef4 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002422:	f7fe fd67 	bl	8000ef4 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e118      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	4b6c      	ldr	r3, [pc, #432]	; (80025e8 <HAL_RCC_OscConfig+0x4b0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x31e>
 8002448:	4b66      	ldr	r3, [pc, #408]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	4a65      	ldr	r2, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6713      	str	r3, [r2, #112]	; 0x70
 8002454:	e01c      	b.n	8002490 <HAL_RCC_OscConfig+0x358>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b05      	cmp	r3, #5
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x340>
 800245e:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	4a60      	ldr	r2, [pc, #384]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	6713      	str	r3, [r2, #112]	; 0x70
 800246a:	4b5e      	ldr	r3, [pc, #376]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	4a5d      	ldr	r2, [pc, #372]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6713      	str	r3, [r2, #112]	; 0x70
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0x358>
 8002478:	4b5a      	ldr	r3, [pc, #360]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	4a59      	ldr	r2, [pc, #356]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	6713      	str	r3, [r2, #112]	; 0x70
 8002484:	4b57      	ldr	r3, [pc, #348]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	4a56      	ldr	r2, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800248a:	f023 0304 	bic.w	r3, r3, #4
 800248e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d015      	beq.n	80024c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002498:	f7fe fd2c 	bl	8000ef4 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a0:	f7fe fd28 	bl	8000ef4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e0d7      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b6:	4b4b      	ldr	r3, [pc, #300]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0ee      	beq.n	80024a0 <HAL_RCC_OscConfig+0x368>
 80024c2:	e014      	b.n	80024ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c4:	f7fe fd16 	bl	8000ef4 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024cc:	f7fe fd12 	bl	8000ef4 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e0c1      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e2:	4b40      	ldr	r3, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ee      	bne.n	80024cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d105      	bne.n	8002500 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f4:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	4a3a      	ldr	r2, [pc, #232]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80024fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80ad 	beq.w	8002664 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b08      	cmp	r3, #8
 8002514:	d060      	beq.n	80025d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d145      	bne.n	80025aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	4b33      	ldr	r3, [pc, #204]	; (80025ec <HAL_RCC_OscConfig+0x4b4>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fce6 	bl	8000ef4 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fce2 	bl	8000ef4 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e093      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	019b      	lsls	r3, r3, #6
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	3b01      	subs	r3, #1
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	061b      	lsls	r3, r3, #24
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	071b      	lsls	r3, r3, #28
 8002576:	491b      	ldr	r1, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_RCC_OscConfig+0x4b4>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7fe fcb7 	bl	8000ef4 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe fcb3 	bl	8000ef4 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e064      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x452>
 80025a8:	e05c      	b.n	8002664 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_RCC_OscConfig+0x4b4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fca0 	bl	8000ef4 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b8:	f7fe fc9c 	bl	8000ef4 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e04d      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_OscConfig+0x4ac>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x480>
 80025d6:	e045      	b.n	8002664 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e040      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40007000 	.word	0x40007000
 80025ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <HAL_RCC_OscConfig+0x538>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d030      	beq.n	8002660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d129      	bne.n	8002660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d122      	bne.n	8002660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002628:	4293      	cmp	r3, r2
 800262a:	d119      	bne.n	8002660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	3b01      	subs	r3, #1
 800263a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d10f      	bne.n	8002660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d107      	bne.n	8002660 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800

08002674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e042      	b.n	800270c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fe fa72 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2224      	movs	r2, #36	; 0x24
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f973 	bl	80029a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	; 0x28
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	4613      	mov	r3, r2
 8002722:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b20      	cmp	r3, #32
 8002732:	d175      	bne.n	8002820 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_UART_Transmit+0x2c>
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e06e      	b.n	8002822 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2221      	movs	r2, #33	; 0x21
 800274e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002752:	f7fe fbcf 	bl	8000ef4 <HAL_GetTick>
 8002756:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	88fa      	ldrh	r2, [r7, #6]
 800275c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	88fa      	ldrh	r2, [r7, #6]
 8002762:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276c:	d108      	bne.n	8002780 <HAL_UART_Transmit+0x6c>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d104      	bne.n	8002780 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	e003      	b.n	8002788 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002788:	e02e      	b.n	80027e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2200      	movs	r2, #0
 8002792:	2180      	movs	r1, #128	; 0x80
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f848 	bl	800282a <UART_WaitOnFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e03a      	b.n	8002822 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10b      	bne.n	80027ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	3302      	adds	r3, #2
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	e007      	b.n	80027da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	3301      	adds	r3, #1
 80027d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1cb      	bne.n	800278a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2200      	movs	r2, #0
 80027fa:	2140      	movs	r1, #64	; 0x40
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f814 	bl	800282a <UART_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e006      	b.n	8002822 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	e000      	b.n	8002822 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002820:	2302      	movs	r3, #2
  }
}
 8002822:	4618      	mov	r0, r3
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	4613      	mov	r3, r2
 8002838:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800283a:	e03b      	b.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002842:	d037      	beq.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002844:	f7fe fb56 	bl	8000ef4 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	6a3a      	ldr	r2, [r7, #32]
 8002850:	429a      	cmp	r2, r3
 8002852:	d302      	bcc.n	800285a <UART_WaitOnFlagUntilTimeout+0x30>
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e03a      	b.n	80028d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d023      	beq.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b80      	cmp	r3, #128	; 0x80
 8002870:	d020      	beq.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d01d      	beq.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b08      	cmp	r3, #8
 8002884:	d116      	bne.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f81d 	bl	80028dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2208      	movs	r2, #8
 80028a6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e00f      	b.n	80028d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	4013      	ands	r3, r2
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d0b4      	beq.n	800283c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028dc:	b480      	push	{r7}
 80028de:	b095      	sub	sp, #84	; 0x54
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	330c      	adds	r3, #12
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ee:	e853 3f00 	ldrex	r3, [r3]
 80028f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	330c      	adds	r3, #12
 8002902:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002904:	643a      	str	r2, [r7, #64]	; 0x40
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002908:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800290a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800290c:	e841 2300 	strex	r3, r2, [r1]
 8002910:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1e5      	bne.n	80028e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3314      	adds	r3, #20
 800291e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	e853 3f00 	ldrex	r3, [r3]
 8002926:	61fb      	str	r3, [r7, #28]
   return(result);
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3314      	adds	r3, #20
 8002936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002938:	62fa      	str	r2, [r7, #44]	; 0x2c
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800293e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002940:	e841 2300 	strex	r3, r2, [r1]
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e5      	bne.n	8002918 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	2b01      	cmp	r3, #1
 8002952:	d119      	bne.n	8002988 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	330c      	adds	r3, #12
 800295a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	e853 3f00 	ldrex	r3, [r3]
 8002962:	60bb      	str	r3, [r7, #8]
   return(result);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f023 0310 	bic.w	r3, r3, #16
 800296a:	647b      	str	r3, [r7, #68]	; 0x44
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	330c      	adds	r3, #12
 8002972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002974:	61ba      	str	r2, [r7, #24]
 8002976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002978:	6979      	ldr	r1, [r7, #20]
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	e841 2300 	strex	r3, r2, [r1]
 8002980:	613b      	str	r3, [r7, #16]
   return(result);
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e5      	bne.n	8002954 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002996:	bf00      	nop
 8002998:	3754      	adds	r7, #84	; 0x54
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a8:	b0c0      	sub	sp, #256	; 0x100
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c0:	68d9      	ldr	r1, [r3, #12]
 80029c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	ea40 0301 	orr.w	r3, r0, r1
 80029cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	431a      	orrs	r2, r3
 80029dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029fc:	f021 010c 	bic.w	r1, r1, #12
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1e:	6999      	ldr	r1, [r3, #24]
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	ea40 0301 	orr.w	r3, r0, r1
 8002a2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4b8f      	ldr	r3, [pc, #572]	; (8002c70 <UART_SetConfig+0x2cc>)
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d005      	beq.n	8002a44 <UART_SetConfig+0xa0>
 8002a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	4b8d      	ldr	r3, [pc, #564]	; (8002c74 <UART_SetConfig+0x2d0>)
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d104      	bne.n	8002a4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a44:	f7ff f934 	bl	8001cb0 <HAL_RCC_GetPCLK2Freq>
 8002a48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a4c:	e003      	b.n	8002a56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a4e:	f7ff f91b 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8002a52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a60:	f040 810c 	bne.w	8002c7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a76:	4622      	mov	r2, r4
 8002a78:	462b      	mov	r3, r5
 8002a7a:	1891      	adds	r1, r2, r2
 8002a7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a7e:	415b      	adcs	r3, r3
 8002a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a86:	4621      	mov	r1, r4
 8002a88:	eb12 0801 	adds.w	r8, r2, r1
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	eb43 0901 	adc.w	r9, r3, r1
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aa6:	4690      	mov	r8, r2
 8002aa8:	4699      	mov	r9, r3
 8002aaa:	4623      	mov	r3, r4
 8002aac:	eb18 0303 	adds.w	r3, r8, r3
 8002ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ab4:	462b      	mov	r3, r5
 8002ab6:	eb49 0303 	adc.w	r3, r9, r3
 8002aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002aca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ace:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	18db      	adds	r3, r3, r3
 8002ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ad8:	4613      	mov	r3, r2
 8002ada:	eb42 0303 	adc.w	r3, r2, r3
 8002ade:	657b      	str	r3, [r7, #84]	; 0x54
 8002ae0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ae4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ae8:	f7fd fb96 	bl	8000218 <__aeabi_uldivmod>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4b61      	ldr	r3, [pc, #388]	; (8002c78 <UART_SetConfig+0x2d4>)
 8002af2:	fba3 2302 	umull	r2, r3, r3, r2
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	011c      	lsls	r4, r3, #4
 8002afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b0c:	4642      	mov	r2, r8
 8002b0e:	464b      	mov	r3, r9
 8002b10:	1891      	adds	r1, r2, r2
 8002b12:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b14:	415b      	adcs	r3, r3
 8002b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b1c:	4641      	mov	r1, r8
 8002b1e:	eb12 0a01 	adds.w	sl, r2, r1
 8002b22:	4649      	mov	r1, r9
 8002b24:	eb43 0b01 	adc.w	fp, r3, r1
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b3c:	4692      	mov	sl, r2
 8002b3e:	469b      	mov	fp, r3
 8002b40:	4643      	mov	r3, r8
 8002b42:	eb1a 0303 	adds.w	r3, sl, r3
 8002b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b4a:	464b      	mov	r3, r9
 8002b4c:	eb4b 0303 	adc.w	r3, fp, r3
 8002b50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	18db      	adds	r3, r3, r3
 8002b6c:	643b      	str	r3, [r7, #64]	; 0x40
 8002b6e:	4613      	mov	r3, r2
 8002b70:	eb42 0303 	adc.w	r3, r2, r3
 8002b74:	647b      	str	r3, [r7, #68]	; 0x44
 8002b76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b7e:	f7fd fb4b 	bl	8000218 <__aeabi_uldivmod>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <UART_SetConfig+0x2d4>)
 8002b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2264      	movs	r2, #100	; 0x64
 8002b92:	fb02 f303 	mul.w	r3, r2, r3
 8002b96:	1acb      	subs	r3, r1, r3
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b9e:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <UART_SetConfig+0x2d4>)
 8002ba0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bac:	441c      	add	r4, r3
 8002bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002bbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	464b      	mov	r3, r9
 8002bc4:	1891      	adds	r1, r2, r2
 8002bc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bc8:	415b      	adcs	r3, r3
 8002bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bd0:	4641      	mov	r1, r8
 8002bd2:	1851      	adds	r1, r2, r1
 8002bd4:	6339      	str	r1, [r7, #48]	; 0x30
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	414b      	adcs	r3, r1
 8002bda:	637b      	str	r3, [r7, #52]	; 0x34
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002be8:	4659      	mov	r1, fp
 8002bea:	00cb      	lsls	r3, r1, #3
 8002bec:	4651      	mov	r1, sl
 8002bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bf2:	4651      	mov	r1, sl
 8002bf4:	00ca      	lsls	r2, r1, #3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4642      	mov	r2, r8
 8002bfe:	189b      	adds	r3, r3, r2
 8002c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c04:	464b      	mov	r3, r9
 8002c06:	460a      	mov	r2, r1
 8002c08:	eb42 0303 	adc.w	r3, r2, r3
 8002c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c24:	460b      	mov	r3, r1
 8002c26:	18db      	adds	r3, r3, r3
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	eb42 0303 	adc.w	r3, r2, r3
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c3a:	f7fd faed 	bl	8000218 <__aeabi_uldivmod>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <UART_SetConfig+0x2d4>)
 8002c44:	fba3 1302 	umull	r1, r3, r3, r2
 8002c48:	095b      	lsrs	r3, r3, #5
 8002c4a:	2164      	movs	r1, #100	; 0x64
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	3332      	adds	r3, #50	; 0x32
 8002c56:	4a08      	ldr	r2, [pc, #32]	; (8002c78 <UART_SetConfig+0x2d4>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	f003 0207 	and.w	r2, r3, #7
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4422      	add	r2, r4
 8002c6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c6c:	e106      	b.n	8002e7c <UART_SetConfig+0x4d8>
 8002c6e:	bf00      	nop
 8002c70:	40011000 	.word	0x40011000
 8002c74:	40011400 	.word	0x40011400
 8002c78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c80:	2200      	movs	r2, #0
 8002c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c8e:	4642      	mov	r2, r8
 8002c90:	464b      	mov	r3, r9
 8002c92:	1891      	adds	r1, r2, r2
 8002c94:	6239      	str	r1, [r7, #32]
 8002c96:	415b      	adcs	r3, r3
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c9e:	4641      	mov	r1, r8
 8002ca0:	1854      	adds	r4, r2, r1
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	eb43 0501 	adc.w	r5, r3, r1
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	00eb      	lsls	r3, r5, #3
 8002cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cb6:	00e2      	lsls	r2, r4, #3
 8002cb8:	4614      	mov	r4, r2
 8002cba:	461d      	mov	r5, r3
 8002cbc:	4643      	mov	r3, r8
 8002cbe:	18e3      	adds	r3, r4, r3
 8002cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cc4:	464b      	mov	r3, r9
 8002cc6:	eb45 0303 	adc.w	r3, r5, r3
 8002cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cea:	4629      	mov	r1, r5
 8002cec:	008b      	lsls	r3, r1, #2
 8002cee:	4621      	mov	r1, r4
 8002cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	008a      	lsls	r2, r1, #2
 8002cf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cfc:	f7fd fa8c 	bl	8000218 <__aeabi_uldivmod>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4b60      	ldr	r3, [pc, #384]	; (8002e88 <UART_SetConfig+0x4e4>)
 8002d06:	fba3 2302 	umull	r2, r3, r3, r2
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	011c      	lsls	r4, r3, #4
 8002d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d12:	2200      	movs	r2, #0
 8002d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d20:	4642      	mov	r2, r8
 8002d22:	464b      	mov	r3, r9
 8002d24:	1891      	adds	r1, r2, r2
 8002d26:	61b9      	str	r1, [r7, #24]
 8002d28:	415b      	adcs	r3, r3
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d30:	4641      	mov	r1, r8
 8002d32:	1851      	adds	r1, r2, r1
 8002d34:	6139      	str	r1, [r7, #16]
 8002d36:	4649      	mov	r1, r9
 8002d38:	414b      	adcs	r3, r1
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d48:	4659      	mov	r1, fp
 8002d4a:	00cb      	lsls	r3, r1, #3
 8002d4c:	4651      	mov	r1, sl
 8002d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d52:	4651      	mov	r1, sl
 8002d54:	00ca      	lsls	r2, r1, #3
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4642      	mov	r2, r8
 8002d5e:	189b      	adds	r3, r3, r2
 8002d60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d64:	464b      	mov	r3, r9
 8002d66:	460a      	mov	r2, r1
 8002d68:	eb42 0303 	adc.w	r3, r2, r3
 8002d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d88:	4649      	mov	r1, r9
 8002d8a:	008b      	lsls	r3, r1, #2
 8002d8c:	4641      	mov	r1, r8
 8002d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d92:	4641      	mov	r1, r8
 8002d94:	008a      	lsls	r2, r1, #2
 8002d96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d9a:	f7fd fa3d 	bl	8000218 <__aeabi_uldivmod>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4611      	mov	r1, r2
 8002da4:	4b38      	ldr	r3, [pc, #224]	; (8002e88 <UART_SetConfig+0x4e4>)
 8002da6:	fba3 2301 	umull	r2, r3, r3, r1
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	2264      	movs	r2, #100	; 0x64
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	1acb      	subs	r3, r1, r3
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	3332      	adds	r3, #50	; 0x32
 8002db8:	4a33      	ldr	r2, [pc, #204]	; (8002e88 <UART_SetConfig+0x4e4>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc4:	441c      	add	r4, r3
 8002dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dca:	2200      	movs	r2, #0
 8002dcc:	673b      	str	r3, [r7, #112]	; 0x70
 8002dce:	677a      	str	r2, [r7, #116]	; 0x74
 8002dd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	1891      	adds	r1, r2, r2
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	415b      	adcs	r3, r3
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002de4:	4641      	mov	r1, r8
 8002de6:	1851      	adds	r1, r2, r1
 8002de8:	6039      	str	r1, [r7, #0]
 8002dea:	4649      	mov	r1, r9
 8002dec:	414b      	adcs	r3, r1
 8002dee:	607b      	str	r3, [r7, #4]
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dfc:	4659      	mov	r1, fp
 8002dfe:	00cb      	lsls	r3, r1, #3
 8002e00:	4651      	mov	r1, sl
 8002e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e06:	4651      	mov	r1, sl
 8002e08:	00ca      	lsls	r2, r1, #3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4642      	mov	r2, r8
 8002e12:	189b      	adds	r3, r3, r2
 8002e14:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e16:	464b      	mov	r3, r9
 8002e18:	460a      	mov	r2, r1
 8002e1a:	eb42 0303 	adc.w	r3, r2, r3
 8002e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	663b      	str	r3, [r7, #96]	; 0x60
 8002e2a:	667a      	str	r2, [r7, #100]	; 0x64
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e38:	4649      	mov	r1, r9
 8002e3a:	008b      	lsls	r3, r1, #2
 8002e3c:	4641      	mov	r1, r8
 8002e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e42:	4641      	mov	r1, r8
 8002e44:	008a      	lsls	r2, r1, #2
 8002e46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e4a:	f7fd f9e5 	bl	8000218 <__aeabi_uldivmod>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <UART_SetConfig+0x4e4>)
 8002e54:	fba3 1302 	umull	r1, r3, r3, r2
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	2164      	movs	r1, #100	; 0x64
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	3332      	adds	r3, #50	; 0x32
 8002e66:	4a08      	ldr	r2, [pc, #32]	; (8002e88 <UART_SetConfig+0x4e4>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	f003 020f 	and.w	r2, r3, #15
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4422      	add	r2, r4
 8002e7a:	609a      	str	r2, [r3, #8]
}
 8002e7c:	bf00      	nop
 8002e7e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e82:	46bd      	mov	sp, r7
 8002e84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e88:	51eb851f 	.word	0x51eb851f

08002e8c <std>:
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	b510      	push	{r4, lr}
 8002e90:	4604      	mov	r4, r0
 8002e92:	e9c0 3300 	strd	r3, r3, [r0]
 8002e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e9a:	6083      	str	r3, [r0, #8]
 8002e9c:	8181      	strh	r1, [r0, #12]
 8002e9e:	6643      	str	r3, [r0, #100]	; 0x64
 8002ea0:	81c2      	strh	r2, [r0, #14]
 8002ea2:	6183      	str	r3, [r0, #24]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	305c      	adds	r0, #92	; 0x5c
 8002eaa:	f000 f8fc 	bl	80030a6 <memset>
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <std+0x58>)
 8002eb0:	6263      	str	r3, [r4, #36]	; 0x24
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <std+0x5c>)
 8002eb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <std+0x60>)
 8002eb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <std+0x64>)
 8002ebc:	6323      	str	r3, [r4, #48]	; 0x30
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <std+0x68>)
 8002ec0:	6224      	str	r4, [r4, #32]
 8002ec2:	429c      	cmp	r4, r3
 8002ec4:	d006      	beq.n	8002ed4 <std+0x48>
 8002ec6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002eca:	4294      	cmp	r4, r2
 8002ecc:	d002      	beq.n	8002ed4 <std+0x48>
 8002ece:	33d0      	adds	r3, #208	; 0xd0
 8002ed0:	429c      	cmp	r4, r3
 8002ed2:	d105      	bne.n	8002ee0 <std+0x54>
 8002ed4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002edc:	f000 b96e 	b.w	80031bc <__retarget_lock_init_recursive>
 8002ee0:	bd10      	pop	{r4, pc}
 8002ee2:	bf00      	nop
 8002ee4:	08003021 	.word	0x08003021
 8002ee8:	08003043 	.word	0x08003043
 8002eec:	0800307b 	.word	0x0800307b
 8002ef0:	0800309f 	.word	0x0800309f
 8002ef4:	20000180 	.word	0x20000180

08002ef8 <stdio_exit_handler>:
 8002ef8:	4a02      	ldr	r2, [pc, #8]	; (8002f04 <stdio_exit_handler+0xc>)
 8002efa:	4903      	ldr	r1, [pc, #12]	; (8002f08 <stdio_exit_handler+0x10>)
 8002efc:	4803      	ldr	r0, [pc, #12]	; (8002f0c <stdio_exit_handler+0x14>)
 8002efe:	f000 b869 	b.w	8002fd4 <_fwalk_sglue>
 8002f02:	bf00      	nop
 8002f04:	2000000c 	.word	0x2000000c
 8002f08:	080034dd 	.word	0x080034dd
 8002f0c:	20000018 	.word	0x20000018

08002f10 <cleanup_stdio>:
 8002f10:	6841      	ldr	r1, [r0, #4]
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <cleanup_stdio+0x34>)
 8002f14:	4299      	cmp	r1, r3
 8002f16:	b510      	push	{r4, lr}
 8002f18:	4604      	mov	r4, r0
 8002f1a:	d001      	beq.n	8002f20 <cleanup_stdio+0x10>
 8002f1c:	f000 fade 	bl	80034dc <_fflush_r>
 8002f20:	68a1      	ldr	r1, [r4, #8]
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <cleanup_stdio+0x38>)
 8002f24:	4299      	cmp	r1, r3
 8002f26:	d002      	beq.n	8002f2e <cleanup_stdio+0x1e>
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f000 fad7 	bl	80034dc <_fflush_r>
 8002f2e:	68e1      	ldr	r1, [r4, #12]
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <cleanup_stdio+0x3c>)
 8002f32:	4299      	cmp	r1, r3
 8002f34:	d004      	beq.n	8002f40 <cleanup_stdio+0x30>
 8002f36:	4620      	mov	r0, r4
 8002f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f3c:	f000 bace 	b.w	80034dc <_fflush_r>
 8002f40:	bd10      	pop	{r4, pc}
 8002f42:	bf00      	nop
 8002f44:	20000180 	.word	0x20000180
 8002f48:	200001e8 	.word	0x200001e8
 8002f4c:	20000250 	.word	0x20000250

08002f50 <global_stdio_init.part.0>:
 8002f50:	b510      	push	{r4, lr}
 8002f52:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <global_stdio_init.part.0+0x30>)
 8002f54:	4c0b      	ldr	r4, [pc, #44]	; (8002f84 <global_stdio_init.part.0+0x34>)
 8002f56:	4a0c      	ldr	r2, [pc, #48]	; (8002f88 <global_stdio_init.part.0+0x38>)
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2104      	movs	r1, #4
 8002f60:	f7ff ff94 	bl	8002e8c <std>
 8002f64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002f68:	2201      	movs	r2, #1
 8002f6a:	2109      	movs	r1, #9
 8002f6c:	f7ff ff8e 	bl	8002e8c <std>
 8002f70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002f74:	2202      	movs	r2, #2
 8002f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f7a:	2112      	movs	r1, #18
 8002f7c:	f7ff bf86 	b.w	8002e8c <std>
 8002f80:	200002b8 	.word	0x200002b8
 8002f84:	20000180 	.word	0x20000180
 8002f88:	08002ef9 	.word	0x08002ef9

08002f8c <__sfp_lock_acquire>:
 8002f8c:	4801      	ldr	r0, [pc, #4]	; (8002f94 <__sfp_lock_acquire+0x8>)
 8002f8e:	f000 b916 	b.w	80031be <__retarget_lock_acquire_recursive>
 8002f92:	bf00      	nop
 8002f94:	200002c1 	.word	0x200002c1

08002f98 <__sfp_lock_release>:
 8002f98:	4801      	ldr	r0, [pc, #4]	; (8002fa0 <__sfp_lock_release+0x8>)
 8002f9a:	f000 b911 	b.w	80031c0 <__retarget_lock_release_recursive>
 8002f9e:	bf00      	nop
 8002fa0:	200002c1 	.word	0x200002c1

08002fa4 <__sinit>:
 8002fa4:	b510      	push	{r4, lr}
 8002fa6:	4604      	mov	r4, r0
 8002fa8:	f7ff fff0 	bl	8002f8c <__sfp_lock_acquire>
 8002fac:	6a23      	ldr	r3, [r4, #32]
 8002fae:	b11b      	cbz	r3, 8002fb8 <__sinit+0x14>
 8002fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fb4:	f7ff bff0 	b.w	8002f98 <__sfp_lock_release>
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <__sinit+0x28>)
 8002fba:	6223      	str	r3, [r4, #32]
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <__sinit+0x2c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f5      	bne.n	8002fb0 <__sinit+0xc>
 8002fc4:	f7ff ffc4 	bl	8002f50 <global_stdio_init.part.0>
 8002fc8:	e7f2      	b.n	8002fb0 <__sinit+0xc>
 8002fca:	bf00      	nop
 8002fcc:	08002f11 	.word	0x08002f11
 8002fd0:	200002b8 	.word	0x200002b8

08002fd4 <_fwalk_sglue>:
 8002fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fd8:	4607      	mov	r7, r0
 8002fda:	4688      	mov	r8, r1
 8002fdc:	4614      	mov	r4, r2
 8002fde:	2600      	movs	r6, #0
 8002fe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fe4:	f1b9 0901 	subs.w	r9, r9, #1
 8002fe8:	d505      	bpl.n	8002ff6 <_fwalk_sglue+0x22>
 8002fea:	6824      	ldr	r4, [r4, #0]
 8002fec:	2c00      	cmp	r4, #0
 8002fee:	d1f7      	bne.n	8002fe0 <_fwalk_sglue+0xc>
 8002ff0:	4630      	mov	r0, r6
 8002ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ff6:	89ab      	ldrh	r3, [r5, #12]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d907      	bls.n	800300c <_fwalk_sglue+0x38>
 8002ffc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003000:	3301      	adds	r3, #1
 8003002:	d003      	beq.n	800300c <_fwalk_sglue+0x38>
 8003004:	4629      	mov	r1, r5
 8003006:	4638      	mov	r0, r7
 8003008:	47c0      	blx	r8
 800300a:	4306      	orrs	r6, r0
 800300c:	3568      	adds	r5, #104	; 0x68
 800300e:	e7e9      	b.n	8002fe4 <_fwalk_sglue+0x10>

08003010 <putchar>:
 8003010:	4b02      	ldr	r3, [pc, #8]	; (800301c <putchar+0xc>)
 8003012:	4601      	mov	r1, r0
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	6882      	ldr	r2, [r0, #8]
 8003018:	f000 ba88 	b.w	800352c <_putc_r>
 800301c:	20000064 	.word	0x20000064

08003020 <__sread>:
 8003020:	b510      	push	{r4, lr}
 8003022:	460c      	mov	r4, r1
 8003024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003028:	f000 f87a 	bl	8003120 <_read_r>
 800302c:	2800      	cmp	r0, #0
 800302e:	bfab      	itete	ge
 8003030:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003032:	89a3      	ldrhlt	r3, [r4, #12]
 8003034:	181b      	addge	r3, r3, r0
 8003036:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800303a:	bfac      	ite	ge
 800303c:	6563      	strge	r3, [r4, #84]	; 0x54
 800303e:	81a3      	strhlt	r3, [r4, #12]
 8003040:	bd10      	pop	{r4, pc}

08003042 <__swrite>:
 8003042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003046:	461f      	mov	r7, r3
 8003048:	898b      	ldrh	r3, [r1, #12]
 800304a:	05db      	lsls	r3, r3, #23
 800304c:	4605      	mov	r5, r0
 800304e:	460c      	mov	r4, r1
 8003050:	4616      	mov	r6, r2
 8003052:	d505      	bpl.n	8003060 <__swrite+0x1e>
 8003054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003058:	2302      	movs	r3, #2
 800305a:	2200      	movs	r2, #0
 800305c:	f000 f84e 	bl	80030fc <_lseek_r>
 8003060:	89a3      	ldrh	r3, [r4, #12]
 8003062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800306a:	81a3      	strh	r3, [r4, #12]
 800306c:	4632      	mov	r2, r6
 800306e:	463b      	mov	r3, r7
 8003070:	4628      	mov	r0, r5
 8003072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003076:	f000 b865 	b.w	8003144 <_write_r>

0800307a <__sseek>:
 800307a:	b510      	push	{r4, lr}
 800307c:	460c      	mov	r4, r1
 800307e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003082:	f000 f83b 	bl	80030fc <_lseek_r>
 8003086:	1c43      	adds	r3, r0, #1
 8003088:	89a3      	ldrh	r3, [r4, #12]
 800308a:	bf15      	itete	ne
 800308c:	6560      	strne	r0, [r4, #84]	; 0x54
 800308e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003092:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003096:	81a3      	strheq	r3, [r4, #12]
 8003098:	bf18      	it	ne
 800309a:	81a3      	strhne	r3, [r4, #12]
 800309c:	bd10      	pop	{r4, pc}

0800309e <__sclose>:
 800309e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030a2:	f000 b81b 	b.w	80030dc <_close_r>

080030a6 <memset>:
 80030a6:	4402      	add	r2, r0
 80030a8:	4603      	mov	r3, r0
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d100      	bne.n	80030b0 <memset+0xa>
 80030ae:	4770      	bx	lr
 80030b0:	f803 1b01 	strb.w	r1, [r3], #1
 80030b4:	e7f9      	b.n	80030aa <memset+0x4>

080030b6 <strncpy>:
 80030b6:	b510      	push	{r4, lr}
 80030b8:	3901      	subs	r1, #1
 80030ba:	4603      	mov	r3, r0
 80030bc:	b132      	cbz	r2, 80030cc <strncpy+0x16>
 80030be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80030c2:	f803 4b01 	strb.w	r4, [r3], #1
 80030c6:	3a01      	subs	r2, #1
 80030c8:	2c00      	cmp	r4, #0
 80030ca:	d1f7      	bne.n	80030bc <strncpy+0x6>
 80030cc:	441a      	add	r2, r3
 80030ce:	2100      	movs	r1, #0
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d100      	bne.n	80030d6 <strncpy+0x20>
 80030d4:	bd10      	pop	{r4, pc}
 80030d6:	f803 1b01 	strb.w	r1, [r3], #1
 80030da:	e7f9      	b.n	80030d0 <strncpy+0x1a>

080030dc <_close_r>:
 80030dc:	b538      	push	{r3, r4, r5, lr}
 80030de:	4d06      	ldr	r5, [pc, #24]	; (80030f8 <_close_r+0x1c>)
 80030e0:	2300      	movs	r3, #0
 80030e2:	4604      	mov	r4, r0
 80030e4:	4608      	mov	r0, r1
 80030e6:	602b      	str	r3, [r5, #0]
 80030e8:	f7fd fdf7 	bl	8000cda <_close>
 80030ec:	1c43      	adds	r3, r0, #1
 80030ee:	d102      	bne.n	80030f6 <_close_r+0x1a>
 80030f0:	682b      	ldr	r3, [r5, #0]
 80030f2:	b103      	cbz	r3, 80030f6 <_close_r+0x1a>
 80030f4:	6023      	str	r3, [r4, #0]
 80030f6:	bd38      	pop	{r3, r4, r5, pc}
 80030f8:	200002bc 	.word	0x200002bc

080030fc <_lseek_r>:
 80030fc:	b538      	push	{r3, r4, r5, lr}
 80030fe:	4d07      	ldr	r5, [pc, #28]	; (800311c <_lseek_r+0x20>)
 8003100:	4604      	mov	r4, r0
 8003102:	4608      	mov	r0, r1
 8003104:	4611      	mov	r1, r2
 8003106:	2200      	movs	r2, #0
 8003108:	602a      	str	r2, [r5, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	f7fd fe0c 	bl	8000d28 <_lseek>
 8003110:	1c43      	adds	r3, r0, #1
 8003112:	d102      	bne.n	800311a <_lseek_r+0x1e>
 8003114:	682b      	ldr	r3, [r5, #0]
 8003116:	b103      	cbz	r3, 800311a <_lseek_r+0x1e>
 8003118:	6023      	str	r3, [r4, #0]
 800311a:	bd38      	pop	{r3, r4, r5, pc}
 800311c:	200002bc 	.word	0x200002bc

08003120 <_read_r>:
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	4d07      	ldr	r5, [pc, #28]	; (8003140 <_read_r+0x20>)
 8003124:	4604      	mov	r4, r0
 8003126:	4608      	mov	r0, r1
 8003128:	4611      	mov	r1, r2
 800312a:	2200      	movs	r2, #0
 800312c:	602a      	str	r2, [r5, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	f7fd fd9a 	bl	8000c68 <_read>
 8003134:	1c43      	adds	r3, r0, #1
 8003136:	d102      	bne.n	800313e <_read_r+0x1e>
 8003138:	682b      	ldr	r3, [r5, #0]
 800313a:	b103      	cbz	r3, 800313e <_read_r+0x1e>
 800313c:	6023      	str	r3, [r4, #0]
 800313e:	bd38      	pop	{r3, r4, r5, pc}
 8003140:	200002bc 	.word	0x200002bc

08003144 <_write_r>:
 8003144:	b538      	push	{r3, r4, r5, lr}
 8003146:	4d07      	ldr	r5, [pc, #28]	; (8003164 <_write_r+0x20>)
 8003148:	4604      	mov	r4, r0
 800314a:	4608      	mov	r0, r1
 800314c:	4611      	mov	r1, r2
 800314e:	2200      	movs	r2, #0
 8003150:	602a      	str	r2, [r5, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	f7fd fda5 	bl	8000ca2 <_write>
 8003158:	1c43      	adds	r3, r0, #1
 800315a:	d102      	bne.n	8003162 <_write_r+0x1e>
 800315c:	682b      	ldr	r3, [r5, #0]
 800315e:	b103      	cbz	r3, 8003162 <_write_r+0x1e>
 8003160:	6023      	str	r3, [r4, #0]
 8003162:	bd38      	pop	{r3, r4, r5, pc}
 8003164:	200002bc 	.word	0x200002bc

08003168 <__errno>:
 8003168:	4b01      	ldr	r3, [pc, #4]	; (8003170 <__errno+0x8>)
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000064 	.word	0x20000064

08003174 <__libc_init_array>:
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	4d0d      	ldr	r5, [pc, #52]	; (80031ac <__libc_init_array+0x38>)
 8003178:	4c0d      	ldr	r4, [pc, #52]	; (80031b0 <__libc_init_array+0x3c>)
 800317a:	1b64      	subs	r4, r4, r5
 800317c:	10a4      	asrs	r4, r4, #2
 800317e:	2600      	movs	r6, #0
 8003180:	42a6      	cmp	r6, r4
 8003182:	d109      	bne.n	8003198 <__libc_init_array+0x24>
 8003184:	4d0b      	ldr	r5, [pc, #44]	; (80031b4 <__libc_init_array+0x40>)
 8003186:	4c0c      	ldr	r4, [pc, #48]	; (80031b8 <__libc_init_array+0x44>)
 8003188:	f000 fb2e 	bl	80037e8 <_init>
 800318c:	1b64      	subs	r4, r4, r5
 800318e:	10a4      	asrs	r4, r4, #2
 8003190:	2600      	movs	r6, #0
 8003192:	42a6      	cmp	r6, r4
 8003194:	d105      	bne.n	80031a2 <__libc_init_array+0x2e>
 8003196:	bd70      	pop	{r4, r5, r6, pc}
 8003198:	f855 3b04 	ldr.w	r3, [r5], #4
 800319c:	4798      	blx	r3
 800319e:	3601      	adds	r6, #1
 80031a0:	e7ee      	b.n	8003180 <__libc_init_array+0xc>
 80031a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031a6:	4798      	blx	r3
 80031a8:	3601      	adds	r6, #1
 80031aa:	e7f2      	b.n	8003192 <__libc_init_array+0x1e>
 80031ac:	080039c0 	.word	0x080039c0
 80031b0:	080039c0 	.word	0x080039c0
 80031b4:	080039c0 	.word	0x080039c0
 80031b8:	080039c4 	.word	0x080039c4

080031bc <__retarget_lock_init_recursive>:
 80031bc:	4770      	bx	lr

080031be <__retarget_lock_acquire_recursive>:
 80031be:	4770      	bx	lr

080031c0 <__retarget_lock_release_recursive>:
 80031c0:	4770      	bx	lr

080031c2 <memcpy>:
 80031c2:	440a      	add	r2, r1
 80031c4:	4291      	cmp	r1, r2
 80031c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80031ca:	d100      	bne.n	80031ce <memcpy+0xc>
 80031cc:	4770      	bx	lr
 80031ce:	b510      	push	{r4, lr}
 80031d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031d8:	4291      	cmp	r1, r2
 80031da:	d1f9      	bne.n	80031d0 <memcpy+0xe>
 80031dc:	bd10      	pop	{r4, pc}
	...

080031e0 <_free_r>:
 80031e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80031e2:	2900      	cmp	r1, #0
 80031e4:	d044      	beq.n	8003270 <_free_r+0x90>
 80031e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031ea:	9001      	str	r0, [sp, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f1a1 0404 	sub.w	r4, r1, #4
 80031f2:	bfb8      	it	lt
 80031f4:	18e4      	addlt	r4, r4, r3
 80031f6:	f000 f8df 	bl	80033b8 <__malloc_lock>
 80031fa:	4a1e      	ldr	r2, [pc, #120]	; (8003274 <_free_r+0x94>)
 80031fc:	9801      	ldr	r0, [sp, #4]
 80031fe:	6813      	ldr	r3, [r2, #0]
 8003200:	b933      	cbnz	r3, 8003210 <_free_r+0x30>
 8003202:	6063      	str	r3, [r4, #4]
 8003204:	6014      	str	r4, [r2, #0]
 8003206:	b003      	add	sp, #12
 8003208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800320c:	f000 b8da 	b.w	80033c4 <__malloc_unlock>
 8003210:	42a3      	cmp	r3, r4
 8003212:	d908      	bls.n	8003226 <_free_r+0x46>
 8003214:	6825      	ldr	r5, [r4, #0]
 8003216:	1961      	adds	r1, r4, r5
 8003218:	428b      	cmp	r3, r1
 800321a:	bf01      	itttt	eq
 800321c:	6819      	ldreq	r1, [r3, #0]
 800321e:	685b      	ldreq	r3, [r3, #4]
 8003220:	1949      	addeq	r1, r1, r5
 8003222:	6021      	streq	r1, [r4, #0]
 8003224:	e7ed      	b.n	8003202 <_free_r+0x22>
 8003226:	461a      	mov	r2, r3
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	b10b      	cbz	r3, 8003230 <_free_r+0x50>
 800322c:	42a3      	cmp	r3, r4
 800322e:	d9fa      	bls.n	8003226 <_free_r+0x46>
 8003230:	6811      	ldr	r1, [r2, #0]
 8003232:	1855      	adds	r5, r2, r1
 8003234:	42a5      	cmp	r5, r4
 8003236:	d10b      	bne.n	8003250 <_free_r+0x70>
 8003238:	6824      	ldr	r4, [r4, #0]
 800323a:	4421      	add	r1, r4
 800323c:	1854      	adds	r4, r2, r1
 800323e:	42a3      	cmp	r3, r4
 8003240:	6011      	str	r1, [r2, #0]
 8003242:	d1e0      	bne.n	8003206 <_free_r+0x26>
 8003244:	681c      	ldr	r4, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	6053      	str	r3, [r2, #4]
 800324a:	440c      	add	r4, r1
 800324c:	6014      	str	r4, [r2, #0]
 800324e:	e7da      	b.n	8003206 <_free_r+0x26>
 8003250:	d902      	bls.n	8003258 <_free_r+0x78>
 8003252:	230c      	movs	r3, #12
 8003254:	6003      	str	r3, [r0, #0]
 8003256:	e7d6      	b.n	8003206 <_free_r+0x26>
 8003258:	6825      	ldr	r5, [r4, #0]
 800325a:	1961      	adds	r1, r4, r5
 800325c:	428b      	cmp	r3, r1
 800325e:	bf04      	itt	eq
 8003260:	6819      	ldreq	r1, [r3, #0]
 8003262:	685b      	ldreq	r3, [r3, #4]
 8003264:	6063      	str	r3, [r4, #4]
 8003266:	bf04      	itt	eq
 8003268:	1949      	addeq	r1, r1, r5
 800326a:	6021      	streq	r1, [r4, #0]
 800326c:	6054      	str	r4, [r2, #4]
 800326e:	e7ca      	b.n	8003206 <_free_r+0x26>
 8003270:	b003      	add	sp, #12
 8003272:	bd30      	pop	{r4, r5, pc}
 8003274:	200002c4 	.word	0x200002c4

08003278 <sbrk_aligned>:
 8003278:	b570      	push	{r4, r5, r6, lr}
 800327a:	4e0e      	ldr	r6, [pc, #56]	; (80032b4 <sbrk_aligned+0x3c>)
 800327c:	460c      	mov	r4, r1
 800327e:	6831      	ldr	r1, [r6, #0]
 8003280:	4605      	mov	r5, r0
 8003282:	b911      	cbnz	r1, 800328a <sbrk_aligned+0x12>
 8003284:	f000 fa1c 	bl	80036c0 <_sbrk_r>
 8003288:	6030      	str	r0, [r6, #0]
 800328a:	4621      	mov	r1, r4
 800328c:	4628      	mov	r0, r5
 800328e:	f000 fa17 	bl	80036c0 <_sbrk_r>
 8003292:	1c43      	adds	r3, r0, #1
 8003294:	d00a      	beq.n	80032ac <sbrk_aligned+0x34>
 8003296:	1cc4      	adds	r4, r0, #3
 8003298:	f024 0403 	bic.w	r4, r4, #3
 800329c:	42a0      	cmp	r0, r4
 800329e:	d007      	beq.n	80032b0 <sbrk_aligned+0x38>
 80032a0:	1a21      	subs	r1, r4, r0
 80032a2:	4628      	mov	r0, r5
 80032a4:	f000 fa0c 	bl	80036c0 <_sbrk_r>
 80032a8:	3001      	adds	r0, #1
 80032aa:	d101      	bne.n	80032b0 <sbrk_aligned+0x38>
 80032ac:	f04f 34ff 	mov.w	r4, #4294967295
 80032b0:	4620      	mov	r0, r4
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	200002c8 	.word	0x200002c8

080032b8 <_malloc_r>:
 80032b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032bc:	1ccd      	adds	r5, r1, #3
 80032be:	f025 0503 	bic.w	r5, r5, #3
 80032c2:	3508      	adds	r5, #8
 80032c4:	2d0c      	cmp	r5, #12
 80032c6:	bf38      	it	cc
 80032c8:	250c      	movcc	r5, #12
 80032ca:	2d00      	cmp	r5, #0
 80032cc:	4607      	mov	r7, r0
 80032ce:	db01      	blt.n	80032d4 <_malloc_r+0x1c>
 80032d0:	42a9      	cmp	r1, r5
 80032d2:	d905      	bls.n	80032e0 <_malloc_r+0x28>
 80032d4:	230c      	movs	r3, #12
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	2600      	movs	r6, #0
 80032da:	4630      	mov	r0, r6
 80032dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80033b4 <_malloc_r+0xfc>
 80032e4:	f000 f868 	bl	80033b8 <__malloc_lock>
 80032e8:	f8d8 3000 	ldr.w	r3, [r8]
 80032ec:	461c      	mov	r4, r3
 80032ee:	bb5c      	cbnz	r4, 8003348 <_malloc_r+0x90>
 80032f0:	4629      	mov	r1, r5
 80032f2:	4638      	mov	r0, r7
 80032f4:	f7ff ffc0 	bl	8003278 <sbrk_aligned>
 80032f8:	1c43      	adds	r3, r0, #1
 80032fa:	4604      	mov	r4, r0
 80032fc:	d155      	bne.n	80033aa <_malloc_r+0xf2>
 80032fe:	f8d8 4000 	ldr.w	r4, [r8]
 8003302:	4626      	mov	r6, r4
 8003304:	2e00      	cmp	r6, #0
 8003306:	d145      	bne.n	8003394 <_malloc_r+0xdc>
 8003308:	2c00      	cmp	r4, #0
 800330a:	d048      	beq.n	800339e <_malloc_r+0xe6>
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	4631      	mov	r1, r6
 8003310:	4638      	mov	r0, r7
 8003312:	eb04 0903 	add.w	r9, r4, r3
 8003316:	f000 f9d3 	bl	80036c0 <_sbrk_r>
 800331a:	4581      	cmp	r9, r0
 800331c:	d13f      	bne.n	800339e <_malloc_r+0xe6>
 800331e:	6821      	ldr	r1, [r4, #0]
 8003320:	1a6d      	subs	r5, r5, r1
 8003322:	4629      	mov	r1, r5
 8003324:	4638      	mov	r0, r7
 8003326:	f7ff ffa7 	bl	8003278 <sbrk_aligned>
 800332a:	3001      	adds	r0, #1
 800332c:	d037      	beq.n	800339e <_malloc_r+0xe6>
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	442b      	add	r3, r5
 8003332:	6023      	str	r3, [r4, #0]
 8003334:	f8d8 3000 	ldr.w	r3, [r8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d038      	beq.n	80033ae <_malloc_r+0xf6>
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	42a2      	cmp	r2, r4
 8003340:	d12b      	bne.n	800339a <_malloc_r+0xe2>
 8003342:	2200      	movs	r2, #0
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	e00f      	b.n	8003368 <_malloc_r+0xb0>
 8003348:	6822      	ldr	r2, [r4, #0]
 800334a:	1b52      	subs	r2, r2, r5
 800334c:	d41f      	bmi.n	800338e <_malloc_r+0xd6>
 800334e:	2a0b      	cmp	r2, #11
 8003350:	d917      	bls.n	8003382 <_malloc_r+0xca>
 8003352:	1961      	adds	r1, r4, r5
 8003354:	42a3      	cmp	r3, r4
 8003356:	6025      	str	r5, [r4, #0]
 8003358:	bf18      	it	ne
 800335a:	6059      	strne	r1, [r3, #4]
 800335c:	6863      	ldr	r3, [r4, #4]
 800335e:	bf08      	it	eq
 8003360:	f8c8 1000 	streq.w	r1, [r8]
 8003364:	5162      	str	r2, [r4, r5]
 8003366:	604b      	str	r3, [r1, #4]
 8003368:	4638      	mov	r0, r7
 800336a:	f104 060b 	add.w	r6, r4, #11
 800336e:	f000 f829 	bl	80033c4 <__malloc_unlock>
 8003372:	f026 0607 	bic.w	r6, r6, #7
 8003376:	1d23      	adds	r3, r4, #4
 8003378:	1af2      	subs	r2, r6, r3
 800337a:	d0ae      	beq.n	80032da <_malloc_r+0x22>
 800337c:	1b9b      	subs	r3, r3, r6
 800337e:	50a3      	str	r3, [r4, r2]
 8003380:	e7ab      	b.n	80032da <_malloc_r+0x22>
 8003382:	42a3      	cmp	r3, r4
 8003384:	6862      	ldr	r2, [r4, #4]
 8003386:	d1dd      	bne.n	8003344 <_malloc_r+0x8c>
 8003388:	f8c8 2000 	str.w	r2, [r8]
 800338c:	e7ec      	b.n	8003368 <_malloc_r+0xb0>
 800338e:	4623      	mov	r3, r4
 8003390:	6864      	ldr	r4, [r4, #4]
 8003392:	e7ac      	b.n	80032ee <_malloc_r+0x36>
 8003394:	4634      	mov	r4, r6
 8003396:	6876      	ldr	r6, [r6, #4]
 8003398:	e7b4      	b.n	8003304 <_malloc_r+0x4c>
 800339a:	4613      	mov	r3, r2
 800339c:	e7cc      	b.n	8003338 <_malloc_r+0x80>
 800339e:	230c      	movs	r3, #12
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	4638      	mov	r0, r7
 80033a4:	f000 f80e 	bl	80033c4 <__malloc_unlock>
 80033a8:	e797      	b.n	80032da <_malloc_r+0x22>
 80033aa:	6025      	str	r5, [r4, #0]
 80033ac:	e7dc      	b.n	8003368 <_malloc_r+0xb0>
 80033ae:	605b      	str	r3, [r3, #4]
 80033b0:	deff      	udf	#255	; 0xff
 80033b2:	bf00      	nop
 80033b4:	200002c4 	.word	0x200002c4

080033b8 <__malloc_lock>:
 80033b8:	4801      	ldr	r0, [pc, #4]	; (80033c0 <__malloc_lock+0x8>)
 80033ba:	f7ff bf00 	b.w	80031be <__retarget_lock_acquire_recursive>
 80033be:	bf00      	nop
 80033c0:	200002c0 	.word	0x200002c0

080033c4 <__malloc_unlock>:
 80033c4:	4801      	ldr	r0, [pc, #4]	; (80033cc <__malloc_unlock+0x8>)
 80033c6:	f7ff befb 	b.w	80031c0 <__retarget_lock_release_recursive>
 80033ca:	bf00      	nop
 80033cc:	200002c0 	.word	0x200002c0

080033d0 <__sflush_r>:
 80033d0:	898a      	ldrh	r2, [r1, #12]
 80033d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d6:	4605      	mov	r5, r0
 80033d8:	0710      	lsls	r0, r2, #28
 80033da:	460c      	mov	r4, r1
 80033dc:	d458      	bmi.n	8003490 <__sflush_r+0xc0>
 80033de:	684b      	ldr	r3, [r1, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	dc05      	bgt.n	80033f0 <__sflush_r+0x20>
 80033e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	dc02      	bgt.n	80033f0 <__sflush_r+0x20>
 80033ea:	2000      	movs	r0, #0
 80033ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033f2:	2e00      	cmp	r6, #0
 80033f4:	d0f9      	beq.n	80033ea <__sflush_r+0x1a>
 80033f6:	2300      	movs	r3, #0
 80033f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033fc:	682f      	ldr	r7, [r5, #0]
 80033fe:	6a21      	ldr	r1, [r4, #32]
 8003400:	602b      	str	r3, [r5, #0]
 8003402:	d032      	beq.n	800346a <__sflush_r+0x9a>
 8003404:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003406:	89a3      	ldrh	r3, [r4, #12]
 8003408:	075a      	lsls	r2, r3, #29
 800340a:	d505      	bpl.n	8003418 <__sflush_r+0x48>
 800340c:	6863      	ldr	r3, [r4, #4]
 800340e:	1ac0      	subs	r0, r0, r3
 8003410:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003412:	b10b      	cbz	r3, 8003418 <__sflush_r+0x48>
 8003414:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003416:	1ac0      	subs	r0, r0, r3
 8003418:	2300      	movs	r3, #0
 800341a:	4602      	mov	r2, r0
 800341c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800341e:	6a21      	ldr	r1, [r4, #32]
 8003420:	4628      	mov	r0, r5
 8003422:	47b0      	blx	r6
 8003424:	1c43      	adds	r3, r0, #1
 8003426:	89a3      	ldrh	r3, [r4, #12]
 8003428:	d106      	bne.n	8003438 <__sflush_r+0x68>
 800342a:	6829      	ldr	r1, [r5, #0]
 800342c:	291d      	cmp	r1, #29
 800342e:	d82b      	bhi.n	8003488 <__sflush_r+0xb8>
 8003430:	4a29      	ldr	r2, [pc, #164]	; (80034d8 <__sflush_r+0x108>)
 8003432:	410a      	asrs	r2, r1
 8003434:	07d6      	lsls	r6, r2, #31
 8003436:	d427      	bmi.n	8003488 <__sflush_r+0xb8>
 8003438:	2200      	movs	r2, #0
 800343a:	6062      	str	r2, [r4, #4]
 800343c:	04d9      	lsls	r1, r3, #19
 800343e:	6922      	ldr	r2, [r4, #16]
 8003440:	6022      	str	r2, [r4, #0]
 8003442:	d504      	bpl.n	800344e <__sflush_r+0x7e>
 8003444:	1c42      	adds	r2, r0, #1
 8003446:	d101      	bne.n	800344c <__sflush_r+0x7c>
 8003448:	682b      	ldr	r3, [r5, #0]
 800344a:	b903      	cbnz	r3, 800344e <__sflush_r+0x7e>
 800344c:	6560      	str	r0, [r4, #84]	; 0x54
 800344e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003450:	602f      	str	r7, [r5, #0]
 8003452:	2900      	cmp	r1, #0
 8003454:	d0c9      	beq.n	80033ea <__sflush_r+0x1a>
 8003456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800345a:	4299      	cmp	r1, r3
 800345c:	d002      	beq.n	8003464 <__sflush_r+0x94>
 800345e:	4628      	mov	r0, r5
 8003460:	f7ff febe 	bl	80031e0 <_free_r>
 8003464:	2000      	movs	r0, #0
 8003466:	6360      	str	r0, [r4, #52]	; 0x34
 8003468:	e7c0      	b.n	80033ec <__sflush_r+0x1c>
 800346a:	2301      	movs	r3, #1
 800346c:	4628      	mov	r0, r5
 800346e:	47b0      	blx	r6
 8003470:	1c41      	adds	r1, r0, #1
 8003472:	d1c8      	bne.n	8003406 <__sflush_r+0x36>
 8003474:	682b      	ldr	r3, [r5, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0c5      	beq.n	8003406 <__sflush_r+0x36>
 800347a:	2b1d      	cmp	r3, #29
 800347c:	d001      	beq.n	8003482 <__sflush_r+0xb2>
 800347e:	2b16      	cmp	r3, #22
 8003480:	d101      	bne.n	8003486 <__sflush_r+0xb6>
 8003482:	602f      	str	r7, [r5, #0]
 8003484:	e7b1      	b.n	80033ea <__sflush_r+0x1a>
 8003486:	89a3      	ldrh	r3, [r4, #12]
 8003488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800348c:	81a3      	strh	r3, [r4, #12]
 800348e:	e7ad      	b.n	80033ec <__sflush_r+0x1c>
 8003490:	690f      	ldr	r7, [r1, #16]
 8003492:	2f00      	cmp	r7, #0
 8003494:	d0a9      	beq.n	80033ea <__sflush_r+0x1a>
 8003496:	0793      	lsls	r3, r2, #30
 8003498:	680e      	ldr	r6, [r1, #0]
 800349a:	bf08      	it	eq
 800349c:	694b      	ldreq	r3, [r1, #20]
 800349e:	600f      	str	r7, [r1, #0]
 80034a0:	bf18      	it	ne
 80034a2:	2300      	movne	r3, #0
 80034a4:	eba6 0807 	sub.w	r8, r6, r7
 80034a8:	608b      	str	r3, [r1, #8]
 80034aa:	f1b8 0f00 	cmp.w	r8, #0
 80034ae:	dd9c      	ble.n	80033ea <__sflush_r+0x1a>
 80034b0:	6a21      	ldr	r1, [r4, #32]
 80034b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80034b4:	4643      	mov	r3, r8
 80034b6:	463a      	mov	r2, r7
 80034b8:	4628      	mov	r0, r5
 80034ba:	47b0      	blx	r6
 80034bc:	2800      	cmp	r0, #0
 80034be:	dc06      	bgt.n	80034ce <__sflush_r+0xfe>
 80034c0:	89a3      	ldrh	r3, [r4, #12]
 80034c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034c6:	81a3      	strh	r3, [r4, #12]
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295
 80034cc:	e78e      	b.n	80033ec <__sflush_r+0x1c>
 80034ce:	4407      	add	r7, r0
 80034d0:	eba8 0800 	sub.w	r8, r8, r0
 80034d4:	e7e9      	b.n	80034aa <__sflush_r+0xda>
 80034d6:	bf00      	nop
 80034d8:	dfbffffe 	.word	0xdfbffffe

080034dc <_fflush_r>:
 80034dc:	b538      	push	{r3, r4, r5, lr}
 80034de:	690b      	ldr	r3, [r1, #16]
 80034e0:	4605      	mov	r5, r0
 80034e2:	460c      	mov	r4, r1
 80034e4:	b913      	cbnz	r3, 80034ec <_fflush_r+0x10>
 80034e6:	2500      	movs	r5, #0
 80034e8:	4628      	mov	r0, r5
 80034ea:	bd38      	pop	{r3, r4, r5, pc}
 80034ec:	b118      	cbz	r0, 80034f6 <_fflush_r+0x1a>
 80034ee:	6a03      	ldr	r3, [r0, #32]
 80034f0:	b90b      	cbnz	r3, 80034f6 <_fflush_r+0x1a>
 80034f2:	f7ff fd57 	bl	8002fa4 <__sinit>
 80034f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f3      	beq.n	80034e6 <_fflush_r+0xa>
 80034fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003500:	07d0      	lsls	r0, r2, #31
 8003502:	d404      	bmi.n	800350e <_fflush_r+0x32>
 8003504:	0599      	lsls	r1, r3, #22
 8003506:	d402      	bmi.n	800350e <_fflush_r+0x32>
 8003508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800350a:	f7ff fe58 	bl	80031be <__retarget_lock_acquire_recursive>
 800350e:	4628      	mov	r0, r5
 8003510:	4621      	mov	r1, r4
 8003512:	f7ff ff5d 	bl	80033d0 <__sflush_r>
 8003516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003518:	07da      	lsls	r2, r3, #31
 800351a:	4605      	mov	r5, r0
 800351c:	d4e4      	bmi.n	80034e8 <_fflush_r+0xc>
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	059b      	lsls	r3, r3, #22
 8003522:	d4e1      	bmi.n	80034e8 <_fflush_r+0xc>
 8003524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003526:	f7ff fe4b 	bl	80031c0 <__retarget_lock_release_recursive>
 800352a:	e7dd      	b.n	80034e8 <_fflush_r+0xc>

0800352c <_putc_r>:
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	460d      	mov	r5, r1
 8003530:	4614      	mov	r4, r2
 8003532:	4606      	mov	r6, r0
 8003534:	b118      	cbz	r0, 800353e <_putc_r+0x12>
 8003536:	6a03      	ldr	r3, [r0, #32]
 8003538:	b90b      	cbnz	r3, 800353e <_putc_r+0x12>
 800353a:	f7ff fd33 	bl	8002fa4 <__sinit>
 800353e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003540:	07d8      	lsls	r0, r3, #31
 8003542:	d405      	bmi.n	8003550 <_putc_r+0x24>
 8003544:	89a3      	ldrh	r3, [r4, #12]
 8003546:	0599      	lsls	r1, r3, #22
 8003548:	d402      	bmi.n	8003550 <_putc_r+0x24>
 800354a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800354c:	f7ff fe37 	bl	80031be <__retarget_lock_acquire_recursive>
 8003550:	68a3      	ldr	r3, [r4, #8]
 8003552:	3b01      	subs	r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	60a3      	str	r3, [r4, #8]
 8003558:	da05      	bge.n	8003566 <_putc_r+0x3a>
 800355a:	69a2      	ldr	r2, [r4, #24]
 800355c:	4293      	cmp	r3, r2
 800355e:	db12      	blt.n	8003586 <_putc_r+0x5a>
 8003560:	b2eb      	uxtb	r3, r5
 8003562:	2b0a      	cmp	r3, #10
 8003564:	d00f      	beq.n	8003586 <_putc_r+0x5a>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	6022      	str	r2, [r4, #0]
 800356c:	701d      	strb	r5, [r3, #0]
 800356e:	b2ed      	uxtb	r5, r5
 8003570:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003572:	07da      	lsls	r2, r3, #31
 8003574:	d405      	bmi.n	8003582 <_putc_r+0x56>
 8003576:	89a3      	ldrh	r3, [r4, #12]
 8003578:	059b      	lsls	r3, r3, #22
 800357a:	d402      	bmi.n	8003582 <_putc_r+0x56>
 800357c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800357e:	f7ff fe1f 	bl	80031c0 <__retarget_lock_release_recursive>
 8003582:	4628      	mov	r0, r5
 8003584:	bd70      	pop	{r4, r5, r6, pc}
 8003586:	4629      	mov	r1, r5
 8003588:	4622      	mov	r2, r4
 800358a:	4630      	mov	r0, r6
 800358c:	f000 f802 	bl	8003594 <__swbuf_r>
 8003590:	4605      	mov	r5, r0
 8003592:	e7ed      	b.n	8003570 <_putc_r+0x44>

08003594 <__swbuf_r>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	460e      	mov	r6, r1
 8003598:	4614      	mov	r4, r2
 800359a:	4605      	mov	r5, r0
 800359c:	b118      	cbz	r0, 80035a6 <__swbuf_r+0x12>
 800359e:	6a03      	ldr	r3, [r0, #32]
 80035a0:	b90b      	cbnz	r3, 80035a6 <__swbuf_r+0x12>
 80035a2:	f7ff fcff 	bl	8002fa4 <__sinit>
 80035a6:	69a3      	ldr	r3, [r4, #24]
 80035a8:	60a3      	str	r3, [r4, #8]
 80035aa:	89a3      	ldrh	r3, [r4, #12]
 80035ac:	071a      	lsls	r2, r3, #28
 80035ae:	d525      	bpl.n	80035fc <__swbuf_r+0x68>
 80035b0:	6923      	ldr	r3, [r4, #16]
 80035b2:	b31b      	cbz	r3, 80035fc <__swbuf_r+0x68>
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	6922      	ldr	r2, [r4, #16]
 80035b8:	1a98      	subs	r0, r3, r2
 80035ba:	6963      	ldr	r3, [r4, #20]
 80035bc:	b2f6      	uxtb	r6, r6
 80035be:	4283      	cmp	r3, r0
 80035c0:	4637      	mov	r7, r6
 80035c2:	dc04      	bgt.n	80035ce <__swbuf_r+0x3a>
 80035c4:	4621      	mov	r1, r4
 80035c6:	4628      	mov	r0, r5
 80035c8:	f7ff ff88 	bl	80034dc <_fflush_r>
 80035cc:	b9e0      	cbnz	r0, 8003608 <__swbuf_r+0x74>
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	60a3      	str	r3, [r4, #8]
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	6022      	str	r2, [r4, #0]
 80035da:	701e      	strb	r6, [r3, #0]
 80035dc:	6962      	ldr	r2, [r4, #20]
 80035de:	1c43      	adds	r3, r0, #1
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d004      	beq.n	80035ee <__swbuf_r+0x5a>
 80035e4:	89a3      	ldrh	r3, [r4, #12]
 80035e6:	07db      	lsls	r3, r3, #31
 80035e8:	d506      	bpl.n	80035f8 <__swbuf_r+0x64>
 80035ea:	2e0a      	cmp	r6, #10
 80035ec:	d104      	bne.n	80035f8 <__swbuf_r+0x64>
 80035ee:	4621      	mov	r1, r4
 80035f0:	4628      	mov	r0, r5
 80035f2:	f7ff ff73 	bl	80034dc <_fflush_r>
 80035f6:	b938      	cbnz	r0, 8003608 <__swbuf_r+0x74>
 80035f8:	4638      	mov	r0, r7
 80035fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035fc:	4621      	mov	r1, r4
 80035fe:	4628      	mov	r0, r5
 8003600:	f000 f806 	bl	8003610 <__swsetup_r>
 8003604:	2800      	cmp	r0, #0
 8003606:	d0d5      	beq.n	80035b4 <__swbuf_r+0x20>
 8003608:	f04f 37ff 	mov.w	r7, #4294967295
 800360c:	e7f4      	b.n	80035f8 <__swbuf_r+0x64>
	...

08003610 <__swsetup_r>:
 8003610:	b538      	push	{r3, r4, r5, lr}
 8003612:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <__swsetup_r+0xac>)
 8003614:	4605      	mov	r5, r0
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	460c      	mov	r4, r1
 800361a:	b118      	cbz	r0, 8003624 <__swsetup_r+0x14>
 800361c:	6a03      	ldr	r3, [r0, #32]
 800361e:	b90b      	cbnz	r3, 8003624 <__swsetup_r+0x14>
 8003620:	f7ff fcc0 	bl	8002fa4 <__sinit>
 8003624:	89a3      	ldrh	r3, [r4, #12]
 8003626:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800362a:	0718      	lsls	r0, r3, #28
 800362c:	d422      	bmi.n	8003674 <__swsetup_r+0x64>
 800362e:	06d9      	lsls	r1, r3, #27
 8003630:	d407      	bmi.n	8003642 <__swsetup_r+0x32>
 8003632:	2309      	movs	r3, #9
 8003634:	602b      	str	r3, [r5, #0]
 8003636:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800363a:	81a3      	strh	r3, [r4, #12]
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
 8003640:	e034      	b.n	80036ac <__swsetup_r+0x9c>
 8003642:	0758      	lsls	r0, r3, #29
 8003644:	d512      	bpl.n	800366c <__swsetup_r+0x5c>
 8003646:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003648:	b141      	cbz	r1, 800365c <__swsetup_r+0x4c>
 800364a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800364e:	4299      	cmp	r1, r3
 8003650:	d002      	beq.n	8003658 <__swsetup_r+0x48>
 8003652:	4628      	mov	r0, r5
 8003654:	f7ff fdc4 	bl	80031e0 <_free_r>
 8003658:	2300      	movs	r3, #0
 800365a:	6363      	str	r3, [r4, #52]	; 0x34
 800365c:	89a3      	ldrh	r3, [r4, #12]
 800365e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003662:	81a3      	strh	r3, [r4, #12]
 8003664:	2300      	movs	r3, #0
 8003666:	6063      	str	r3, [r4, #4]
 8003668:	6923      	ldr	r3, [r4, #16]
 800366a:	6023      	str	r3, [r4, #0]
 800366c:	89a3      	ldrh	r3, [r4, #12]
 800366e:	f043 0308 	orr.w	r3, r3, #8
 8003672:	81a3      	strh	r3, [r4, #12]
 8003674:	6923      	ldr	r3, [r4, #16]
 8003676:	b94b      	cbnz	r3, 800368c <__swsetup_r+0x7c>
 8003678:	89a3      	ldrh	r3, [r4, #12]
 800367a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800367e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003682:	d003      	beq.n	800368c <__swsetup_r+0x7c>
 8003684:	4621      	mov	r1, r4
 8003686:	4628      	mov	r0, r5
 8003688:	f000 f850 	bl	800372c <__smakebuf_r>
 800368c:	89a0      	ldrh	r0, [r4, #12]
 800368e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003692:	f010 0301 	ands.w	r3, r0, #1
 8003696:	d00a      	beq.n	80036ae <__swsetup_r+0x9e>
 8003698:	2300      	movs	r3, #0
 800369a:	60a3      	str	r3, [r4, #8]
 800369c:	6963      	ldr	r3, [r4, #20]
 800369e:	425b      	negs	r3, r3
 80036a0:	61a3      	str	r3, [r4, #24]
 80036a2:	6923      	ldr	r3, [r4, #16]
 80036a4:	b943      	cbnz	r3, 80036b8 <__swsetup_r+0xa8>
 80036a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036aa:	d1c4      	bne.n	8003636 <__swsetup_r+0x26>
 80036ac:	bd38      	pop	{r3, r4, r5, pc}
 80036ae:	0781      	lsls	r1, r0, #30
 80036b0:	bf58      	it	pl
 80036b2:	6963      	ldrpl	r3, [r4, #20]
 80036b4:	60a3      	str	r3, [r4, #8]
 80036b6:	e7f4      	b.n	80036a2 <__swsetup_r+0x92>
 80036b8:	2000      	movs	r0, #0
 80036ba:	e7f7      	b.n	80036ac <__swsetup_r+0x9c>
 80036bc:	20000064 	.word	0x20000064

080036c0 <_sbrk_r>:
 80036c0:	b538      	push	{r3, r4, r5, lr}
 80036c2:	4d06      	ldr	r5, [pc, #24]	; (80036dc <_sbrk_r+0x1c>)
 80036c4:	2300      	movs	r3, #0
 80036c6:	4604      	mov	r4, r0
 80036c8:	4608      	mov	r0, r1
 80036ca:	602b      	str	r3, [r5, #0]
 80036cc:	f7fd fb3a 	bl	8000d44 <_sbrk>
 80036d0:	1c43      	adds	r3, r0, #1
 80036d2:	d102      	bne.n	80036da <_sbrk_r+0x1a>
 80036d4:	682b      	ldr	r3, [r5, #0]
 80036d6:	b103      	cbz	r3, 80036da <_sbrk_r+0x1a>
 80036d8:	6023      	str	r3, [r4, #0]
 80036da:	bd38      	pop	{r3, r4, r5, pc}
 80036dc:	200002bc 	.word	0x200002bc

080036e0 <__swhatbuf_r>:
 80036e0:	b570      	push	{r4, r5, r6, lr}
 80036e2:	460c      	mov	r4, r1
 80036e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036e8:	2900      	cmp	r1, #0
 80036ea:	b096      	sub	sp, #88	; 0x58
 80036ec:	4615      	mov	r5, r2
 80036ee:	461e      	mov	r6, r3
 80036f0:	da0d      	bge.n	800370e <__swhatbuf_r+0x2e>
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80036f8:	f04f 0100 	mov.w	r1, #0
 80036fc:	bf0c      	ite	eq
 80036fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003702:	2340      	movne	r3, #64	; 0x40
 8003704:	2000      	movs	r0, #0
 8003706:	6031      	str	r1, [r6, #0]
 8003708:	602b      	str	r3, [r5, #0]
 800370a:	b016      	add	sp, #88	; 0x58
 800370c:	bd70      	pop	{r4, r5, r6, pc}
 800370e:	466a      	mov	r2, sp
 8003710:	f000 f848 	bl	80037a4 <_fstat_r>
 8003714:	2800      	cmp	r0, #0
 8003716:	dbec      	blt.n	80036f2 <__swhatbuf_r+0x12>
 8003718:	9901      	ldr	r1, [sp, #4]
 800371a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800371e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003722:	4259      	negs	r1, r3
 8003724:	4159      	adcs	r1, r3
 8003726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800372a:	e7eb      	b.n	8003704 <__swhatbuf_r+0x24>

0800372c <__smakebuf_r>:
 800372c:	898b      	ldrh	r3, [r1, #12]
 800372e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003730:	079d      	lsls	r5, r3, #30
 8003732:	4606      	mov	r6, r0
 8003734:	460c      	mov	r4, r1
 8003736:	d507      	bpl.n	8003748 <__smakebuf_r+0x1c>
 8003738:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800373c:	6023      	str	r3, [r4, #0]
 800373e:	6123      	str	r3, [r4, #16]
 8003740:	2301      	movs	r3, #1
 8003742:	6163      	str	r3, [r4, #20]
 8003744:	b002      	add	sp, #8
 8003746:	bd70      	pop	{r4, r5, r6, pc}
 8003748:	ab01      	add	r3, sp, #4
 800374a:	466a      	mov	r2, sp
 800374c:	f7ff ffc8 	bl	80036e0 <__swhatbuf_r>
 8003750:	9900      	ldr	r1, [sp, #0]
 8003752:	4605      	mov	r5, r0
 8003754:	4630      	mov	r0, r6
 8003756:	f7ff fdaf 	bl	80032b8 <_malloc_r>
 800375a:	b948      	cbnz	r0, 8003770 <__smakebuf_r+0x44>
 800375c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003760:	059a      	lsls	r2, r3, #22
 8003762:	d4ef      	bmi.n	8003744 <__smakebuf_r+0x18>
 8003764:	f023 0303 	bic.w	r3, r3, #3
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	81a3      	strh	r3, [r4, #12]
 800376e:	e7e3      	b.n	8003738 <__smakebuf_r+0xc>
 8003770:	89a3      	ldrh	r3, [r4, #12]
 8003772:	6020      	str	r0, [r4, #0]
 8003774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003778:	81a3      	strh	r3, [r4, #12]
 800377a:	9b00      	ldr	r3, [sp, #0]
 800377c:	6163      	str	r3, [r4, #20]
 800377e:	9b01      	ldr	r3, [sp, #4]
 8003780:	6120      	str	r0, [r4, #16]
 8003782:	b15b      	cbz	r3, 800379c <__smakebuf_r+0x70>
 8003784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003788:	4630      	mov	r0, r6
 800378a:	f000 f81d 	bl	80037c8 <_isatty_r>
 800378e:	b128      	cbz	r0, 800379c <__smakebuf_r+0x70>
 8003790:	89a3      	ldrh	r3, [r4, #12]
 8003792:	f023 0303 	bic.w	r3, r3, #3
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	81a3      	strh	r3, [r4, #12]
 800379c:	89a3      	ldrh	r3, [r4, #12]
 800379e:	431d      	orrs	r5, r3
 80037a0:	81a5      	strh	r5, [r4, #12]
 80037a2:	e7cf      	b.n	8003744 <__smakebuf_r+0x18>

080037a4 <_fstat_r>:
 80037a4:	b538      	push	{r3, r4, r5, lr}
 80037a6:	4d07      	ldr	r5, [pc, #28]	; (80037c4 <_fstat_r+0x20>)
 80037a8:	2300      	movs	r3, #0
 80037aa:	4604      	mov	r4, r0
 80037ac:	4608      	mov	r0, r1
 80037ae:	4611      	mov	r1, r2
 80037b0:	602b      	str	r3, [r5, #0]
 80037b2:	f7fd fa9e 	bl	8000cf2 <_fstat>
 80037b6:	1c43      	adds	r3, r0, #1
 80037b8:	d102      	bne.n	80037c0 <_fstat_r+0x1c>
 80037ba:	682b      	ldr	r3, [r5, #0]
 80037bc:	b103      	cbz	r3, 80037c0 <_fstat_r+0x1c>
 80037be:	6023      	str	r3, [r4, #0]
 80037c0:	bd38      	pop	{r3, r4, r5, pc}
 80037c2:	bf00      	nop
 80037c4:	200002bc 	.word	0x200002bc

080037c8 <_isatty_r>:
 80037c8:	b538      	push	{r3, r4, r5, lr}
 80037ca:	4d06      	ldr	r5, [pc, #24]	; (80037e4 <_isatty_r+0x1c>)
 80037cc:	2300      	movs	r3, #0
 80037ce:	4604      	mov	r4, r0
 80037d0:	4608      	mov	r0, r1
 80037d2:	602b      	str	r3, [r5, #0]
 80037d4:	f7fd fa9d 	bl	8000d12 <_isatty>
 80037d8:	1c43      	adds	r3, r0, #1
 80037da:	d102      	bne.n	80037e2 <_isatty_r+0x1a>
 80037dc:	682b      	ldr	r3, [r5, #0]
 80037de:	b103      	cbz	r3, 80037e2 <_isatty_r+0x1a>
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
 80037e4:	200002bc 	.word	0x200002bc

080037e8 <_init>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	bf00      	nop
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr

080037f4 <_fini>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	bf00      	nop
 80037f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fa:	bc08      	pop	{r3}
 80037fc:	469e      	mov	lr, r3
 80037fe:	4770      	bx	lr
