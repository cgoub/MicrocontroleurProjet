
micro2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003480  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08003644  08003644  00013644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037fc  080037fc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003804  08003804  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003804  08003804  00013804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800380c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000068  08003874  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003874  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009858  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019d4  00000000  00000000  00029933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0002b308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000674  00000000  00000000  0002bb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230e7  00000000  00000000  0002c1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b363  00000000  00000000  0004f2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6b46  00000000  00000000  0005a63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028b0  00000000  00000000  00131184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00133a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800362c 	.word	0x0800362c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	0800362c 	.word	0x0800362c

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char mess[1]="";
 800051a:	2300      	movs	r3, #0
 800051c:	703b      	strb	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fc79 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f957 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 fa3f 	bl	80009a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052a:	f000 fa13 	bl	8000954 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 800052e:	f000 f9bf 	bl	80008b0 <MX_ADC3_Init>
          /* Check for sound signal */
          //if (isSoundSignalDetected()) {

              //HAL_UART_Transmit(&huart2, (uint8_t *) "bonjour2", 8, 20);
              /* Record start time of signal */
              uint32_t startTime = HAL_GetTick();
 8000532:	f000 fcd5 	bl	8000ee0 <HAL_GetTick>
 8000536:	60f8      	str	r0, [r7, #12]

              /* Wait for sound signal to end */
              while (isSoundSignalInProgress()) {
 8000538:	bf00      	nop
 800053a:	f000 f843 	bl	80005c4 <isSoundSignalInProgress>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d1fa      	bne.n	800053a <main+0x26>
                  // Check if sound signal ended
              }

              /* Record end time of signal */
              uint32_t endTime = HAL_GetTick();
 8000544:	f000 fccc 	bl	8000ee0 <HAL_GetTick>
 8000548:	60b8      	str	r0, [r7, #8]

              /* Calculate duration of signal */
              uint32_t duration = endTime - startTime;
 800054a:	68ba      	ldr	r2, [r7, #8]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	1ad3      	subs	r3, r2, r3
 8000550:	607b      	str	r3, [r7, #4]

              /* Decode duration into Morse code */
              if (duration < DOT_THRESHOLD) {
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b63      	cmp	r3, #99	; 0x63
 8000556:	d802      	bhi.n	800055e <main+0x4a>
            	  mess[0] = '.';
 8000558:	232e      	movs	r3, #46	; 0x2e
 800055a:	703b      	strb	r3, [r7, #0]
 800055c:	e00c      	b.n	8000578 <main+0x64>
              } else if (duration < DASH_THRESHOLD) {
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000564:	d202      	bcs.n	800056c <main+0x58>
            	  mess[0] = '-';
 8000566:	232d      	movs	r3, #45	; 0x2d
 8000568:	703b      	strb	r3, [r7, #0]
 800056a:	e005      	b.n	8000578 <main+0x64>
              } else if (duration < PAUSE_THRESHOLD) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000572:	d201      	bcs.n	8000578 <main+0x64>
            	  mess[0] = ' ';
 8000574:	2320      	movs	r3, #32
 8000576:	703b      	strb	r3, [r7, #0]
              }

              /* Decode Morse code message */
              decodeMorse(mess, 2);
 8000578:	463b      	mov	r3, r7
 800057a:	2102      	movs	r1, #2
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f83d 	bl	80005fc <decodeMorse>

              /* Echo received data back */
              HAL_UART_Transmit(&huart2, (uint8_t *)mess, 1, HAL_MAX_DELAY);
 8000582:	4639      	mov	r1, r7
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	2201      	movs	r2, #1
 800058a:	4802      	ldr	r0, [pc, #8]	; (8000594 <main+0x80>)
 800058c:	f001 ffe4 	bl	8002558 <HAL_UART_Transmit>
      {
 8000590:	e7cf      	b.n	8000532 <main+0x1e>
 8000592:	bf00      	nop
 8000594:	200000cc 	.word	0x200000cc

08000598 <isSoundSignalDetected>:
          //}
      }
  }

  /* Function to detect the presence of a sound signal */
  uint8_t isSoundSignalDetected() {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
      // Read the analog input from the sound sensor using the ADC
      uint16_t adc_value = HAL_ADC_GetValue(&hadc3); // Example ADC reading
 800059e:	4808      	ldr	r0, [pc, #32]	; (80005c0 <isSoundSignalDetected+0x28>)
 80005a0:	f000 fced 	bl	8000f7e <HAL_ADC_GetValue>
 80005a4:	4603      	mov	r3, r0
 80005a6:	80fb      	strh	r3, [r7, #6]

      // Analyze the ADC value to determine if a sound signal is detected
      if (adc_value > THRESHOLD) {
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ae:	d901      	bls.n	80005b4 <isSoundSignalDetected+0x1c>
          return 1; // Sound signal detected
 80005b0:	2301      	movs	r3, #1
 80005b2:	e000      	b.n	80005b6 <isSoundSignalDetected+0x1e>
      } else {
          return 0; // No sound signal detected
 80005b4:	2300      	movs	r3, #0
      }
  }
 80005b6:	4618      	mov	r0, r3
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000084 	.word	0x20000084

080005c4 <isSoundSignalInProgress>:

  /* Function to check if the sound signal is still in progress */
  uint8_t isSoundSignalInProgress() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
      // While the sound signal is detected, continuously sample the analog input
      while (isSoundSignalDetected()) {
 80005ca:	e00a      	b.n	80005e2 <isSoundSignalInProgress+0x1e>
          // Read the analog input from the sound sensor using the ADC
          uint16_t adc_value = HAL_ADC_GetValue(&hadc3); // Example ADC reading
 80005cc:	480a      	ldr	r0, [pc, #40]	; (80005f8 <isSoundSignalInProgress+0x34>)
 80005ce:	f000 fcd6 	bl	8000f7e <HAL_ADC_GetValue>
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]

          // Analyze the ADC value to determine if the sound signal is still in progress
          if (adc_value > THRESHOLD) {
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005dc:	d801      	bhi.n	80005e2 <isSoundSignalInProgress+0x1e>
              // Sound signal is still in progress
              // You might want to add a delay here to control the sampling rate
          } else {
              return 0; // Sound signal ended
 80005de:	2300      	movs	r3, #0
 80005e0:	e005      	b.n	80005ee <isSoundSignalInProgress+0x2a>
      while (isSoundSignalDetected()) {
 80005e2:	f7ff ffd9 	bl	8000598 <isSoundSignalDetected>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1ef      	bne.n	80005cc <isSoundSignalInProgress+0x8>
          }
      }

      return 0; // Sound signal ended
 80005ec:	2300      	movs	r3, #0
  }
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000084 	.word	0x20000084

080005fc <decodeMorse>:


  void decodeMorse(char* message, int length) {
 80005fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000600:	b0b6      	sub	sp, #216	; 0xd8
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	6039      	str	r1, [r7, #0]
      // Define the Morse code alphabet
      char* morseAlphabet[] = {".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..",
 8000608:	4a67      	ldr	r2, [pc, #412]	; (80007a8 <decodeMorse+0x1ac>)
 800060a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800060e:	4611      	mov	r1, r2
 8000610:	2290      	movs	r2, #144	; 0x90
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fcf7 	bl	8003006 <memcpy>
                                ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..",
                                "-----", ".----", "..---", "...--", "....-", ".....", "-....",
                                "--...", "---..", "----."};

      // Define the corresponding characters for each Morse code
      char alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
 8000618:	4b64      	ldr	r3, [pc, #400]	; (80007ac <decodeMorse+0x1b0>)
 800061a:	f107 040c 	add.w	r4, r7, #12
 800061e:	461d      	mov	r5, r3
 8000620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	e895 0003 	ldmia.w	r5, {r0, r1}
 800062c:	6020      	str	r0, [r4, #0]
 800062e:	3404      	adds	r4, #4
 8000630:	7021      	strb	r1, [r4, #0]

      // Loop through the message
      for (int i = 0; i < length; i++) {
 8000632:	2300      	movs	r3, #0
 8000634:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000638:	e0a8      	b.n	800078c <decodeMorse+0x190>
          // If the current character is a dot, dash, or space, process it
          if (message[i] == '.' || message[i] == '-') {
 800063a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b2e      	cmp	r3, #46	; 0x2e
 8000646:	d007      	beq.n	8000658 <decodeMorse+0x5c>
 8000648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	4413      	add	r3, r2
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b2d      	cmp	r3, #45	; 0x2d
 8000654:	f040 808b 	bne.w	800076e <decodeMorse+0x172>
 8000658:	466b      	mov	r3, sp
 800065a:	461c      	mov	r4, r3
              int j = i + 1;
 800065c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000660:	3301      	adds	r3, #1
 8000662:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
              // Find the end of the current Morse code character
              while (j < length && message[j] != ' ') {
 8000666:	e004      	b.n	8000672 <decodeMorse+0x76>
                  j++;
 8000668:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800066c:	3301      	adds	r3, #1
 800066e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
              while (j < length && message[j] != ' ') {
 8000672:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	429a      	cmp	r2, r3
 800067a:	da06      	bge.n	800068a <decodeMorse+0x8e>
 800067c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b20      	cmp	r3, #32
 8000688:	d1ee      	bne.n	8000668 <decodeMorse+0x6c>
              }
              // Extract the Morse code character
              char morseChar[j - i + 1];
 800068a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800068e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	1c59      	adds	r1, r3, #1
 8000696:	1e4b      	subs	r3, r1, #1
 8000698:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800069c:	460a      	mov	r2, r1
 800069e:	2300      	movs	r3, #0
 80006a0:	4690      	mov	r8, r2
 80006a2:	4699      	mov	r9, r3
 80006a4:	f04f 0200 	mov.w	r2, #0
 80006a8:	f04f 0300 	mov.w	r3, #0
 80006ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80006b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006b8:	460a      	mov	r2, r1
 80006ba:	2300      	movs	r3, #0
 80006bc:	4692      	mov	sl, r2
 80006be:	469b      	mov	fp, r3
 80006c0:	f04f 0200 	mov.w	r2, #0
 80006c4:	f04f 0300 	mov.w	r3, #0
 80006c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80006cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80006d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80006d4:	460b      	mov	r3, r1
 80006d6:	3307      	adds	r3, #7
 80006d8:	08db      	lsrs	r3, r3, #3
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	ebad 0d03 	sub.w	sp, sp, r3
 80006e0:	466b      	mov	r3, sp
 80006e2:	3300      	adds	r3, #0
 80006e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
              strncpy(morseChar, &message[i], j - i);
 80006e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	18d1      	adds	r1, r2, r3
 80006f0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80006f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	461a      	mov	r2, r3
 80006fc:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000700:	f002 fbfb 	bl	8002efa <strncpy>
              morseChar[j - i] = '\0';
 8000704:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000708:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000712:	2100      	movs	r1, #0
 8000714:	54d1      	strb	r1, [r2, r3]

              // Decode the Morse code character
              for (int k = 0; k < 36; k++) {
 8000716:	2300      	movs	r3, #0
 8000718:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800071c:	e01d      	b.n	800075a <decodeMorse+0x15e>
                  if (strcmp(morseChar, morseAlphabet[k]) == 0) {
 800071e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	33d8      	adds	r3, #216	; 0xd8
 8000726:	443b      	add	r3, r7
 8000728:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 800072c:	4619      	mov	r1, r3
 800072e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000732:	f7ff fd67 	bl	8000204 <strcmp>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d109      	bne.n	8000750 <decodeMorse+0x154>
                      // Print or store the decoded character
                      printf("%c", alphabet[k]);
 800073c:	f107 020c 	add.w	r2, r7, #12
 8000740:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000744:	4413      	add	r3, r2
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f002 fb83 	bl	8002e54 <putchar>
                      break;
 800074e:	e008      	b.n	8000762 <decodeMorse+0x166>
              for (int k = 0; k < 36; k++) {
 8000750:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000754:	3301      	adds	r3, #1
 8000756:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800075a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800075e:	2b23      	cmp	r3, #35	; 0x23
 8000760:	dddd      	ble.n	800071e <decodeMorse+0x122>
                  }
              }
              i = j; // Move the index to the next character
 8000762:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800076a:	46a5      	mov	sp, r4
          if (message[i] == '.' || message[i] == '-') {
 800076c:	e009      	b.n	8000782 <decodeMorse+0x186>
          } else if (message[i] == ' ') {
 800076e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b20      	cmp	r3, #32
 800077a:	d102      	bne.n	8000782 <decodeMorse+0x186>
              // Print or store a space between words
              printf(" ");
 800077c:	2020      	movs	r0, #32
 800077e:	f002 fb69 	bl	8002e54 <putchar>
      for (int i = 0; i < length; i++) {
 8000782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000786:	3301      	adds	r3, #1
 8000788:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800078c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	429a      	cmp	r2, r3
 8000794:	f6ff af51 	blt.w	800063a <decodeMorse+0x3e>
          }
      }
      printf("\n"); // Print a newline at the end of the message
 8000798:	200a      	movs	r0, #10
 800079a:	f002 fb5b 	bl	8002e54 <putchar>
  }
 800079e:	bf00      	nop
 80007a0:	37d8      	adds	r7, #216	; 0xd8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80007a8:	0800372c 	.word	0x0800372c
 80007ac:	080037bc 	.word	0x080037bc

080007b0 <__io_putchar>:


  PUTCHAR_PROTOTYPE
  {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of
  transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80007b8:	1d39      	adds	r1, r7, #4
 80007ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007be:	2201      	movs	r2, #1
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <__io_putchar+0x20>)
 80007c2:	f001 fec9 	bl	8002558 <HAL_UART_Transmit>
  return ch;
 80007c6:	687b      	ldr	r3, [r7, #4]
  }
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000cc 	.word	0x200000cc

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2234      	movs	r2, #52	; 0x34
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fb81 	bl	8002eea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <SystemClock_Config+0xd4>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a29      	ldr	r2, [pc, #164]	; (80008a8 <SystemClock_Config+0xd4>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <SystemClock_Config+0xd4>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000814:	2300      	movs	r3, #0
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	4b24      	ldr	r3, [pc, #144]	; (80008ac <SystemClock_Config+0xd8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000820:	4a22      	ldr	r2, [pc, #136]	; (80008ac <SystemClock_Config+0xd8>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b20      	ldr	r3, [pc, #128]	; (80008ac <SystemClock_Config+0xd8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	2302      	movs	r3, #2
 8000836:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	2301      	movs	r3, #1
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	2310      	movs	r3, #16
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000844:	2300      	movs	r3, #0
 8000846:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000848:	2310      	movs	r3, #16
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800084c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000850:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000852:	2304      	movs	r3, #4
 8000854:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000856:	2302      	movs	r3, #2
 8000858:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fb8a 	bl	8001f7c <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800086e:	f000 f90d 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	230f      	movs	r3, #15
 8000874:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2302      	movs	r3, #2
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	2102      	movs	r1, #2
 800088e:	4618      	mov	r0, r3
 8000890:	f001 f82a 	bl	80018e8 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800089a:	f000 f8f7 	bl	8000a8c <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3750      	adds	r7, #80	; 0x50
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008b6:	463b      	mov	r3, r7
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_ADC3_Init+0x98>)
 80008c4:	4a21      	ldr	r2, [pc, #132]	; (800094c <MX_ADC3_Init+0x9c>)
 80008c6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_ADC3_Init+0x98>)
 80008ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008ce:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_ADC3_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_ADC3_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_ADC3_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_ADC3_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_ADC3_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_ADC3_Init+0x98>)
 80008f2:	4a17      	ldr	r2, [pc, #92]	; (8000950 <MX_ADC3_Init+0xa0>)
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_ADC3_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_ADC3_Init+0x98>)
 80008fe:	2201      	movs	r2, #1
 8000900:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_ADC3_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_ADC3_Init+0x98>)
 800090c:	2201      	movs	r2, #1
 800090e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_ADC3_Init+0x98>)
 8000912:	f000 faf1 	bl	8000ef8 <HAL_ADC_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800091c:	f000 f8b6 	bl	8000a8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000920:	2300      	movs	r3, #0
 8000922:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000924:	2301      	movs	r3, #1
 8000926:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_ADC3_Init+0x98>)
 8000932:	f000 fb31 	bl	8000f98 <HAL_ADC_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800093c:	f000 f8a6 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000084 	.word	0x20000084
 800094c:	40012200 	.word	0x40012200
 8000950:	0f000001 	.word	0x0f000001

08000954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <MX_USART2_UART_Init+0x50>)
 800095c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800098c:	f001 fd94 	bl	80024b8 <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000996:	f000 f879 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000cc 	.word	0x200000cc
 80009a4:	40004400 	.word	0x40004400

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <MX_GPIO_Init+0xd8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a2e      	ldr	r2, [pc, #184]	; (8000a80 <MX_GPIO_Init+0xd8>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <MX_GPIO_Init+0xd8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <MX_GPIO_Init+0xd8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a27      	ldr	r2, [pc, #156]	; (8000a80 <MX_GPIO_Init+0xd8>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <MX_GPIO_Init+0xd8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_GPIO_Init+0xd8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a20      	ldr	r2, [pc, #128]	; (8000a80 <MX_GPIO_Init+0xd8>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_GPIO_Init+0xd8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_GPIO_Init+0xd8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <MX_GPIO_Init+0xd8>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_GPIO_Init+0xd8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4810      	ldr	r0, [pc, #64]	; (8000a84 <MX_GPIO_Init+0xdc>)
 8000a44:	f000 fdbc 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000a48:	2322      	movs	r3, #34	; 0x22
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480b      	ldr	r0, [pc, #44]	; (8000a88 <MX_GPIO_Init+0xe0>)
 8000a5c:	f000 fdb0 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a60:	2310      	movs	r3, #16
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a64:	2303      	movs	r3, #3
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_GPIO_Init+0xe0>)
 8000a74:	f000 fda4 	bl	80015c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020800 	.word	0x40020800
 8000a88:	40020000 	.word	0x40020000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f000 fd3e 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_ADC_MspInit+0x7c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d127      	bne.n	8000b5a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <HAL_ADC_MspInit+0x80>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <HAL_ADC_MspInit+0x80>)
 8000b14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <HAL_ADC_MspInit+0x80>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_ADC_MspInit+0x80>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_ADC_MspInit+0x80>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_ADC_MspInit+0x80>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0-WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b42:	2301      	movs	r3, #1
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b46:	2303      	movs	r3, #3
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <HAL_ADC_MspInit+0x84>)
 8000b56:	f000 fd33 	bl	80015c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40012200 	.word	0x40012200
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <HAL_UART_MspInit+0x84>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d12b      	bne.n	8000bea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <HAL_UART_MspInit+0x8c>)
 8000be6:	f000 fceb 	bl	80015c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	; 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40004400 	.word	0x40004400
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020000 	.word	0x40020000

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4c:	f000 f934 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	e00a      	b.n	8000c7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c66:	f3af 8000 	nop.w
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	60ba      	str	r2, [r7, #8]
 8000c72:	b2ca      	uxtb	r2, r1
 8000c74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbf0      	blt.n	8000c66 <_read+0x12>
  }

  return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	e009      	b.n	8000cb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	60ba      	str	r2, [r7, #8]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fd81 	bl	80007b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf1      	blt.n	8000ca0 <_write+0x12>
  }
  return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_close>:

int _close(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cee:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_isatty>:

int _isatty(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f002 f924 	bl	8002fac <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20020000 	.word	0x20020000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	20000114 	.word	0x20000114
 8000d98:	20000268 	.word	0x20000268

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dc4:	f7ff ffea 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc8:	480c      	ldr	r0, [pc, #48]	; (8000dfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dca:	490d      	ldr	r1, [pc, #52]	; (8000e00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de0:	4c0a      	ldr	r4, [pc, #40]	; (8000e0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f002 f8e3 	bl	8002fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fb8f 	bl	8000514 <main>
  bx  lr    
 8000df6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e04:	0800380c 	.word	0x0800380c
  ldr r2, =_sbss
 8000e08:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e0c:	20000268 	.word	0x20000268

08000e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_Init+0x40>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_Init+0x40>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x40>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 fb8b 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f808 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fe26 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x54>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x58>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 fb95 	bl	80015a6 <HAL_SYSTICK_Config>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00e      	b.n	8000ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d80a      	bhi.n	8000ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f000 fb6b 	bl	800156e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_InitTick+0x5c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000118 	.word	0x20000118

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000118 	.word	0x20000118

08000ef8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e033      	b.n	8000f76 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d109      	bne.n	8000f2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fde6 	bl	8000ae8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d118      	bne.n	8000f68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f3e:	f023 0302 	bic.w	r3, r3, #2
 8000f42:	f043 0202 	orr.w	r2, r3, #2
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f956 	bl	80011fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f023 0303 	bic.w	r3, r3, #3
 8000f5e:	f043 0201 	orr.w	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	641a      	str	r2, [r3, #64]	; 0x40
 8000f66:	e001      	b.n	8000f6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d101      	bne.n	8000fb4 <HAL_ADC_ConfigChannel+0x1c>
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	e113      	b.n	80011dc <HAL_ADC_ConfigChannel+0x244>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b09      	cmp	r3, #9
 8000fc2:	d925      	bls.n	8001010 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68d9      	ldr	r1, [r3, #12]
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3b1e      	subs	r3, #30
 8000fda:	2207      	movs	r2, #7
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	400a      	ands	r2, r1
 8000fe8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68d9      	ldr	r1, [r3, #12]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4403      	add	r3, r0
 8001002:	3b1e      	subs	r3, #30
 8001004:	409a      	lsls	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	e022      	b.n	8001056 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6919      	ldr	r1, [r3, #16]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	2207      	movs	r2, #7
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	400a      	ands	r2, r1
 8001032:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6919      	ldr	r1, [r3, #16]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b29b      	uxth	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	4603      	mov	r3, r0
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4403      	add	r3, r0
 800104c:	409a      	lsls	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b06      	cmp	r3, #6
 800105c:	d824      	bhi.n	80010a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	3b05      	subs	r3, #5
 8001070:	221f      	movs	r2, #31
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	400a      	ands	r2, r1
 800107e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	3b05      	subs	r3, #5
 800109a:	fa00 f203 	lsl.w	r2, r0, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
 80010a6:	e04c      	b.n	8001142 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b0c      	cmp	r3, #12
 80010ae:	d824      	bhi.n	80010fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	3b23      	subs	r3, #35	; 0x23
 80010c2:	221f      	movs	r2, #31
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43da      	mvns	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	400a      	ands	r2, r1
 80010d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	3b23      	subs	r3, #35	; 0x23
 80010ec:	fa00 f203 	lsl.w	r2, r0, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	631a      	str	r2, [r3, #48]	; 0x30
 80010f8:	e023      	b.n	8001142 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	3b41      	subs	r3, #65	; 0x41
 800110c:	221f      	movs	r2, #31
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	400a      	ands	r2, r1
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	4618      	mov	r0, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	3b41      	subs	r3, #65	; 0x41
 8001136:	fa00 f203 	lsl.w	r2, r0, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	430a      	orrs	r2, r1
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <HAL_ADC_ConfigChannel+0x250>)
 8001144:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a28      	ldr	r2, [pc, #160]	; (80011ec <HAL_ADC_ConfigChannel+0x254>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d10f      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x1d8>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b12      	cmp	r3, #18
 8001156:	d10b      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <HAL_ADC_ConfigChannel+0x254>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d12b      	bne.n	80011d2 <HAL_ADC_ConfigChannel+0x23a>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <HAL_ADC_ConfigChannel+0x258>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d003      	beq.n	800118c <HAL_ADC_ConfigChannel+0x1f4>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b11      	cmp	r3, #17
 800118a:	d122      	bne.n	80011d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <HAL_ADC_ConfigChannel+0x258>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d111      	bne.n	80011d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_ADC_ConfigChannel+0x25c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <HAL_ADC_ConfigChannel+0x260>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	0c9a      	lsrs	r2, r3, #18
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80011c4:	e002      	b.n	80011cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f9      	bne.n	80011c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40012300 	.word	0x40012300
 80011ec:	40012000 	.word	0x40012000
 80011f0:	10000012 	.word	0x10000012
 80011f4:	20000000 	.word	0x20000000
 80011f8:	431bde83 	.word	0x431bde83

080011fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001204:	4b79      	ldr	r3, [pc, #484]	; (80013ec <ADC_Init+0x1f0>)
 8001206:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	431a      	orrs	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001230:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6859      	ldr	r1, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	021a      	lsls	r2, r3, #8
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001254:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6859      	ldr	r1, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001276:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6899      	ldr	r1, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128e:	4a58      	ldr	r2, [pc, #352]	; (80013f0 <ADC_Init+0x1f4>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d022      	beq.n	80012da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6899      	ldr	r1, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6899      	ldr	r1, [r3, #8]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	e00f      	b.n	80012fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0202 	bic.w	r2, r2, #2
 8001308:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6899      	ldr	r1, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7e1b      	ldrb	r3, [r3, #24]
 8001314:	005a      	lsls	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d01b      	beq.n	8001360 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001336:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001346:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6859      	ldr	r1, [r3, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	3b01      	subs	r3, #1
 8001354:	035a      	lsls	r2, r3, #13
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	e007      	b.n	8001370 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800136e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800137e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	3b01      	subs	r3, #1
 800138c:	051a      	lsls	r2, r3, #20
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6899      	ldr	r1, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013b2:	025a      	lsls	r2, r3, #9
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6899      	ldr	r1, [r3, #8]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	029a      	lsls	r2, r3, #10
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	609a      	str	r2, [r3, #8]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40012300 	.word	0x40012300
 80013f0:	0f000001 	.word	0x0f000001

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	; (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
         );
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f7ff ff8e 	bl	8001458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff47 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001580:	f7ff ff5c 	bl	800143c <__NVIC_GetPriorityGrouping>
 8001584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff ff8e 	bl	80014ac <NVIC_EncodePriority>
 8001590:	4602      	mov	r2, r0
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff5d 	bl	8001458 <__NVIC_SetPriority>
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffb0 	bl	8001514 <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	e165      	b.n	80018a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f040 8154 	bne.w	80018a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d005      	beq.n	8001612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160e:	2b02      	cmp	r3, #2
 8001610:	d130      	bne.n	8001674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 0201 	and.w	r2, r3, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b03      	cmp	r3, #3
 800167e:	d017      	beq.n	80016b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d123      	bne.n	8001704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	69b9      	ldr	r1, [r7, #24]
 8001700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0203 	and.w	r2, r3, #3
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80ae 	beq.w	80018a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b5d      	ldr	r3, [pc, #372]	; (80018c0 <HAL_GPIO_Init+0x300>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a5c      	ldr	r2, [pc, #368]	; (80018c0 <HAL_GPIO_Init+0x300>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b5a      	ldr	r3, [pc, #360]	; (80018c0 <HAL_GPIO_Init+0x300>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001762:	4a58      	ldr	r2, [pc, #352]	; (80018c4 <HAL_GPIO_Init+0x304>)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3302      	adds	r3, #2
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4f      	ldr	r2, [pc, #316]	; (80018c8 <HAL_GPIO_Init+0x308>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d025      	beq.n	80017da <HAL_GPIO_Init+0x21a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <HAL_GPIO_Init+0x30c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d01f      	beq.n	80017d6 <HAL_GPIO_Init+0x216>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4d      	ldr	r2, [pc, #308]	; (80018d0 <HAL_GPIO_Init+0x310>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d019      	beq.n	80017d2 <HAL_GPIO_Init+0x212>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4c      	ldr	r2, [pc, #304]	; (80018d4 <HAL_GPIO_Init+0x314>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0x20e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4b      	ldr	r2, [pc, #300]	; (80018d8 <HAL_GPIO_Init+0x318>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00d      	beq.n	80017ca <HAL_GPIO_Init+0x20a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4a      	ldr	r2, [pc, #296]	; (80018dc <HAL_GPIO_Init+0x31c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0x206>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a49      	ldr	r2, [pc, #292]	; (80018e0 <HAL_GPIO_Init+0x320>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_GPIO_Init+0x202>
 80017be:	2306      	movs	r3, #6
 80017c0:	e00c      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017c2:	2307      	movs	r3, #7
 80017c4:	e00a      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017c6:	2305      	movs	r3, #5
 80017c8:	e008      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017ca:	2304      	movs	r3, #4
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017ce:	2303      	movs	r3, #3
 80017d0:	e004      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017da:	2300      	movs	r3, #0
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f002 0203 	and.w	r2, r2, #3
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	4093      	lsls	r3, r2
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ec:	4935      	ldr	r1, [pc, #212]	; (80018c4 <HAL_GPIO_Init+0x304>)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fa:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <HAL_GPIO_Init+0x324>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181e:	4a31      	ldr	r2, [pc, #196]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001848:	4a26      	ldr	r2, [pc, #152]	; (80018e4 <HAL_GPIO_Init+0x324>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800184e:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001878:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_GPIO_Init+0x324>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800189c:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <HAL_GPIO_Init+0x324>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3301      	adds	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b0f      	cmp	r3, #15
 80018ac:	f67f ae96 	bls.w	80015dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40013800 	.word	0x40013800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40020400 	.word	0x40020400
 80018d0:	40020800 	.word	0x40020800
 80018d4:	40020c00 	.word	0x40020c00
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40021400 	.word	0x40021400
 80018e0:	40021800 	.word	0x40021800
 80018e4:	40013c00 	.word	0x40013c00

080018e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0cc      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018fc:	4b68      	ldr	r3, [pc, #416]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d90c      	bls.n	8001924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b65      	ldr	r3, [pc, #404]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0b8      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800193c:	4b59      	ldr	r3, [pc, #356]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a58      	ldr	r2, [pc, #352]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001954:	4b53      	ldr	r3, [pc, #332]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4a52      	ldr	r2, [pc, #328]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800195e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001960:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	494d      	ldr	r1, [pc, #308]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d044      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d119      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e07f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a6:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e06f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b6:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e067      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c6:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 0203 	bic.w	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4934      	ldr	r1, [pc, #208]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d8:	f7ff fa82 	bl	8000ee0 <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e0:	f7ff fa7e 	bl	8000ee0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e04f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 020c 	and.w	r2, r3, #12
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d1eb      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d20c      	bcs.n	8001a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e032      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4916      	ldr	r1, [pc, #88]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a6e:	f000 f855 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8001a72:	4602      	mov	r2, r0
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	490a      	ldr	r1, [pc, #40]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	5ccb      	ldrb	r3, [r1, r3]
 8001a82:	fa22 f303 	lsr.w	r3, r2, r3
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f9e2 	bl	8000e58 <HAL_InitTick>

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	080037e4 	.word	0x080037e4
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000000 	.word	0x20000000

08001acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ad0:	f7ff fff0 	bl	8001ab4 <HAL_RCC_GetHCLKFreq>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	0a9b      	lsrs	r3, r3, #10
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	4903      	ldr	r1, [pc, #12]	; (8001af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae2:	5ccb      	ldrb	r3, [r1, r3]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	080037f4 	.word	0x080037f4

08001af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001af8:	f7ff ffdc 	bl	8001ab4 <HAL_RCC_GetHCLKFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	0b5b      	lsrs	r3, r3, #13
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	4903      	ldr	r1, [pc, #12]	; (8001b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40023800 	.word	0x40023800
 8001b18:	080037f4 	.word	0x080037f4

08001b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b20:	b0ae      	sub	sp, #184	; 0xb8
 8001b22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b42:	4bcb      	ldr	r3, [pc, #812]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b0c      	cmp	r3, #12
 8001b4c:	f200 8206 	bhi.w	8001f5c <HAL_RCC_GetSysClockFreq+0x440>
 8001b50:	a201      	add	r2, pc, #4	; (adr r2, 8001b58 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b56:	bf00      	nop
 8001b58:	08001b8d 	.word	0x08001b8d
 8001b5c:	08001f5d 	.word	0x08001f5d
 8001b60:	08001f5d 	.word	0x08001f5d
 8001b64:	08001f5d 	.word	0x08001f5d
 8001b68:	08001b95 	.word	0x08001b95
 8001b6c:	08001f5d 	.word	0x08001f5d
 8001b70:	08001f5d 	.word	0x08001f5d
 8001b74:	08001f5d 	.word	0x08001f5d
 8001b78:	08001b9d 	.word	0x08001b9d
 8001b7c:	08001f5d 	.word	0x08001f5d
 8001b80:	08001f5d 	.word	0x08001f5d
 8001b84:	08001f5d 	.word	0x08001f5d
 8001b88:	08001d8d 	.word	0x08001d8d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b8c:	4bb9      	ldr	r3, [pc, #740]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001b92:	e1e7      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b94:	4bb8      	ldr	r3, [pc, #736]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b9a:	e1e3      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b9c:	4bb4      	ldr	r3, [pc, #720]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba8:	4bb1      	ldr	r3, [pc, #708]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d071      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb4:	4bae      	ldr	r3, [pc, #696]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	099b      	lsrs	r3, r3, #6
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001bc0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001bd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001bda:	4622      	mov	r2, r4
 8001bdc:	462b      	mov	r3, r5
 8001bde:	f04f 0000 	mov.w	r0, #0
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	0159      	lsls	r1, r3, #5
 8001be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bec:	0150      	lsls	r0, r2, #5
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	1a51      	subs	r1, r2, r1
 8001bf6:	6439      	str	r1, [r7, #64]	; 0x40
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8001bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001c0c:	4649      	mov	r1, r9
 8001c0e:	018b      	lsls	r3, r1, #6
 8001c10:	4641      	mov	r1, r8
 8001c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c16:	4641      	mov	r1, r8
 8001c18:	018a      	lsls	r2, r1, #6
 8001c1a:	4641      	mov	r1, r8
 8001c1c:	1a51      	subs	r1, r2, r1
 8001c1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c20:	4649      	mov	r1, r9
 8001c22:	eb63 0301 	sbc.w	r3, r3, r1
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001c34:	4649      	mov	r1, r9
 8001c36:	00cb      	lsls	r3, r1, #3
 8001c38:	4641      	mov	r1, r8
 8001c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c3e:	4641      	mov	r1, r8
 8001c40:	00ca      	lsls	r2, r1, #3
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	4622      	mov	r2, r4
 8001c4a:	189b      	adds	r3, r3, r2
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c4e:	462b      	mov	r3, r5
 8001c50:	460a      	mov	r2, r1
 8001c52:	eb42 0303 	adc.w	r3, r2, r3
 8001c56:	637b      	str	r3, [r7, #52]	; 0x34
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c64:	4629      	mov	r1, r5
 8001c66:	024b      	lsls	r3, r1, #9
 8001c68:	4621      	mov	r1, r4
 8001c6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c6e:	4621      	mov	r1, r4
 8001c70:	024a      	lsls	r2, r1, #9
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c84:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c88:	f7fe fac6 	bl	8000218 <__aeabi_uldivmod>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4613      	mov	r3, r2
 8001c92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c96:	e067      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c98:	4b75      	ldr	r3, [pc, #468]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	099b      	lsrs	r3, r3, #6
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ca4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cb6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001cba:	4622      	mov	r2, r4
 8001cbc:	462b      	mov	r3, r5
 8001cbe:	f04f 0000 	mov.w	r0, #0
 8001cc2:	f04f 0100 	mov.w	r1, #0
 8001cc6:	0159      	lsls	r1, r3, #5
 8001cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ccc:	0150      	lsls	r0, r2, #5
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	1a51      	subs	r1, r2, r1
 8001cd6:	62b9      	str	r1, [r7, #40]	; 0x28
 8001cd8:	4629      	mov	r1, r5
 8001cda:	eb63 0301 	sbc.w	r3, r3, r1
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001cec:	4649      	mov	r1, r9
 8001cee:	018b      	lsls	r3, r1, #6
 8001cf0:	4641      	mov	r1, r8
 8001cf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cf6:	4641      	mov	r1, r8
 8001cf8:	018a      	lsls	r2, r1, #6
 8001cfa:	4641      	mov	r1, r8
 8001cfc:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d00:	4649      	mov	r1, r9
 8001d02:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d12:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d1a:	4692      	mov	sl, r2
 8001d1c:	469b      	mov	fp, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	eb1a 0303 	adds.w	r3, sl, r3
 8001d24:	623b      	str	r3, [r7, #32]
 8001d26:	462b      	mov	r3, r5
 8001d28:	eb4b 0303 	adc.w	r3, fp, r3
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	028b      	lsls	r3, r1, #10
 8001d3e:	4621      	mov	r1, r4
 8001d40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d44:	4621      	mov	r1, r4
 8001d46:	028a      	lsls	r2, r1, #10
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d50:	2200      	movs	r2, #0
 8001d52:	673b      	str	r3, [r7, #112]	; 0x70
 8001d54:	677a      	str	r2, [r7, #116]	; 0x74
 8001d56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001d5a:	f7fe fa5d 	bl	8000218 <__aeabi_uldivmod>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4613      	mov	r3, r2
 8001d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d68:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	0c1b      	lsrs	r3, r3, #16
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	3301      	adds	r3, #1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001d7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d8a:	e0eb      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d8c:	4b38      	ldr	r3, [pc, #224]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d98:	4b35      	ldr	r3, [pc, #212]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d06b      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da4:	4b32      	ldr	r3, [pc, #200]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x354>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	099b      	lsrs	r3, r3, #6
 8001daa:	2200      	movs	r2, #0
 8001dac:	66bb      	str	r3, [r7, #104]	; 0x68
 8001dae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001db0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db6:	663b      	str	r3, [r7, #96]	; 0x60
 8001db8:	2300      	movs	r3, #0
 8001dba:	667b      	str	r3, [r7, #100]	; 0x64
 8001dbc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001dc0:	4622      	mov	r2, r4
 8001dc2:	462b      	mov	r3, r5
 8001dc4:	f04f 0000 	mov.w	r0, #0
 8001dc8:	f04f 0100 	mov.w	r1, #0
 8001dcc:	0159      	lsls	r1, r3, #5
 8001dce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dd2:	0150      	lsls	r0, r2, #5
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4621      	mov	r1, r4
 8001dda:	1a51      	subs	r1, r2, r1
 8001ddc:	61b9      	str	r1, [r7, #24]
 8001dde:	4629      	mov	r1, r5
 8001de0:	eb63 0301 	sbc.w	r3, r3, r1
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001df2:	4659      	mov	r1, fp
 8001df4:	018b      	lsls	r3, r1, #6
 8001df6:	4651      	mov	r1, sl
 8001df8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dfc:	4651      	mov	r1, sl
 8001dfe:	018a      	lsls	r2, r1, #6
 8001e00:	4651      	mov	r1, sl
 8001e02:	ebb2 0801 	subs.w	r8, r2, r1
 8001e06:	4659      	mov	r1, fp
 8001e08:	eb63 0901 	sbc.w	r9, r3, r1
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e20:	4690      	mov	r8, r2
 8001e22:	4699      	mov	r9, r3
 8001e24:	4623      	mov	r3, r4
 8001e26:	eb18 0303 	adds.w	r3, r8, r3
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	462b      	mov	r3, r5
 8001e2e:	eb49 0303 	adc.w	r3, r9, r3
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e40:	4629      	mov	r1, r5
 8001e42:	024b      	lsls	r3, r1, #9
 8001e44:	4621      	mov	r1, r4
 8001e46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	024a      	lsls	r2, r1, #9
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e56:	2200      	movs	r2, #0
 8001e58:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e5a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e60:	f7fe f9da 	bl	8000218 <__aeabi_uldivmod>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4613      	mov	r3, r2
 8001e6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e6e:	e065      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x420>
 8001e70:	40023800 	.word	0x40023800
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7c:	4b3d      	ldr	r3, [pc, #244]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	099b      	lsrs	r3, r3, #6
 8001e82:	2200      	movs	r2, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	4611      	mov	r1, r2
 8001e88:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e8c:	653b      	str	r3, [r7, #80]	; 0x50
 8001e8e:	2300      	movs	r3, #0
 8001e90:	657b      	str	r3, [r7, #84]	; 0x54
 8001e92:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001e96:	4642      	mov	r2, r8
 8001e98:	464b      	mov	r3, r9
 8001e9a:	f04f 0000 	mov.w	r0, #0
 8001e9e:	f04f 0100 	mov.w	r1, #0
 8001ea2:	0159      	lsls	r1, r3, #5
 8001ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ea8:	0150      	lsls	r0, r2, #5
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4641      	mov	r1, r8
 8001eb0:	1a51      	subs	r1, r2, r1
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	4649      	mov	r1, r9
 8001eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ec8:	4659      	mov	r1, fp
 8001eca:	018b      	lsls	r3, r1, #6
 8001ecc:	4651      	mov	r1, sl
 8001ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ed2:	4651      	mov	r1, sl
 8001ed4:	018a      	lsls	r2, r1, #6
 8001ed6:	4651      	mov	r1, sl
 8001ed8:	1a54      	subs	r4, r2, r1
 8001eda:	4659      	mov	r1, fp
 8001edc:	eb63 0501 	sbc.w	r5, r3, r1
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	00eb      	lsls	r3, r5, #3
 8001eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eee:	00e2      	lsls	r2, r4, #3
 8001ef0:	4614      	mov	r4, r2
 8001ef2:	461d      	mov	r5, r3
 8001ef4:	4643      	mov	r3, r8
 8001ef6:	18e3      	adds	r3, r4, r3
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	464b      	mov	r3, r9
 8001efc:	eb45 0303 	adc.w	r3, r5, r3
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f0e:	4629      	mov	r1, r5
 8001f10:	028b      	lsls	r3, r1, #10
 8001f12:	4621      	mov	r1, r4
 8001f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f18:	4621      	mov	r1, r4
 8001f1a:	028a      	lsls	r2, r1, #10
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f24:	2200      	movs	r2, #0
 8001f26:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f28:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001f2a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f2e:	f7fe f973 	bl	8000218 <__aeabi_uldivmod>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4613      	mov	r3, r2
 8001f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	0f1b      	lsrs	r3, r3, #28
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001f4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f5a:	e003      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	37b8      	adds	r7, #184	; 0xb8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800
 8001f78:	00f42400 	.word	0x00f42400

08001f7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e28d      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8083 	beq.w	80020a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f9c:	4b94      	ldr	r3, [pc, #592]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d019      	beq.n	8001fdc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fa8:	4b91      	ldr	r3, [pc, #580]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fb4:	4b8e      	ldr	r3, [pc, #568]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fc0:	d00c      	beq.n	8001fdc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc2:	4b8b      	ldr	r3, [pc, #556]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d112      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fce:	4b88      	ldr	r3, [pc, #544]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fda:	d10b      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	4b84      	ldr	r3, [pc, #528]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d05b      	beq.n	80020a0 <HAL_RCC_OscConfig+0x124>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d157      	bne.n	80020a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e25a      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffc:	d106      	bne.n	800200c <HAL_RCC_OscConfig+0x90>
 8001ffe:	4b7c      	ldr	r3, [pc, #496]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a7b      	ldr	r2, [pc, #492]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e01d      	b.n	8002048 <HAL_RCC_OscConfig+0xcc>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0xb4>
 8002016:	4b76      	ldr	r3, [pc, #472]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a75      	ldr	r2, [pc, #468]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b73      	ldr	r3, [pc, #460]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a72      	ldr	r2, [pc, #456]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0xcc>
 8002030:	4b6f      	ldr	r3, [pc, #444]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6e      	ldr	r2, [pc, #440]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b6c      	ldr	r3, [pc, #432]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a6b      	ldr	r2, [pc, #428]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7fe ff46 	bl	8000ee0 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002058:	f7fe ff42 	bl	8000ee0 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e21f      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b61      	ldr	r3, [pc, #388]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0xdc>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7fe ff32 	bl	8000ee0 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002080:	f7fe ff2e 	bl	8000ee0 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e20b      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	4b57      	ldr	r3, [pc, #348]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x104>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d06f      	beq.n	800218e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020ae:	4b50      	ldr	r3, [pc, #320]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d017      	beq.n	80020ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020ba:	4b4d      	ldr	r3, [pc, #308]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d105      	bne.n	80020d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020c6:	4b4a      	ldr	r3, [pc, #296]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00b      	beq.n	80020ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020d2:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d11c      	bne.n	8002118 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020de:	4b44      	ldr	r3, [pc, #272]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d116      	bne.n	8002118 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ea:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_RCC_OscConfig+0x186>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e1d3      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002102:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4937      	ldr	r1, [pc, #220]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	e03a      	b.n	800218e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d020      	beq.n	8002162 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002120:	4b34      	ldr	r3, [pc, #208]	; (80021f4 <HAL_RCC_OscConfig+0x278>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7fe fedb 	bl	8000ee0 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800212e:	f7fe fed7 	bl	8000ee0 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e1b4      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002140:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4925      	ldr	r1, [pc, #148]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 800215c:	4313      	orrs	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
 8002160:	e015      	b.n	800218e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002162:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_RCC_OscConfig+0x278>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7fe feba 	bl	8000ee0 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002170:	f7fe feb6 	bl	8000ee0 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e193      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002182:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d036      	beq.n	8002208 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d016      	beq.n	80021d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_RCC_OscConfig+0x27c>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7fe fe9a 	bl	8000ee0 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b0:	f7fe fe96 	bl	8000ee0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e173      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_OscConfig+0x274>)
 80021c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x234>
 80021ce:	e01b      	b.n	8002208 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RCC_OscConfig+0x27c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d6:	f7fe fe83 	bl	8000ee0 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	e00e      	b.n	80021fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021de:	f7fe fe7f 	bl	8000ee0 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d907      	bls.n	80021fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e15c      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
 80021f0:	40023800 	.word	0x40023800
 80021f4:	42470000 	.word	0x42470000
 80021f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	4b8a      	ldr	r3, [pc, #552]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80021fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ea      	bne.n	80021de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 8097 	beq.w	8002344 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221a:	4b83      	ldr	r3, [pc, #524]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10f      	bne.n	8002246 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	4b7f      	ldr	r3, [pc, #508]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a7e      	ldr	r2, [pc, #504]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b7c      	ldr	r3, [pc, #496]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b79      	ldr	r3, [pc, #484]	; (800242c <HAL_RCC_OscConfig+0x4b0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d118      	bne.n	8002284 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002252:	4b76      	ldr	r3, [pc, #472]	; (800242c <HAL_RCC_OscConfig+0x4b0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a75      	ldr	r2, [pc, #468]	; (800242c <HAL_RCC_OscConfig+0x4b0>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7fe fe3f 	bl	8000ee0 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7fe fe3b 	bl	8000ee0 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e118      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	4b6c      	ldr	r3, [pc, #432]	; (800242c <HAL_RCC_OscConfig+0x4b0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x31e>
 800228c:	4b66      	ldr	r3, [pc, #408]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	4a65      	ldr	r2, [pc, #404]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6713      	str	r3, [r2, #112]	; 0x70
 8002298:	e01c      	b.n	80022d4 <HAL_RCC_OscConfig+0x358>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x340>
 80022a2:	4b61      	ldr	r3, [pc, #388]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	4a60      	ldr	r2, [pc, #384]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	6713      	str	r3, [r2, #112]	; 0x70
 80022ae:	4b5e      	ldr	r3, [pc, #376]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b2:	4a5d      	ldr	r2, [pc, #372]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0x358>
 80022bc:	4b5a      	ldr	r3, [pc, #360]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	4a59      	ldr	r2, [pc, #356]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6713      	str	r3, [r2, #112]	; 0x70
 80022c8:	4b57      	ldr	r3, [pc, #348]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	4a56      	ldr	r2, [pc, #344]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022ce:	f023 0304 	bic.w	r3, r3, #4
 80022d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d015      	beq.n	8002308 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7fe fe00 	bl	8000ee0 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7fe fdfc 	bl	8000ee0 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e0d7      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fa:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0ee      	beq.n	80022e4 <HAL_RCC_OscConfig+0x368>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002308:	f7fe fdea 	bl	8000ee0 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230e:	e00a      	b.n	8002326 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002310:	f7fe fde6 	bl	8000ee0 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e0c1      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002326:	4b40      	ldr	r3, [pc, #256]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1ee      	bne.n	8002310 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d105      	bne.n	8002344 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002338:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	4a3a      	ldr	r2, [pc, #232]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 800233e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002342:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80ad 	beq.w	80024a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800234e:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b08      	cmp	r3, #8
 8002358:	d060      	beq.n	800241c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d145      	bne.n	80023ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002362:	4b33      	ldr	r3, [pc, #204]	; (8002430 <HAL_RCC_OscConfig+0x4b4>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fdba 	bl	8000ee0 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe fdb6 	bl	8000ee0 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e093      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	4b29      	ldr	r3, [pc, #164]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69da      	ldr	r2, [r3, #28]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	019b      	lsls	r3, r3, #6
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	3b01      	subs	r3, #1
 80023a8:	041b      	lsls	r3, r3, #16
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	071b      	lsls	r3, r3, #28
 80023ba:	491b      	ldr	r1, [pc, #108]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCC_OscConfig+0x4b4>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe fd8b 	bl	8000ee0 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe fd87 	bl	8000ee0 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e064      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x452>
 80023ec:	e05c      	b.n	80024a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_RCC_OscConfig+0x4b4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7fe fd74 	bl	8000ee0 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe fd70 	bl	8000ee0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e04d      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCC_OscConfig+0x4ac>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x480>
 800241a:	e045      	b.n	80024a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d107      	bne.n	8002434 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e040      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
 8002428:	40023800 	.word	0x40023800
 800242c:	40007000 	.word	0x40007000
 8002430:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002434:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <HAL_RCC_OscConfig+0x538>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d030      	beq.n	80024a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d129      	bne.n	80024a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d122      	bne.n	80024a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002464:	4013      	ands	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800246a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800246c:	4293      	cmp	r3, r2
 800246e:	d119      	bne.n	80024a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	3b01      	subs	r3, #1
 800247e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d10f      	bne.n	80024a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800

080024b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e042      	b.n	8002550 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fb46 	bl	8000b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f973 	bl	80027e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695a      	ldr	r2, [r3, #20]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b20      	cmp	r3, #32
 8002576:	d175      	bne.n	8002664 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <HAL_UART_Transmit+0x2c>
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e06e      	b.n	8002666 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2221      	movs	r2, #33	; 0x21
 8002592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002596:	f7fe fca3 	bl	8000ee0 <HAL_GetTick>
 800259a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	88fa      	ldrh	r2, [r7, #6]
 80025a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	88fa      	ldrh	r2, [r7, #6]
 80025a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b0:	d108      	bne.n	80025c4 <HAL_UART_Transmit+0x6c>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d104      	bne.n	80025c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	e003      	b.n	80025cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025cc:	e02e      	b.n	800262c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2200      	movs	r2, #0
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 f848 	bl	800266e <UART_WaitOnFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e03a      	b.n	8002666 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002604:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	3302      	adds	r3, #2
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	e007      	b.n	800261e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	781a      	ldrb	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	3301      	adds	r3, #1
 800261c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002630:	b29b      	uxth	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1cb      	bne.n	80025ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2200      	movs	r2, #0
 800263e:	2140      	movs	r1, #64	; 0x40
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f814 	bl	800266e <UART_WaitOnFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e006      	b.n	8002666 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	e000      	b.n	8002666 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002664:	2302      	movs	r3, #2
  }
}
 8002666:	4618      	mov	r0, r3
 8002668:	3720      	adds	r7, #32
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	4613      	mov	r3, r2
 800267c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800267e:	e03b      	b.n	80026f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002686:	d037      	beq.n	80026f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002688:	f7fe fc2a 	bl	8000ee0 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	6a3a      	ldr	r2, [r7, #32]
 8002694:	429a      	cmp	r2, r3
 8002696:	d302      	bcc.n	800269e <UART_WaitOnFlagUntilTimeout+0x30>
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e03a      	b.n	8002718 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d023      	beq.n	80026f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b80      	cmp	r3, #128	; 0x80
 80026b4:	d020      	beq.n	80026f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b40      	cmp	r3, #64	; 0x40
 80026ba:	d01d      	beq.n	80026f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d116      	bne.n	80026f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 f81d 	bl	8002720 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2208      	movs	r2, #8
 80026ea:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e00f      	b.n	8002718 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4013      	ands	r3, r2
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	429a      	cmp	r2, r3
 8002714:	d0b4      	beq.n	8002680 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002720:	b480      	push	{r7}
 8002722:	b095      	sub	sp, #84	; 0x54
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	330c      	adds	r3, #12
 800272e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002732:	e853 3f00 	ldrex	r3, [r3]
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	330c      	adds	r3, #12
 8002746:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002748:	643a      	str	r2, [r7, #64]	; 0x40
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800274e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002750:	e841 2300 	strex	r3, r2, [r1]
 8002754:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e5      	bne.n	8002728 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3314      	adds	r3, #20
 8002762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	e853 3f00 	ldrex	r3, [r3]
 800276a:	61fb      	str	r3, [r7, #28]
   return(result);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	64bb      	str	r3, [r7, #72]	; 0x48
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3314      	adds	r3, #20
 800277a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800277c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002784:	e841 2300 	strex	r3, r2, [r1]
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e5      	bne.n	800275c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	2b01      	cmp	r3, #1
 8002796:	d119      	bne.n	80027cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	330c      	adds	r3, #12
 800279e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	e853 3f00 	ldrex	r3, [r3]
 80027a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f023 0310 	bic.w	r3, r3, #16
 80027ae:	647b      	str	r3, [r7, #68]	; 0x44
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	330c      	adds	r3, #12
 80027b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027b8:	61ba      	str	r2, [r7, #24]
 80027ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027bc:	6979      	ldr	r1, [r7, #20]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	e841 2300 	strex	r3, r2, [r1]
 80027c4:	613b      	str	r3, [r7, #16]
   return(result);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e5      	bne.n	8002798 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027da:	bf00      	nop
 80027dc:	3754      	adds	r7, #84	; 0x54
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027ec:	b0c0      	sub	sp, #256	; 0x100
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002804:	68d9      	ldr	r1, [r3, #12]
 8002806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	ea40 0301 	orr.w	r3, r0, r1
 8002810:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	431a      	orrs	r2, r3
 8002820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	431a      	orrs	r2, r3
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002840:	f021 010c 	bic.w	r1, r1, #12
 8002844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800284e:	430b      	orrs	r3, r1
 8002850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800285e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002862:	6999      	ldr	r1, [r3, #24]
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	ea40 0301 	orr.w	r3, r0, r1
 800286e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4b8f      	ldr	r3, [pc, #572]	; (8002ab4 <UART_SetConfig+0x2cc>)
 8002878:	429a      	cmp	r2, r3
 800287a:	d005      	beq.n	8002888 <UART_SetConfig+0xa0>
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4b8d      	ldr	r3, [pc, #564]	; (8002ab8 <UART_SetConfig+0x2d0>)
 8002884:	429a      	cmp	r2, r3
 8002886:	d104      	bne.n	8002892 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002888:	f7ff f934 	bl	8001af4 <HAL_RCC_GetPCLK2Freq>
 800288c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002890:	e003      	b.n	800289a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002892:	f7ff f91b 	bl	8001acc <HAL_RCC_GetPCLK1Freq>
 8002896:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800289a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028a4:	f040 810c 	bne.w	8002ac0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ac:	2200      	movs	r2, #0
 80028ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80028b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80028ba:	4622      	mov	r2, r4
 80028bc:	462b      	mov	r3, r5
 80028be:	1891      	adds	r1, r2, r2
 80028c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80028c2:	415b      	adcs	r3, r3
 80028c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028ca:	4621      	mov	r1, r4
 80028cc:	eb12 0801 	adds.w	r8, r2, r1
 80028d0:	4629      	mov	r1, r5
 80028d2:	eb43 0901 	adc.w	r9, r3, r1
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ea:	4690      	mov	r8, r2
 80028ec:	4699      	mov	r9, r3
 80028ee:	4623      	mov	r3, r4
 80028f0:	eb18 0303 	adds.w	r3, r8, r3
 80028f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028f8:	462b      	mov	r3, r5
 80028fa:	eb49 0303 	adc.w	r3, r9, r3
 80028fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800290e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002912:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002916:	460b      	mov	r3, r1
 8002918:	18db      	adds	r3, r3, r3
 800291a:	653b      	str	r3, [r7, #80]	; 0x50
 800291c:	4613      	mov	r3, r2
 800291e:	eb42 0303 	adc.w	r3, r2, r3
 8002922:	657b      	str	r3, [r7, #84]	; 0x54
 8002924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002928:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800292c:	f7fd fc74 	bl	8000218 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4b61      	ldr	r3, [pc, #388]	; (8002abc <UART_SetConfig+0x2d4>)
 8002936:	fba3 2302 	umull	r2, r3, r3, r2
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	011c      	lsls	r4, r3, #4
 800293e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002942:	2200      	movs	r2, #0
 8002944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002948:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800294c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002950:	4642      	mov	r2, r8
 8002952:	464b      	mov	r3, r9
 8002954:	1891      	adds	r1, r2, r2
 8002956:	64b9      	str	r1, [r7, #72]	; 0x48
 8002958:	415b      	adcs	r3, r3
 800295a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800295c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002960:	4641      	mov	r1, r8
 8002962:	eb12 0a01 	adds.w	sl, r2, r1
 8002966:	4649      	mov	r1, r9
 8002968:	eb43 0b01 	adc.w	fp, r3, r1
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002978:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800297c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002980:	4692      	mov	sl, r2
 8002982:	469b      	mov	fp, r3
 8002984:	4643      	mov	r3, r8
 8002986:	eb1a 0303 	adds.w	r3, sl, r3
 800298a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800298e:	464b      	mov	r3, r9
 8002990:	eb4b 0303 	adc.w	r3, fp, r3
 8002994:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80029ac:	460b      	mov	r3, r1
 80029ae:	18db      	adds	r3, r3, r3
 80029b0:	643b      	str	r3, [r7, #64]	; 0x40
 80029b2:	4613      	mov	r3, r2
 80029b4:	eb42 0303 	adc.w	r3, r2, r3
 80029b8:	647b      	str	r3, [r7, #68]	; 0x44
 80029ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80029c2:	f7fd fc29 	bl	8000218 <__aeabi_uldivmod>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <UART_SetConfig+0x2d4>)
 80029ce:	fba3 2301 	umull	r2, r3, r3, r1
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2264      	movs	r2, #100	; 0x64
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	1acb      	subs	r3, r1, r3
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80029e2:	4b36      	ldr	r3, [pc, #216]	; (8002abc <UART_SetConfig+0x2d4>)
 80029e4:	fba3 2302 	umull	r2, r3, r3, r2
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029f0:	441c      	add	r4, r3
 80029f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a04:	4642      	mov	r2, r8
 8002a06:	464b      	mov	r3, r9
 8002a08:	1891      	adds	r1, r2, r2
 8002a0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a0c:	415b      	adcs	r3, r3
 8002a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a14:	4641      	mov	r1, r8
 8002a16:	1851      	adds	r1, r2, r1
 8002a18:	6339      	str	r1, [r7, #48]	; 0x30
 8002a1a:	4649      	mov	r1, r9
 8002a1c:	414b      	adcs	r3, r1
 8002a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a2c:	4659      	mov	r1, fp
 8002a2e:	00cb      	lsls	r3, r1, #3
 8002a30:	4651      	mov	r1, sl
 8002a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a36:	4651      	mov	r1, sl
 8002a38:	00ca      	lsls	r2, r1, #3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4642      	mov	r2, r8
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a48:	464b      	mov	r3, r9
 8002a4a:	460a      	mov	r2, r1
 8002a4c:	eb42 0303 	adc.w	r3, r2, r3
 8002a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a68:	460b      	mov	r3, r1
 8002a6a:	18db      	adds	r3, r3, r3
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a6e:	4613      	mov	r3, r2
 8002a70:	eb42 0303 	adc.w	r3, r2, r3
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a7e:	f7fd fbcb 	bl	8000218 <__aeabi_uldivmod>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <UART_SetConfig+0x2d4>)
 8002a88:	fba3 1302 	umull	r1, r3, r3, r2
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	2164      	movs	r1, #100	; 0x64
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	3332      	adds	r3, #50	; 0x32
 8002a9a:	4a08      	ldr	r2, [pc, #32]	; (8002abc <UART_SetConfig+0x2d4>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	f003 0207 	and.w	r2, r3, #7
 8002aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4422      	add	r2, r4
 8002aae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ab0:	e106      	b.n	8002cc0 <UART_SetConfig+0x4d8>
 8002ab2:	bf00      	nop
 8002ab4:	40011000 	.word	0x40011000
 8002ab8:	40011400 	.word	0x40011400
 8002abc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002aca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ace:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ad2:	4642      	mov	r2, r8
 8002ad4:	464b      	mov	r3, r9
 8002ad6:	1891      	adds	r1, r2, r2
 8002ad8:	6239      	str	r1, [r7, #32]
 8002ada:	415b      	adcs	r3, r3
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	1854      	adds	r4, r2, r1
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	eb43 0501 	adc.w	r5, r3, r1
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	00eb      	lsls	r3, r5, #3
 8002af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002afa:	00e2      	lsls	r2, r4, #3
 8002afc:	4614      	mov	r4, r2
 8002afe:	461d      	mov	r5, r3
 8002b00:	4643      	mov	r3, r8
 8002b02:	18e3      	adds	r3, r4, r3
 8002b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b08:	464b      	mov	r3, r9
 8002b0a:	eb45 0303 	adc.w	r3, r5, r3
 8002b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b2e:	4629      	mov	r1, r5
 8002b30:	008b      	lsls	r3, r1, #2
 8002b32:	4621      	mov	r1, r4
 8002b34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b38:	4621      	mov	r1, r4
 8002b3a:	008a      	lsls	r2, r1, #2
 8002b3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b40:	f7fd fb6a 	bl	8000218 <__aeabi_uldivmod>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4b60      	ldr	r3, [pc, #384]	; (8002ccc <UART_SetConfig+0x4e4>)
 8002b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	011c      	lsls	r4, r3, #4
 8002b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b64:	4642      	mov	r2, r8
 8002b66:	464b      	mov	r3, r9
 8002b68:	1891      	adds	r1, r2, r2
 8002b6a:	61b9      	str	r1, [r7, #24]
 8002b6c:	415b      	adcs	r3, r3
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b74:	4641      	mov	r1, r8
 8002b76:	1851      	adds	r1, r2, r1
 8002b78:	6139      	str	r1, [r7, #16]
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	414b      	adcs	r3, r1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b8c:	4659      	mov	r1, fp
 8002b8e:	00cb      	lsls	r3, r1, #3
 8002b90:	4651      	mov	r1, sl
 8002b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b96:	4651      	mov	r1, sl
 8002b98:	00ca      	lsls	r2, r1, #3
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4642      	mov	r2, r8
 8002ba2:	189b      	adds	r3, r3, r2
 8002ba4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ba8:	464b      	mov	r3, r9
 8002baa:	460a      	mov	r2, r1
 8002bac:	eb42 0303 	adc.w	r3, r2, r3
 8002bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002bcc:	4649      	mov	r1, r9
 8002bce:	008b      	lsls	r3, r1, #2
 8002bd0:	4641      	mov	r1, r8
 8002bd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bd6:	4641      	mov	r1, r8
 8002bd8:	008a      	lsls	r2, r1, #2
 8002bda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002bde:	f7fd fb1b 	bl	8000218 <__aeabi_uldivmod>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	4b38      	ldr	r3, [pc, #224]	; (8002ccc <UART_SetConfig+0x4e4>)
 8002bea:	fba3 2301 	umull	r2, r3, r3, r1
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2264      	movs	r2, #100	; 0x64
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	1acb      	subs	r3, r1, r3
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	3332      	adds	r3, #50	; 0x32
 8002bfc:	4a33      	ldr	r2, [pc, #204]	; (8002ccc <UART_SetConfig+0x4e4>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c08:	441c      	add	r4, r3
 8002c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c0e:	2200      	movs	r2, #0
 8002c10:	673b      	str	r3, [r7, #112]	; 0x70
 8002c12:	677a      	str	r2, [r7, #116]	; 0x74
 8002c14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c18:	4642      	mov	r2, r8
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	1891      	adds	r1, r2, r2
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	415b      	adcs	r3, r3
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c28:	4641      	mov	r1, r8
 8002c2a:	1851      	adds	r1, r2, r1
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	4649      	mov	r1, r9
 8002c30:	414b      	adcs	r3, r1
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c40:	4659      	mov	r1, fp
 8002c42:	00cb      	lsls	r3, r1, #3
 8002c44:	4651      	mov	r1, sl
 8002c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c4a:	4651      	mov	r1, sl
 8002c4c:	00ca      	lsls	r2, r1, #3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4619      	mov	r1, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	4642      	mov	r2, r8
 8002c56:	189b      	adds	r3, r3, r2
 8002c58:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c5a:	464b      	mov	r3, r9
 8002c5c:	460a      	mov	r2, r1
 8002c5e:	eb42 0303 	adc.w	r3, r2, r3
 8002c62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	663b      	str	r3, [r7, #96]	; 0x60
 8002c6e:	667a      	str	r2, [r7, #100]	; 0x64
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	008b      	lsls	r3, r1, #2
 8002c80:	4641      	mov	r1, r8
 8002c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c86:	4641      	mov	r1, r8
 8002c88:	008a      	lsls	r2, r1, #2
 8002c8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c8e:	f7fd fac3 	bl	8000218 <__aeabi_uldivmod>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <UART_SetConfig+0x4e4>)
 8002c98:	fba3 1302 	umull	r1, r3, r3, r2
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	2164      	movs	r1, #100	; 0x64
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	3332      	adds	r3, #50	; 0x32
 8002caa:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <UART_SetConfig+0x4e4>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	f003 020f 	and.w	r2, r3, #15
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4422      	add	r2, r4
 8002cbe:	609a      	str	r2, [r3, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ccc:	51eb851f 	.word	0x51eb851f

08002cd0 <std>:
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	b510      	push	{r4, lr}
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8002cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cde:	6083      	str	r3, [r0, #8]
 8002ce0:	8181      	strh	r1, [r0, #12]
 8002ce2:	6643      	str	r3, [r0, #100]	; 0x64
 8002ce4:	81c2      	strh	r2, [r0, #14]
 8002ce6:	6183      	str	r3, [r0, #24]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	2208      	movs	r2, #8
 8002cec:	305c      	adds	r0, #92	; 0x5c
 8002cee:	f000 f8fc 	bl	8002eea <memset>
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <std+0x58>)
 8002cf4:	6263      	str	r3, [r4, #36]	; 0x24
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <std+0x5c>)
 8002cf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <std+0x60>)
 8002cfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <std+0x64>)
 8002d00:	6323      	str	r3, [r4, #48]	; 0x30
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <std+0x68>)
 8002d04:	6224      	str	r4, [r4, #32]
 8002d06:	429c      	cmp	r4, r3
 8002d08:	d006      	beq.n	8002d18 <std+0x48>
 8002d0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002d0e:	4294      	cmp	r4, r2
 8002d10:	d002      	beq.n	8002d18 <std+0x48>
 8002d12:	33d0      	adds	r3, #208	; 0xd0
 8002d14:	429c      	cmp	r4, r3
 8002d16:	d105      	bne.n	8002d24 <std+0x54>
 8002d18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d20:	f000 b96e 	b.w	8003000 <__retarget_lock_init_recursive>
 8002d24:	bd10      	pop	{r4, pc}
 8002d26:	bf00      	nop
 8002d28:	08002e65 	.word	0x08002e65
 8002d2c:	08002e87 	.word	0x08002e87
 8002d30:	08002ebf 	.word	0x08002ebf
 8002d34:	08002ee3 	.word	0x08002ee3
 8002d38:	2000011c 	.word	0x2000011c

08002d3c <stdio_exit_handler>:
 8002d3c:	4a02      	ldr	r2, [pc, #8]	; (8002d48 <stdio_exit_handler+0xc>)
 8002d3e:	4903      	ldr	r1, [pc, #12]	; (8002d4c <stdio_exit_handler+0x10>)
 8002d40:	4803      	ldr	r0, [pc, #12]	; (8002d50 <stdio_exit_handler+0x14>)
 8002d42:	f000 b869 	b.w	8002e18 <_fwalk_sglue>
 8002d46:	bf00      	nop
 8002d48:	2000000c 	.word	0x2000000c
 8002d4c:	08003321 	.word	0x08003321
 8002d50:	20000018 	.word	0x20000018

08002d54 <cleanup_stdio>:
 8002d54:	6841      	ldr	r1, [r0, #4]
 8002d56:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <cleanup_stdio+0x34>)
 8002d58:	4299      	cmp	r1, r3
 8002d5a:	b510      	push	{r4, lr}
 8002d5c:	4604      	mov	r4, r0
 8002d5e:	d001      	beq.n	8002d64 <cleanup_stdio+0x10>
 8002d60:	f000 fade 	bl	8003320 <_fflush_r>
 8002d64:	68a1      	ldr	r1, [r4, #8]
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <cleanup_stdio+0x38>)
 8002d68:	4299      	cmp	r1, r3
 8002d6a:	d002      	beq.n	8002d72 <cleanup_stdio+0x1e>
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f000 fad7 	bl	8003320 <_fflush_r>
 8002d72:	68e1      	ldr	r1, [r4, #12]
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <cleanup_stdio+0x3c>)
 8002d76:	4299      	cmp	r1, r3
 8002d78:	d004      	beq.n	8002d84 <cleanup_stdio+0x30>
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d80:	f000 bace 	b.w	8003320 <_fflush_r>
 8002d84:	bd10      	pop	{r4, pc}
 8002d86:	bf00      	nop
 8002d88:	2000011c 	.word	0x2000011c
 8002d8c:	20000184 	.word	0x20000184
 8002d90:	200001ec 	.word	0x200001ec

08002d94 <global_stdio_init.part.0>:
 8002d94:	b510      	push	{r4, lr}
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <global_stdio_init.part.0+0x30>)
 8002d98:	4c0b      	ldr	r4, [pc, #44]	; (8002dc8 <global_stdio_init.part.0+0x34>)
 8002d9a:	4a0c      	ldr	r2, [pc, #48]	; (8002dcc <global_stdio_init.part.0+0x38>)
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	4620      	mov	r0, r4
 8002da0:	2200      	movs	r2, #0
 8002da2:	2104      	movs	r1, #4
 8002da4:	f7ff ff94 	bl	8002cd0 <std>
 8002da8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002dac:	2201      	movs	r2, #1
 8002dae:	2109      	movs	r1, #9
 8002db0:	f7ff ff8e 	bl	8002cd0 <std>
 8002db4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002db8:	2202      	movs	r2, #2
 8002dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dbe:	2112      	movs	r1, #18
 8002dc0:	f7ff bf86 	b.w	8002cd0 <std>
 8002dc4:	20000254 	.word	0x20000254
 8002dc8:	2000011c 	.word	0x2000011c
 8002dcc:	08002d3d 	.word	0x08002d3d

08002dd0 <__sfp_lock_acquire>:
 8002dd0:	4801      	ldr	r0, [pc, #4]	; (8002dd8 <__sfp_lock_acquire+0x8>)
 8002dd2:	f000 b916 	b.w	8003002 <__retarget_lock_acquire_recursive>
 8002dd6:	bf00      	nop
 8002dd8:	2000025d 	.word	0x2000025d

08002ddc <__sfp_lock_release>:
 8002ddc:	4801      	ldr	r0, [pc, #4]	; (8002de4 <__sfp_lock_release+0x8>)
 8002dde:	f000 b911 	b.w	8003004 <__retarget_lock_release_recursive>
 8002de2:	bf00      	nop
 8002de4:	2000025d 	.word	0x2000025d

08002de8 <__sinit>:
 8002de8:	b510      	push	{r4, lr}
 8002dea:	4604      	mov	r4, r0
 8002dec:	f7ff fff0 	bl	8002dd0 <__sfp_lock_acquire>
 8002df0:	6a23      	ldr	r3, [r4, #32]
 8002df2:	b11b      	cbz	r3, 8002dfc <__sinit+0x14>
 8002df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002df8:	f7ff bff0 	b.w	8002ddc <__sfp_lock_release>
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <__sinit+0x28>)
 8002dfe:	6223      	str	r3, [r4, #32]
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <__sinit+0x2c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f5      	bne.n	8002df4 <__sinit+0xc>
 8002e08:	f7ff ffc4 	bl	8002d94 <global_stdio_init.part.0>
 8002e0c:	e7f2      	b.n	8002df4 <__sinit+0xc>
 8002e0e:	bf00      	nop
 8002e10:	08002d55 	.word	0x08002d55
 8002e14:	20000254 	.word	0x20000254

08002e18 <_fwalk_sglue>:
 8002e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e1c:	4607      	mov	r7, r0
 8002e1e:	4688      	mov	r8, r1
 8002e20:	4614      	mov	r4, r2
 8002e22:	2600      	movs	r6, #0
 8002e24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e28:	f1b9 0901 	subs.w	r9, r9, #1
 8002e2c:	d505      	bpl.n	8002e3a <_fwalk_sglue+0x22>
 8002e2e:	6824      	ldr	r4, [r4, #0]
 8002e30:	2c00      	cmp	r4, #0
 8002e32:	d1f7      	bne.n	8002e24 <_fwalk_sglue+0xc>
 8002e34:	4630      	mov	r0, r6
 8002e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e3a:	89ab      	ldrh	r3, [r5, #12]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d907      	bls.n	8002e50 <_fwalk_sglue+0x38>
 8002e40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e44:	3301      	adds	r3, #1
 8002e46:	d003      	beq.n	8002e50 <_fwalk_sglue+0x38>
 8002e48:	4629      	mov	r1, r5
 8002e4a:	4638      	mov	r0, r7
 8002e4c:	47c0      	blx	r8
 8002e4e:	4306      	orrs	r6, r0
 8002e50:	3568      	adds	r5, #104	; 0x68
 8002e52:	e7e9      	b.n	8002e28 <_fwalk_sglue+0x10>

08002e54 <putchar>:
 8002e54:	4b02      	ldr	r3, [pc, #8]	; (8002e60 <putchar+0xc>)
 8002e56:	4601      	mov	r1, r0
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	6882      	ldr	r2, [r0, #8]
 8002e5c:	f000 ba88 	b.w	8003370 <_putc_r>
 8002e60:	20000064 	.word	0x20000064

08002e64 <__sread>:
 8002e64:	b510      	push	{r4, lr}
 8002e66:	460c      	mov	r4, r1
 8002e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e6c:	f000 f87a 	bl	8002f64 <_read_r>
 8002e70:	2800      	cmp	r0, #0
 8002e72:	bfab      	itete	ge
 8002e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e76:	89a3      	ldrhlt	r3, [r4, #12]
 8002e78:	181b      	addge	r3, r3, r0
 8002e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e7e:	bfac      	ite	ge
 8002e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e82:	81a3      	strhlt	r3, [r4, #12]
 8002e84:	bd10      	pop	{r4, pc}

08002e86 <__swrite>:
 8002e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e8a:	461f      	mov	r7, r3
 8002e8c:	898b      	ldrh	r3, [r1, #12]
 8002e8e:	05db      	lsls	r3, r3, #23
 8002e90:	4605      	mov	r5, r0
 8002e92:	460c      	mov	r4, r1
 8002e94:	4616      	mov	r6, r2
 8002e96:	d505      	bpl.n	8002ea4 <__swrite+0x1e>
 8002e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f000 f84e 	bl	8002f40 <_lseek_r>
 8002ea4:	89a3      	ldrh	r3, [r4, #12]
 8002ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002eae:	81a3      	strh	r3, [r4, #12]
 8002eb0:	4632      	mov	r2, r6
 8002eb2:	463b      	mov	r3, r7
 8002eb4:	4628      	mov	r0, r5
 8002eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002eba:	f000 b865 	b.w	8002f88 <_write_r>

08002ebe <__sseek>:
 8002ebe:	b510      	push	{r4, lr}
 8002ec0:	460c      	mov	r4, r1
 8002ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ec6:	f000 f83b 	bl	8002f40 <_lseek_r>
 8002eca:	1c43      	adds	r3, r0, #1
 8002ecc:	89a3      	ldrh	r3, [r4, #12]
 8002ece:	bf15      	itete	ne
 8002ed0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002eda:	81a3      	strheq	r3, [r4, #12]
 8002edc:	bf18      	it	ne
 8002ede:	81a3      	strhne	r3, [r4, #12]
 8002ee0:	bd10      	pop	{r4, pc}

08002ee2 <__sclose>:
 8002ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ee6:	f000 b81b 	b.w	8002f20 <_close_r>

08002eea <memset>:
 8002eea:	4402      	add	r2, r0
 8002eec:	4603      	mov	r3, r0
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d100      	bne.n	8002ef4 <memset+0xa>
 8002ef2:	4770      	bx	lr
 8002ef4:	f803 1b01 	strb.w	r1, [r3], #1
 8002ef8:	e7f9      	b.n	8002eee <memset+0x4>

08002efa <strncpy>:
 8002efa:	b510      	push	{r4, lr}
 8002efc:	3901      	subs	r1, #1
 8002efe:	4603      	mov	r3, r0
 8002f00:	b132      	cbz	r2, 8002f10 <strncpy+0x16>
 8002f02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002f06:	f803 4b01 	strb.w	r4, [r3], #1
 8002f0a:	3a01      	subs	r2, #1
 8002f0c:	2c00      	cmp	r4, #0
 8002f0e:	d1f7      	bne.n	8002f00 <strncpy+0x6>
 8002f10:	441a      	add	r2, r3
 8002f12:	2100      	movs	r1, #0
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d100      	bne.n	8002f1a <strncpy+0x20>
 8002f18:	bd10      	pop	{r4, pc}
 8002f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f1e:	e7f9      	b.n	8002f14 <strncpy+0x1a>

08002f20 <_close_r>:
 8002f20:	b538      	push	{r3, r4, r5, lr}
 8002f22:	4d06      	ldr	r5, [pc, #24]	; (8002f3c <_close_r+0x1c>)
 8002f24:	2300      	movs	r3, #0
 8002f26:	4604      	mov	r4, r0
 8002f28:	4608      	mov	r0, r1
 8002f2a:	602b      	str	r3, [r5, #0]
 8002f2c:	f7fd fecb 	bl	8000cc6 <_close>
 8002f30:	1c43      	adds	r3, r0, #1
 8002f32:	d102      	bne.n	8002f3a <_close_r+0x1a>
 8002f34:	682b      	ldr	r3, [r5, #0]
 8002f36:	b103      	cbz	r3, 8002f3a <_close_r+0x1a>
 8002f38:	6023      	str	r3, [r4, #0]
 8002f3a:	bd38      	pop	{r3, r4, r5, pc}
 8002f3c:	20000258 	.word	0x20000258

08002f40 <_lseek_r>:
 8002f40:	b538      	push	{r3, r4, r5, lr}
 8002f42:	4d07      	ldr	r5, [pc, #28]	; (8002f60 <_lseek_r+0x20>)
 8002f44:	4604      	mov	r4, r0
 8002f46:	4608      	mov	r0, r1
 8002f48:	4611      	mov	r1, r2
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	602a      	str	r2, [r5, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f7fd fee0 	bl	8000d14 <_lseek>
 8002f54:	1c43      	adds	r3, r0, #1
 8002f56:	d102      	bne.n	8002f5e <_lseek_r+0x1e>
 8002f58:	682b      	ldr	r3, [r5, #0]
 8002f5a:	b103      	cbz	r3, 8002f5e <_lseek_r+0x1e>
 8002f5c:	6023      	str	r3, [r4, #0]
 8002f5e:	bd38      	pop	{r3, r4, r5, pc}
 8002f60:	20000258 	.word	0x20000258

08002f64 <_read_r>:
 8002f64:	b538      	push	{r3, r4, r5, lr}
 8002f66:	4d07      	ldr	r5, [pc, #28]	; (8002f84 <_read_r+0x20>)
 8002f68:	4604      	mov	r4, r0
 8002f6a:	4608      	mov	r0, r1
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	2200      	movs	r2, #0
 8002f70:	602a      	str	r2, [r5, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f7fd fe6e 	bl	8000c54 <_read>
 8002f78:	1c43      	adds	r3, r0, #1
 8002f7a:	d102      	bne.n	8002f82 <_read_r+0x1e>
 8002f7c:	682b      	ldr	r3, [r5, #0]
 8002f7e:	b103      	cbz	r3, 8002f82 <_read_r+0x1e>
 8002f80:	6023      	str	r3, [r4, #0]
 8002f82:	bd38      	pop	{r3, r4, r5, pc}
 8002f84:	20000258 	.word	0x20000258

08002f88 <_write_r>:
 8002f88:	b538      	push	{r3, r4, r5, lr}
 8002f8a:	4d07      	ldr	r5, [pc, #28]	; (8002fa8 <_write_r+0x20>)
 8002f8c:	4604      	mov	r4, r0
 8002f8e:	4608      	mov	r0, r1
 8002f90:	4611      	mov	r1, r2
 8002f92:	2200      	movs	r2, #0
 8002f94:	602a      	str	r2, [r5, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	f7fd fe79 	bl	8000c8e <_write>
 8002f9c:	1c43      	adds	r3, r0, #1
 8002f9e:	d102      	bne.n	8002fa6 <_write_r+0x1e>
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	b103      	cbz	r3, 8002fa6 <_write_r+0x1e>
 8002fa4:	6023      	str	r3, [r4, #0]
 8002fa6:	bd38      	pop	{r3, r4, r5, pc}
 8002fa8:	20000258 	.word	0x20000258

08002fac <__errno>:
 8002fac:	4b01      	ldr	r3, [pc, #4]	; (8002fb4 <__errno+0x8>)
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000064 	.word	0x20000064

08002fb8 <__libc_init_array>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	4d0d      	ldr	r5, [pc, #52]	; (8002ff0 <__libc_init_array+0x38>)
 8002fbc:	4c0d      	ldr	r4, [pc, #52]	; (8002ff4 <__libc_init_array+0x3c>)
 8002fbe:	1b64      	subs	r4, r4, r5
 8002fc0:	10a4      	asrs	r4, r4, #2
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	42a6      	cmp	r6, r4
 8002fc6:	d109      	bne.n	8002fdc <__libc_init_array+0x24>
 8002fc8:	4d0b      	ldr	r5, [pc, #44]	; (8002ff8 <__libc_init_array+0x40>)
 8002fca:	4c0c      	ldr	r4, [pc, #48]	; (8002ffc <__libc_init_array+0x44>)
 8002fcc:	f000 fb2e 	bl	800362c <_init>
 8002fd0:	1b64      	subs	r4, r4, r5
 8002fd2:	10a4      	asrs	r4, r4, #2
 8002fd4:	2600      	movs	r6, #0
 8002fd6:	42a6      	cmp	r6, r4
 8002fd8:	d105      	bne.n	8002fe6 <__libc_init_array+0x2e>
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
 8002fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe0:	4798      	blx	r3
 8002fe2:	3601      	adds	r6, #1
 8002fe4:	e7ee      	b.n	8002fc4 <__libc_init_array+0xc>
 8002fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fea:	4798      	blx	r3
 8002fec:	3601      	adds	r6, #1
 8002fee:	e7f2      	b.n	8002fd6 <__libc_init_array+0x1e>
 8002ff0:	08003804 	.word	0x08003804
 8002ff4:	08003804 	.word	0x08003804
 8002ff8:	08003804 	.word	0x08003804
 8002ffc:	08003808 	.word	0x08003808

08003000 <__retarget_lock_init_recursive>:
 8003000:	4770      	bx	lr

08003002 <__retarget_lock_acquire_recursive>:
 8003002:	4770      	bx	lr

08003004 <__retarget_lock_release_recursive>:
 8003004:	4770      	bx	lr

08003006 <memcpy>:
 8003006:	440a      	add	r2, r1
 8003008:	4291      	cmp	r1, r2
 800300a:	f100 33ff 	add.w	r3, r0, #4294967295
 800300e:	d100      	bne.n	8003012 <memcpy+0xc>
 8003010:	4770      	bx	lr
 8003012:	b510      	push	{r4, lr}
 8003014:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003018:	f803 4f01 	strb.w	r4, [r3, #1]!
 800301c:	4291      	cmp	r1, r2
 800301e:	d1f9      	bne.n	8003014 <memcpy+0xe>
 8003020:	bd10      	pop	{r4, pc}
	...

08003024 <_free_r>:
 8003024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003026:	2900      	cmp	r1, #0
 8003028:	d044      	beq.n	80030b4 <_free_r+0x90>
 800302a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800302e:	9001      	str	r0, [sp, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f1a1 0404 	sub.w	r4, r1, #4
 8003036:	bfb8      	it	lt
 8003038:	18e4      	addlt	r4, r4, r3
 800303a:	f000 f8df 	bl	80031fc <__malloc_lock>
 800303e:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <_free_r+0x94>)
 8003040:	9801      	ldr	r0, [sp, #4]
 8003042:	6813      	ldr	r3, [r2, #0]
 8003044:	b933      	cbnz	r3, 8003054 <_free_r+0x30>
 8003046:	6063      	str	r3, [r4, #4]
 8003048:	6014      	str	r4, [r2, #0]
 800304a:	b003      	add	sp, #12
 800304c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003050:	f000 b8da 	b.w	8003208 <__malloc_unlock>
 8003054:	42a3      	cmp	r3, r4
 8003056:	d908      	bls.n	800306a <_free_r+0x46>
 8003058:	6825      	ldr	r5, [r4, #0]
 800305a:	1961      	adds	r1, r4, r5
 800305c:	428b      	cmp	r3, r1
 800305e:	bf01      	itttt	eq
 8003060:	6819      	ldreq	r1, [r3, #0]
 8003062:	685b      	ldreq	r3, [r3, #4]
 8003064:	1949      	addeq	r1, r1, r5
 8003066:	6021      	streq	r1, [r4, #0]
 8003068:	e7ed      	b.n	8003046 <_free_r+0x22>
 800306a:	461a      	mov	r2, r3
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	b10b      	cbz	r3, 8003074 <_free_r+0x50>
 8003070:	42a3      	cmp	r3, r4
 8003072:	d9fa      	bls.n	800306a <_free_r+0x46>
 8003074:	6811      	ldr	r1, [r2, #0]
 8003076:	1855      	adds	r5, r2, r1
 8003078:	42a5      	cmp	r5, r4
 800307a:	d10b      	bne.n	8003094 <_free_r+0x70>
 800307c:	6824      	ldr	r4, [r4, #0]
 800307e:	4421      	add	r1, r4
 8003080:	1854      	adds	r4, r2, r1
 8003082:	42a3      	cmp	r3, r4
 8003084:	6011      	str	r1, [r2, #0]
 8003086:	d1e0      	bne.n	800304a <_free_r+0x26>
 8003088:	681c      	ldr	r4, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	6053      	str	r3, [r2, #4]
 800308e:	440c      	add	r4, r1
 8003090:	6014      	str	r4, [r2, #0]
 8003092:	e7da      	b.n	800304a <_free_r+0x26>
 8003094:	d902      	bls.n	800309c <_free_r+0x78>
 8003096:	230c      	movs	r3, #12
 8003098:	6003      	str	r3, [r0, #0]
 800309a:	e7d6      	b.n	800304a <_free_r+0x26>
 800309c:	6825      	ldr	r5, [r4, #0]
 800309e:	1961      	adds	r1, r4, r5
 80030a0:	428b      	cmp	r3, r1
 80030a2:	bf04      	itt	eq
 80030a4:	6819      	ldreq	r1, [r3, #0]
 80030a6:	685b      	ldreq	r3, [r3, #4]
 80030a8:	6063      	str	r3, [r4, #4]
 80030aa:	bf04      	itt	eq
 80030ac:	1949      	addeq	r1, r1, r5
 80030ae:	6021      	streq	r1, [r4, #0]
 80030b0:	6054      	str	r4, [r2, #4]
 80030b2:	e7ca      	b.n	800304a <_free_r+0x26>
 80030b4:	b003      	add	sp, #12
 80030b6:	bd30      	pop	{r4, r5, pc}
 80030b8:	20000260 	.word	0x20000260

080030bc <sbrk_aligned>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	4e0e      	ldr	r6, [pc, #56]	; (80030f8 <sbrk_aligned+0x3c>)
 80030c0:	460c      	mov	r4, r1
 80030c2:	6831      	ldr	r1, [r6, #0]
 80030c4:	4605      	mov	r5, r0
 80030c6:	b911      	cbnz	r1, 80030ce <sbrk_aligned+0x12>
 80030c8:	f000 fa1c 	bl	8003504 <_sbrk_r>
 80030cc:	6030      	str	r0, [r6, #0]
 80030ce:	4621      	mov	r1, r4
 80030d0:	4628      	mov	r0, r5
 80030d2:	f000 fa17 	bl	8003504 <_sbrk_r>
 80030d6:	1c43      	adds	r3, r0, #1
 80030d8:	d00a      	beq.n	80030f0 <sbrk_aligned+0x34>
 80030da:	1cc4      	adds	r4, r0, #3
 80030dc:	f024 0403 	bic.w	r4, r4, #3
 80030e0:	42a0      	cmp	r0, r4
 80030e2:	d007      	beq.n	80030f4 <sbrk_aligned+0x38>
 80030e4:	1a21      	subs	r1, r4, r0
 80030e6:	4628      	mov	r0, r5
 80030e8:	f000 fa0c 	bl	8003504 <_sbrk_r>
 80030ec:	3001      	adds	r0, #1
 80030ee:	d101      	bne.n	80030f4 <sbrk_aligned+0x38>
 80030f0:	f04f 34ff 	mov.w	r4, #4294967295
 80030f4:	4620      	mov	r0, r4
 80030f6:	bd70      	pop	{r4, r5, r6, pc}
 80030f8:	20000264 	.word	0x20000264

080030fc <_malloc_r>:
 80030fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003100:	1ccd      	adds	r5, r1, #3
 8003102:	f025 0503 	bic.w	r5, r5, #3
 8003106:	3508      	adds	r5, #8
 8003108:	2d0c      	cmp	r5, #12
 800310a:	bf38      	it	cc
 800310c:	250c      	movcc	r5, #12
 800310e:	2d00      	cmp	r5, #0
 8003110:	4607      	mov	r7, r0
 8003112:	db01      	blt.n	8003118 <_malloc_r+0x1c>
 8003114:	42a9      	cmp	r1, r5
 8003116:	d905      	bls.n	8003124 <_malloc_r+0x28>
 8003118:	230c      	movs	r3, #12
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	2600      	movs	r6, #0
 800311e:	4630      	mov	r0, r6
 8003120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003124:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80031f8 <_malloc_r+0xfc>
 8003128:	f000 f868 	bl	80031fc <__malloc_lock>
 800312c:	f8d8 3000 	ldr.w	r3, [r8]
 8003130:	461c      	mov	r4, r3
 8003132:	bb5c      	cbnz	r4, 800318c <_malloc_r+0x90>
 8003134:	4629      	mov	r1, r5
 8003136:	4638      	mov	r0, r7
 8003138:	f7ff ffc0 	bl	80030bc <sbrk_aligned>
 800313c:	1c43      	adds	r3, r0, #1
 800313e:	4604      	mov	r4, r0
 8003140:	d155      	bne.n	80031ee <_malloc_r+0xf2>
 8003142:	f8d8 4000 	ldr.w	r4, [r8]
 8003146:	4626      	mov	r6, r4
 8003148:	2e00      	cmp	r6, #0
 800314a:	d145      	bne.n	80031d8 <_malloc_r+0xdc>
 800314c:	2c00      	cmp	r4, #0
 800314e:	d048      	beq.n	80031e2 <_malloc_r+0xe6>
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	4631      	mov	r1, r6
 8003154:	4638      	mov	r0, r7
 8003156:	eb04 0903 	add.w	r9, r4, r3
 800315a:	f000 f9d3 	bl	8003504 <_sbrk_r>
 800315e:	4581      	cmp	r9, r0
 8003160:	d13f      	bne.n	80031e2 <_malloc_r+0xe6>
 8003162:	6821      	ldr	r1, [r4, #0]
 8003164:	1a6d      	subs	r5, r5, r1
 8003166:	4629      	mov	r1, r5
 8003168:	4638      	mov	r0, r7
 800316a:	f7ff ffa7 	bl	80030bc <sbrk_aligned>
 800316e:	3001      	adds	r0, #1
 8003170:	d037      	beq.n	80031e2 <_malloc_r+0xe6>
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	442b      	add	r3, r5
 8003176:	6023      	str	r3, [r4, #0]
 8003178:	f8d8 3000 	ldr.w	r3, [r8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d038      	beq.n	80031f2 <_malloc_r+0xf6>
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	42a2      	cmp	r2, r4
 8003184:	d12b      	bne.n	80031de <_malloc_r+0xe2>
 8003186:	2200      	movs	r2, #0
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	e00f      	b.n	80031ac <_malloc_r+0xb0>
 800318c:	6822      	ldr	r2, [r4, #0]
 800318e:	1b52      	subs	r2, r2, r5
 8003190:	d41f      	bmi.n	80031d2 <_malloc_r+0xd6>
 8003192:	2a0b      	cmp	r2, #11
 8003194:	d917      	bls.n	80031c6 <_malloc_r+0xca>
 8003196:	1961      	adds	r1, r4, r5
 8003198:	42a3      	cmp	r3, r4
 800319a:	6025      	str	r5, [r4, #0]
 800319c:	bf18      	it	ne
 800319e:	6059      	strne	r1, [r3, #4]
 80031a0:	6863      	ldr	r3, [r4, #4]
 80031a2:	bf08      	it	eq
 80031a4:	f8c8 1000 	streq.w	r1, [r8]
 80031a8:	5162      	str	r2, [r4, r5]
 80031aa:	604b      	str	r3, [r1, #4]
 80031ac:	4638      	mov	r0, r7
 80031ae:	f104 060b 	add.w	r6, r4, #11
 80031b2:	f000 f829 	bl	8003208 <__malloc_unlock>
 80031b6:	f026 0607 	bic.w	r6, r6, #7
 80031ba:	1d23      	adds	r3, r4, #4
 80031bc:	1af2      	subs	r2, r6, r3
 80031be:	d0ae      	beq.n	800311e <_malloc_r+0x22>
 80031c0:	1b9b      	subs	r3, r3, r6
 80031c2:	50a3      	str	r3, [r4, r2]
 80031c4:	e7ab      	b.n	800311e <_malloc_r+0x22>
 80031c6:	42a3      	cmp	r3, r4
 80031c8:	6862      	ldr	r2, [r4, #4]
 80031ca:	d1dd      	bne.n	8003188 <_malloc_r+0x8c>
 80031cc:	f8c8 2000 	str.w	r2, [r8]
 80031d0:	e7ec      	b.n	80031ac <_malloc_r+0xb0>
 80031d2:	4623      	mov	r3, r4
 80031d4:	6864      	ldr	r4, [r4, #4]
 80031d6:	e7ac      	b.n	8003132 <_malloc_r+0x36>
 80031d8:	4634      	mov	r4, r6
 80031da:	6876      	ldr	r6, [r6, #4]
 80031dc:	e7b4      	b.n	8003148 <_malloc_r+0x4c>
 80031de:	4613      	mov	r3, r2
 80031e0:	e7cc      	b.n	800317c <_malloc_r+0x80>
 80031e2:	230c      	movs	r3, #12
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	4638      	mov	r0, r7
 80031e8:	f000 f80e 	bl	8003208 <__malloc_unlock>
 80031ec:	e797      	b.n	800311e <_malloc_r+0x22>
 80031ee:	6025      	str	r5, [r4, #0]
 80031f0:	e7dc      	b.n	80031ac <_malloc_r+0xb0>
 80031f2:	605b      	str	r3, [r3, #4]
 80031f4:	deff      	udf	#255	; 0xff
 80031f6:	bf00      	nop
 80031f8:	20000260 	.word	0x20000260

080031fc <__malloc_lock>:
 80031fc:	4801      	ldr	r0, [pc, #4]	; (8003204 <__malloc_lock+0x8>)
 80031fe:	f7ff bf00 	b.w	8003002 <__retarget_lock_acquire_recursive>
 8003202:	bf00      	nop
 8003204:	2000025c 	.word	0x2000025c

08003208 <__malloc_unlock>:
 8003208:	4801      	ldr	r0, [pc, #4]	; (8003210 <__malloc_unlock+0x8>)
 800320a:	f7ff befb 	b.w	8003004 <__retarget_lock_release_recursive>
 800320e:	bf00      	nop
 8003210:	2000025c 	.word	0x2000025c

08003214 <__sflush_r>:
 8003214:	898a      	ldrh	r2, [r1, #12]
 8003216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800321a:	4605      	mov	r5, r0
 800321c:	0710      	lsls	r0, r2, #28
 800321e:	460c      	mov	r4, r1
 8003220:	d458      	bmi.n	80032d4 <__sflush_r+0xc0>
 8003222:	684b      	ldr	r3, [r1, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	dc05      	bgt.n	8003234 <__sflush_r+0x20>
 8003228:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	dc02      	bgt.n	8003234 <__sflush_r+0x20>
 800322e:	2000      	movs	r0, #0
 8003230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003236:	2e00      	cmp	r6, #0
 8003238:	d0f9      	beq.n	800322e <__sflush_r+0x1a>
 800323a:	2300      	movs	r3, #0
 800323c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003240:	682f      	ldr	r7, [r5, #0]
 8003242:	6a21      	ldr	r1, [r4, #32]
 8003244:	602b      	str	r3, [r5, #0]
 8003246:	d032      	beq.n	80032ae <__sflush_r+0x9a>
 8003248:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800324a:	89a3      	ldrh	r3, [r4, #12]
 800324c:	075a      	lsls	r2, r3, #29
 800324e:	d505      	bpl.n	800325c <__sflush_r+0x48>
 8003250:	6863      	ldr	r3, [r4, #4]
 8003252:	1ac0      	subs	r0, r0, r3
 8003254:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003256:	b10b      	cbz	r3, 800325c <__sflush_r+0x48>
 8003258:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800325a:	1ac0      	subs	r0, r0, r3
 800325c:	2300      	movs	r3, #0
 800325e:	4602      	mov	r2, r0
 8003260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003262:	6a21      	ldr	r1, [r4, #32]
 8003264:	4628      	mov	r0, r5
 8003266:	47b0      	blx	r6
 8003268:	1c43      	adds	r3, r0, #1
 800326a:	89a3      	ldrh	r3, [r4, #12]
 800326c:	d106      	bne.n	800327c <__sflush_r+0x68>
 800326e:	6829      	ldr	r1, [r5, #0]
 8003270:	291d      	cmp	r1, #29
 8003272:	d82b      	bhi.n	80032cc <__sflush_r+0xb8>
 8003274:	4a29      	ldr	r2, [pc, #164]	; (800331c <__sflush_r+0x108>)
 8003276:	410a      	asrs	r2, r1
 8003278:	07d6      	lsls	r6, r2, #31
 800327a:	d427      	bmi.n	80032cc <__sflush_r+0xb8>
 800327c:	2200      	movs	r2, #0
 800327e:	6062      	str	r2, [r4, #4]
 8003280:	04d9      	lsls	r1, r3, #19
 8003282:	6922      	ldr	r2, [r4, #16]
 8003284:	6022      	str	r2, [r4, #0]
 8003286:	d504      	bpl.n	8003292 <__sflush_r+0x7e>
 8003288:	1c42      	adds	r2, r0, #1
 800328a:	d101      	bne.n	8003290 <__sflush_r+0x7c>
 800328c:	682b      	ldr	r3, [r5, #0]
 800328e:	b903      	cbnz	r3, 8003292 <__sflush_r+0x7e>
 8003290:	6560      	str	r0, [r4, #84]	; 0x54
 8003292:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003294:	602f      	str	r7, [r5, #0]
 8003296:	2900      	cmp	r1, #0
 8003298:	d0c9      	beq.n	800322e <__sflush_r+0x1a>
 800329a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800329e:	4299      	cmp	r1, r3
 80032a0:	d002      	beq.n	80032a8 <__sflush_r+0x94>
 80032a2:	4628      	mov	r0, r5
 80032a4:	f7ff febe 	bl	8003024 <_free_r>
 80032a8:	2000      	movs	r0, #0
 80032aa:	6360      	str	r0, [r4, #52]	; 0x34
 80032ac:	e7c0      	b.n	8003230 <__sflush_r+0x1c>
 80032ae:	2301      	movs	r3, #1
 80032b0:	4628      	mov	r0, r5
 80032b2:	47b0      	blx	r6
 80032b4:	1c41      	adds	r1, r0, #1
 80032b6:	d1c8      	bne.n	800324a <__sflush_r+0x36>
 80032b8:	682b      	ldr	r3, [r5, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0c5      	beq.n	800324a <__sflush_r+0x36>
 80032be:	2b1d      	cmp	r3, #29
 80032c0:	d001      	beq.n	80032c6 <__sflush_r+0xb2>
 80032c2:	2b16      	cmp	r3, #22
 80032c4:	d101      	bne.n	80032ca <__sflush_r+0xb6>
 80032c6:	602f      	str	r7, [r5, #0]
 80032c8:	e7b1      	b.n	800322e <__sflush_r+0x1a>
 80032ca:	89a3      	ldrh	r3, [r4, #12]
 80032cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032d0:	81a3      	strh	r3, [r4, #12]
 80032d2:	e7ad      	b.n	8003230 <__sflush_r+0x1c>
 80032d4:	690f      	ldr	r7, [r1, #16]
 80032d6:	2f00      	cmp	r7, #0
 80032d8:	d0a9      	beq.n	800322e <__sflush_r+0x1a>
 80032da:	0793      	lsls	r3, r2, #30
 80032dc:	680e      	ldr	r6, [r1, #0]
 80032de:	bf08      	it	eq
 80032e0:	694b      	ldreq	r3, [r1, #20]
 80032e2:	600f      	str	r7, [r1, #0]
 80032e4:	bf18      	it	ne
 80032e6:	2300      	movne	r3, #0
 80032e8:	eba6 0807 	sub.w	r8, r6, r7
 80032ec:	608b      	str	r3, [r1, #8]
 80032ee:	f1b8 0f00 	cmp.w	r8, #0
 80032f2:	dd9c      	ble.n	800322e <__sflush_r+0x1a>
 80032f4:	6a21      	ldr	r1, [r4, #32]
 80032f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80032f8:	4643      	mov	r3, r8
 80032fa:	463a      	mov	r2, r7
 80032fc:	4628      	mov	r0, r5
 80032fe:	47b0      	blx	r6
 8003300:	2800      	cmp	r0, #0
 8003302:	dc06      	bgt.n	8003312 <__sflush_r+0xfe>
 8003304:	89a3      	ldrh	r3, [r4, #12]
 8003306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800330a:	81a3      	strh	r3, [r4, #12]
 800330c:	f04f 30ff 	mov.w	r0, #4294967295
 8003310:	e78e      	b.n	8003230 <__sflush_r+0x1c>
 8003312:	4407      	add	r7, r0
 8003314:	eba8 0800 	sub.w	r8, r8, r0
 8003318:	e7e9      	b.n	80032ee <__sflush_r+0xda>
 800331a:	bf00      	nop
 800331c:	dfbffffe 	.word	0xdfbffffe

08003320 <_fflush_r>:
 8003320:	b538      	push	{r3, r4, r5, lr}
 8003322:	690b      	ldr	r3, [r1, #16]
 8003324:	4605      	mov	r5, r0
 8003326:	460c      	mov	r4, r1
 8003328:	b913      	cbnz	r3, 8003330 <_fflush_r+0x10>
 800332a:	2500      	movs	r5, #0
 800332c:	4628      	mov	r0, r5
 800332e:	bd38      	pop	{r3, r4, r5, pc}
 8003330:	b118      	cbz	r0, 800333a <_fflush_r+0x1a>
 8003332:	6a03      	ldr	r3, [r0, #32]
 8003334:	b90b      	cbnz	r3, 800333a <_fflush_r+0x1a>
 8003336:	f7ff fd57 	bl	8002de8 <__sinit>
 800333a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f3      	beq.n	800332a <_fflush_r+0xa>
 8003342:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003344:	07d0      	lsls	r0, r2, #31
 8003346:	d404      	bmi.n	8003352 <_fflush_r+0x32>
 8003348:	0599      	lsls	r1, r3, #22
 800334a:	d402      	bmi.n	8003352 <_fflush_r+0x32>
 800334c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800334e:	f7ff fe58 	bl	8003002 <__retarget_lock_acquire_recursive>
 8003352:	4628      	mov	r0, r5
 8003354:	4621      	mov	r1, r4
 8003356:	f7ff ff5d 	bl	8003214 <__sflush_r>
 800335a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800335c:	07da      	lsls	r2, r3, #31
 800335e:	4605      	mov	r5, r0
 8003360:	d4e4      	bmi.n	800332c <_fflush_r+0xc>
 8003362:	89a3      	ldrh	r3, [r4, #12]
 8003364:	059b      	lsls	r3, r3, #22
 8003366:	d4e1      	bmi.n	800332c <_fflush_r+0xc>
 8003368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800336a:	f7ff fe4b 	bl	8003004 <__retarget_lock_release_recursive>
 800336e:	e7dd      	b.n	800332c <_fflush_r+0xc>

08003370 <_putc_r>:
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	460d      	mov	r5, r1
 8003374:	4614      	mov	r4, r2
 8003376:	4606      	mov	r6, r0
 8003378:	b118      	cbz	r0, 8003382 <_putc_r+0x12>
 800337a:	6a03      	ldr	r3, [r0, #32]
 800337c:	b90b      	cbnz	r3, 8003382 <_putc_r+0x12>
 800337e:	f7ff fd33 	bl	8002de8 <__sinit>
 8003382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003384:	07d8      	lsls	r0, r3, #31
 8003386:	d405      	bmi.n	8003394 <_putc_r+0x24>
 8003388:	89a3      	ldrh	r3, [r4, #12]
 800338a:	0599      	lsls	r1, r3, #22
 800338c:	d402      	bmi.n	8003394 <_putc_r+0x24>
 800338e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003390:	f7ff fe37 	bl	8003002 <__retarget_lock_acquire_recursive>
 8003394:	68a3      	ldr	r3, [r4, #8]
 8003396:	3b01      	subs	r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	60a3      	str	r3, [r4, #8]
 800339c:	da05      	bge.n	80033aa <_putc_r+0x3a>
 800339e:	69a2      	ldr	r2, [r4, #24]
 80033a0:	4293      	cmp	r3, r2
 80033a2:	db12      	blt.n	80033ca <_putc_r+0x5a>
 80033a4:	b2eb      	uxtb	r3, r5
 80033a6:	2b0a      	cmp	r3, #10
 80033a8:	d00f      	beq.n	80033ca <_putc_r+0x5a>
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	6022      	str	r2, [r4, #0]
 80033b0:	701d      	strb	r5, [r3, #0]
 80033b2:	b2ed      	uxtb	r5, r5
 80033b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033b6:	07da      	lsls	r2, r3, #31
 80033b8:	d405      	bmi.n	80033c6 <_putc_r+0x56>
 80033ba:	89a3      	ldrh	r3, [r4, #12]
 80033bc:	059b      	lsls	r3, r3, #22
 80033be:	d402      	bmi.n	80033c6 <_putc_r+0x56>
 80033c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033c2:	f7ff fe1f 	bl	8003004 <__retarget_lock_release_recursive>
 80033c6:	4628      	mov	r0, r5
 80033c8:	bd70      	pop	{r4, r5, r6, pc}
 80033ca:	4629      	mov	r1, r5
 80033cc:	4622      	mov	r2, r4
 80033ce:	4630      	mov	r0, r6
 80033d0:	f000 f802 	bl	80033d8 <__swbuf_r>
 80033d4:	4605      	mov	r5, r0
 80033d6:	e7ed      	b.n	80033b4 <_putc_r+0x44>

080033d8 <__swbuf_r>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	460e      	mov	r6, r1
 80033dc:	4614      	mov	r4, r2
 80033de:	4605      	mov	r5, r0
 80033e0:	b118      	cbz	r0, 80033ea <__swbuf_r+0x12>
 80033e2:	6a03      	ldr	r3, [r0, #32]
 80033e4:	b90b      	cbnz	r3, 80033ea <__swbuf_r+0x12>
 80033e6:	f7ff fcff 	bl	8002de8 <__sinit>
 80033ea:	69a3      	ldr	r3, [r4, #24]
 80033ec:	60a3      	str	r3, [r4, #8]
 80033ee:	89a3      	ldrh	r3, [r4, #12]
 80033f0:	071a      	lsls	r2, r3, #28
 80033f2:	d525      	bpl.n	8003440 <__swbuf_r+0x68>
 80033f4:	6923      	ldr	r3, [r4, #16]
 80033f6:	b31b      	cbz	r3, 8003440 <__swbuf_r+0x68>
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	6922      	ldr	r2, [r4, #16]
 80033fc:	1a98      	subs	r0, r3, r2
 80033fe:	6963      	ldr	r3, [r4, #20]
 8003400:	b2f6      	uxtb	r6, r6
 8003402:	4283      	cmp	r3, r0
 8003404:	4637      	mov	r7, r6
 8003406:	dc04      	bgt.n	8003412 <__swbuf_r+0x3a>
 8003408:	4621      	mov	r1, r4
 800340a:	4628      	mov	r0, r5
 800340c:	f7ff ff88 	bl	8003320 <_fflush_r>
 8003410:	b9e0      	cbnz	r0, 800344c <__swbuf_r+0x74>
 8003412:	68a3      	ldr	r3, [r4, #8]
 8003414:	3b01      	subs	r3, #1
 8003416:	60a3      	str	r3, [r4, #8]
 8003418:	6823      	ldr	r3, [r4, #0]
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	6022      	str	r2, [r4, #0]
 800341e:	701e      	strb	r6, [r3, #0]
 8003420:	6962      	ldr	r2, [r4, #20]
 8003422:	1c43      	adds	r3, r0, #1
 8003424:	429a      	cmp	r2, r3
 8003426:	d004      	beq.n	8003432 <__swbuf_r+0x5a>
 8003428:	89a3      	ldrh	r3, [r4, #12]
 800342a:	07db      	lsls	r3, r3, #31
 800342c:	d506      	bpl.n	800343c <__swbuf_r+0x64>
 800342e:	2e0a      	cmp	r6, #10
 8003430:	d104      	bne.n	800343c <__swbuf_r+0x64>
 8003432:	4621      	mov	r1, r4
 8003434:	4628      	mov	r0, r5
 8003436:	f7ff ff73 	bl	8003320 <_fflush_r>
 800343a:	b938      	cbnz	r0, 800344c <__swbuf_r+0x74>
 800343c:	4638      	mov	r0, r7
 800343e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003440:	4621      	mov	r1, r4
 8003442:	4628      	mov	r0, r5
 8003444:	f000 f806 	bl	8003454 <__swsetup_r>
 8003448:	2800      	cmp	r0, #0
 800344a:	d0d5      	beq.n	80033f8 <__swbuf_r+0x20>
 800344c:	f04f 37ff 	mov.w	r7, #4294967295
 8003450:	e7f4      	b.n	800343c <__swbuf_r+0x64>
	...

08003454 <__swsetup_r>:
 8003454:	b538      	push	{r3, r4, r5, lr}
 8003456:	4b2a      	ldr	r3, [pc, #168]	; (8003500 <__swsetup_r+0xac>)
 8003458:	4605      	mov	r5, r0
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	460c      	mov	r4, r1
 800345e:	b118      	cbz	r0, 8003468 <__swsetup_r+0x14>
 8003460:	6a03      	ldr	r3, [r0, #32]
 8003462:	b90b      	cbnz	r3, 8003468 <__swsetup_r+0x14>
 8003464:	f7ff fcc0 	bl	8002de8 <__sinit>
 8003468:	89a3      	ldrh	r3, [r4, #12]
 800346a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800346e:	0718      	lsls	r0, r3, #28
 8003470:	d422      	bmi.n	80034b8 <__swsetup_r+0x64>
 8003472:	06d9      	lsls	r1, r3, #27
 8003474:	d407      	bmi.n	8003486 <__swsetup_r+0x32>
 8003476:	2309      	movs	r3, #9
 8003478:	602b      	str	r3, [r5, #0]
 800347a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800347e:	81a3      	strh	r3, [r4, #12]
 8003480:	f04f 30ff 	mov.w	r0, #4294967295
 8003484:	e034      	b.n	80034f0 <__swsetup_r+0x9c>
 8003486:	0758      	lsls	r0, r3, #29
 8003488:	d512      	bpl.n	80034b0 <__swsetup_r+0x5c>
 800348a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800348c:	b141      	cbz	r1, 80034a0 <__swsetup_r+0x4c>
 800348e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003492:	4299      	cmp	r1, r3
 8003494:	d002      	beq.n	800349c <__swsetup_r+0x48>
 8003496:	4628      	mov	r0, r5
 8003498:	f7ff fdc4 	bl	8003024 <_free_r>
 800349c:	2300      	movs	r3, #0
 800349e:	6363      	str	r3, [r4, #52]	; 0x34
 80034a0:	89a3      	ldrh	r3, [r4, #12]
 80034a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034a6:	81a3      	strh	r3, [r4, #12]
 80034a8:	2300      	movs	r3, #0
 80034aa:	6063      	str	r3, [r4, #4]
 80034ac:	6923      	ldr	r3, [r4, #16]
 80034ae:	6023      	str	r3, [r4, #0]
 80034b0:	89a3      	ldrh	r3, [r4, #12]
 80034b2:	f043 0308 	orr.w	r3, r3, #8
 80034b6:	81a3      	strh	r3, [r4, #12]
 80034b8:	6923      	ldr	r3, [r4, #16]
 80034ba:	b94b      	cbnz	r3, 80034d0 <__swsetup_r+0x7c>
 80034bc:	89a3      	ldrh	r3, [r4, #12]
 80034be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80034c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c6:	d003      	beq.n	80034d0 <__swsetup_r+0x7c>
 80034c8:	4621      	mov	r1, r4
 80034ca:	4628      	mov	r0, r5
 80034cc:	f000 f850 	bl	8003570 <__smakebuf_r>
 80034d0:	89a0      	ldrh	r0, [r4, #12]
 80034d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034d6:	f010 0301 	ands.w	r3, r0, #1
 80034da:	d00a      	beq.n	80034f2 <__swsetup_r+0x9e>
 80034dc:	2300      	movs	r3, #0
 80034de:	60a3      	str	r3, [r4, #8]
 80034e0:	6963      	ldr	r3, [r4, #20]
 80034e2:	425b      	negs	r3, r3
 80034e4:	61a3      	str	r3, [r4, #24]
 80034e6:	6923      	ldr	r3, [r4, #16]
 80034e8:	b943      	cbnz	r3, 80034fc <__swsetup_r+0xa8>
 80034ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034ee:	d1c4      	bne.n	800347a <__swsetup_r+0x26>
 80034f0:	bd38      	pop	{r3, r4, r5, pc}
 80034f2:	0781      	lsls	r1, r0, #30
 80034f4:	bf58      	it	pl
 80034f6:	6963      	ldrpl	r3, [r4, #20]
 80034f8:	60a3      	str	r3, [r4, #8]
 80034fa:	e7f4      	b.n	80034e6 <__swsetup_r+0x92>
 80034fc:	2000      	movs	r0, #0
 80034fe:	e7f7      	b.n	80034f0 <__swsetup_r+0x9c>
 8003500:	20000064 	.word	0x20000064

08003504 <_sbrk_r>:
 8003504:	b538      	push	{r3, r4, r5, lr}
 8003506:	4d06      	ldr	r5, [pc, #24]	; (8003520 <_sbrk_r+0x1c>)
 8003508:	2300      	movs	r3, #0
 800350a:	4604      	mov	r4, r0
 800350c:	4608      	mov	r0, r1
 800350e:	602b      	str	r3, [r5, #0]
 8003510:	f7fd fc0e 	bl	8000d30 <_sbrk>
 8003514:	1c43      	adds	r3, r0, #1
 8003516:	d102      	bne.n	800351e <_sbrk_r+0x1a>
 8003518:	682b      	ldr	r3, [r5, #0]
 800351a:	b103      	cbz	r3, 800351e <_sbrk_r+0x1a>
 800351c:	6023      	str	r3, [r4, #0]
 800351e:	bd38      	pop	{r3, r4, r5, pc}
 8003520:	20000258 	.word	0x20000258

08003524 <__swhatbuf_r>:
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	460c      	mov	r4, r1
 8003528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800352c:	2900      	cmp	r1, #0
 800352e:	b096      	sub	sp, #88	; 0x58
 8003530:	4615      	mov	r5, r2
 8003532:	461e      	mov	r6, r3
 8003534:	da0d      	bge.n	8003552 <__swhatbuf_r+0x2e>
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	f013 0f80 	tst.w	r3, #128	; 0x80
 800353c:	f04f 0100 	mov.w	r1, #0
 8003540:	bf0c      	ite	eq
 8003542:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003546:	2340      	movne	r3, #64	; 0x40
 8003548:	2000      	movs	r0, #0
 800354a:	6031      	str	r1, [r6, #0]
 800354c:	602b      	str	r3, [r5, #0]
 800354e:	b016      	add	sp, #88	; 0x58
 8003550:	bd70      	pop	{r4, r5, r6, pc}
 8003552:	466a      	mov	r2, sp
 8003554:	f000 f848 	bl	80035e8 <_fstat_r>
 8003558:	2800      	cmp	r0, #0
 800355a:	dbec      	blt.n	8003536 <__swhatbuf_r+0x12>
 800355c:	9901      	ldr	r1, [sp, #4]
 800355e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003562:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003566:	4259      	negs	r1, r3
 8003568:	4159      	adcs	r1, r3
 800356a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800356e:	e7eb      	b.n	8003548 <__swhatbuf_r+0x24>

08003570 <__smakebuf_r>:
 8003570:	898b      	ldrh	r3, [r1, #12]
 8003572:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003574:	079d      	lsls	r5, r3, #30
 8003576:	4606      	mov	r6, r0
 8003578:	460c      	mov	r4, r1
 800357a:	d507      	bpl.n	800358c <__smakebuf_r+0x1c>
 800357c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003580:	6023      	str	r3, [r4, #0]
 8003582:	6123      	str	r3, [r4, #16]
 8003584:	2301      	movs	r3, #1
 8003586:	6163      	str	r3, [r4, #20]
 8003588:	b002      	add	sp, #8
 800358a:	bd70      	pop	{r4, r5, r6, pc}
 800358c:	ab01      	add	r3, sp, #4
 800358e:	466a      	mov	r2, sp
 8003590:	f7ff ffc8 	bl	8003524 <__swhatbuf_r>
 8003594:	9900      	ldr	r1, [sp, #0]
 8003596:	4605      	mov	r5, r0
 8003598:	4630      	mov	r0, r6
 800359a:	f7ff fdaf 	bl	80030fc <_malloc_r>
 800359e:	b948      	cbnz	r0, 80035b4 <__smakebuf_r+0x44>
 80035a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035a4:	059a      	lsls	r2, r3, #22
 80035a6:	d4ef      	bmi.n	8003588 <__smakebuf_r+0x18>
 80035a8:	f023 0303 	bic.w	r3, r3, #3
 80035ac:	f043 0302 	orr.w	r3, r3, #2
 80035b0:	81a3      	strh	r3, [r4, #12]
 80035b2:	e7e3      	b.n	800357c <__smakebuf_r+0xc>
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	6020      	str	r0, [r4, #0]
 80035b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035bc:	81a3      	strh	r3, [r4, #12]
 80035be:	9b00      	ldr	r3, [sp, #0]
 80035c0:	6163      	str	r3, [r4, #20]
 80035c2:	9b01      	ldr	r3, [sp, #4]
 80035c4:	6120      	str	r0, [r4, #16]
 80035c6:	b15b      	cbz	r3, 80035e0 <__smakebuf_r+0x70>
 80035c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035cc:	4630      	mov	r0, r6
 80035ce:	f000 f81d 	bl	800360c <_isatty_r>
 80035d2:	b128      	cbz	r0, 80035e0 <__smakebuf_r+0x70>
 80035d4:	89a3      	ldrh	r3, [r4, #12]
 80035d6:	f023 0303 	bic.w	r3, r3, #3
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	81a3      	strh	r3, [r4, #12]
 80035e0:	89a3      	ldrh	r3, [r4, #12]
 80035e2:	431d      	orrs	r5, r3
 80035e4:	81a5      	strh	r5, [r4, #12]
 80035e6:	e7cf      	b.n	8003588 <__smakebuf_r+0x18>

080035e8 <_fstat_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	4d07      	ldr	r5, [pc, #28]	; (8003608 <_fstat_r+0x20>)
 80035ec:	2300      	movs	r3, #0
 80035ee:	4604      	mov	r4, r0
 80035f0:	4608      	mov	r0, r1
 80035f2:	4611      	mov	r1, r2
 80035f4:	602b      	str	r3, [r5, #0]
 80035f6:	f7fd fb72 	bl	8000cde <_fstat>
 80035fa:	1c43      	adds	r3, r0, #1
 80035fc:	d102      	bne.n	8003604 <_fstat_r+0x1c>
 80035fe:	682b      	ldr	r3, [r5, #0]
 8003600:	b103      	cbz	r3, 8003604 <_fstat_r+0x1c>
 8003602:	6023      	str	r3, [r4, #0]
 8003604:	bd38      	pop	{r3, r4, r5, pc}
 8003606:	bf00      	nop
 8003608:	20000258 	.word	0x20000258

0800360c <_isatty_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	4d06      	ldr	r5, [pc, #24]	; (8003628 <_isatty_r+0x1c>)
 8003610:	2300      	movs	r3, #0
 8003612:	4604      	mov	r4, r0
 8003614:	4608      	mov	r0, r1
 8003616:	602b      	str	r3, [r5, #0]
 8003618:	f7fd fb71 	bl	8000cfe <_isatty>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	d102      	bne.n	8003626 <_isatty_r+0x1a>
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	b103      	cbz	r3, 8003626 <_isatty_r+0x1a>
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	bd38      	pop	{r3, r4, r5, pc}
 8003628:	20000258 	.word	0x20000258

0800362c <_init>:
 800362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362e:	bf00      	nop
 8003630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003632:	bc08      	pop	{r3}
 8003634:	469e      	mov	lr, r3
 8003636:	4770      	bx	lr

08003638 <_fini>:
 8003638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363a:	bf00      	nop
 800363c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363e:	bc08      	pop	{r3}
 8003640:	469e      	mov	lr, r3
 8003642:	4770      	bx	lr
