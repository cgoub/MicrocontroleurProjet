
micro2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045ec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049cc  080049cc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049d4  080049d4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049d4  080049d4  000149d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049d8  080049d8  000149d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080049dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000068  08004a44  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08004a44  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad2f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ddb  00000000  00000000  0002ae0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002cbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f0  00000000  00000000  0002d500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002340f  00000000  00000000  0002dbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c4dd  00000000  00000000  00050fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7753  00000000  00000000  0005d4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b3c  00000000  00000000  00134c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ad  00000000  00000000  0013776c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004798 	.word	0x08004798

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08004798 	.word	0x08004798

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fe0f 	bl	800113c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 faa1 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fb89 	bl	8000c38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000526:	f000 fb5d 	bl	8000be4 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 800052a:	f000 fb09 	bl	8000b40 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  printf("The program has correctly been loaded.\r\n");
 800052e:	4897      	ldr	r0, [pc, #604]	; (800078c <main+0x278>)
 8000530:	f003 fd5a 	bl	8003fe8 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t led=1;
 8000534:	2301      	movs	r3, #1
 8000536:	81fb      	strh	r3, [r7, #14]
  while (1)
      {
	  if(MODE==1){
 8000538:	4b95      	ldr	r3, [pc, #596]	; (8000790 <main+0x27c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	f040 80bd 	bne.w	80006bc <main+0x1a8>
		  notStartTime = HAL_GetTick();
 8000542:	f000 fe61 	bl	8001208 <HAL_GetTick>
 8000546:	4603      	mov	r3, r0
 8000548:	4a92      	ldr	r2, [pc, #584]	; (8000794 <main+0x280>)
 800054a:	6013      	str	r3, [r2, #0]
		  int silence_duration = notStartTime - endTime;
 800054c:	4b91      	ldr	r3, [pc, #580]	; (8000794 <main+0x280>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b91      	ldr	r3, [pc, #580]	; (8000798 <main+0x284>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	603b      	str	r3, [r7, #0]
		  if (!haveConverted && (silence_duration >= 2000 || rx_index >= sizeof(rx_buffer)))
 8000558:	4b90      	ldr	r3, [pc, #576]	; (800079c <main+0x288>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d123      	bne.n	80005a8 <main+0x94>
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000566:	da03      	bge.n	8000570 <main+0x5c>
 8000568:	4b8d      	ldr	r3, [pc, #564]	; (80007a0 <main+0x28c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b63      	cmp	r3, #99	; 0x63
 800056e:	d91b      	bls.n	80005a8 <main+0x94>
		  {

			  // Decode the Morse code character
			  decodeMorse(rx_buffer, rx_index);
 8000570:	4b8b      	ldr	r3, [pc, #556]	; (80007a0 <main+0x28c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4619      	mov	r1, r3
 8000576:	488b      	ldr	r0, [pc, #556]	; (80007a4 <main+0x290>)
 8000578:	f000 f99c 	bl	80008b4 <decodeMorse>
			  // Reset the message buffer index

			  for(int i=0;i<rx_index;i++){
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	e007      	b.n	8000592 <main+0x7e>
				  rx_buffer[i] = '\0';
 8000582:	4a88      	ldr	r2, [pc, #544]	; (80007a4 <main+0x290>)
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	4413      	add	r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
			  for(int i=0;i<rx_index;i++){
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	3301      	adds	r3, #1
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	4b83      	ldr	r3, [pc, #524]	; (80007a0 <main+0x28c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	429a      	cmp	r2, r3
 800059a:	dbf2      	blt.n	8000582 <main+0x6e>
			  }
			  rx_index = 0;
 800059c:	4b80      	ldr	r3, [pc, #512]	; (80007a0 <main+0x28c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
			  haveConverted = 1;
 80005a2:	4b7e      	ldr	r3, [pc, #504]	; (800079c <main+0x288>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	601a      	str	r2, [r3, #0]
		  }
		  /* Check for sound signal */
		  if (isSoundSignalDetected()) {
 80005a8:	f000 f95a 	bl	8000860 <isSoundSignalDetected>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d07e      	beq.n	80006b0 <main+0x19c>
			  haveConverted = 0;
 80005b2:	4b7a      	ldr	r3, [pc, #488]	; (800079c <main+0x288>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
			  /* Record start time of signal */

			  if(silence_duration>500){
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005be:	dd04      	ble.n	80005ca <main+0xb6>
				  startTime = notStartTime;
 80005c0:	4b74      	ldr	r3, [pc, #464]	; (8000794 <main+0x280>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a78      	ldr	r2, [pc, #480]	; (80007a8 <main+0x294>)
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	e014      	b.n	80005f4 <main+0xe0>
			  } else {
				  rx_index--;
 80005ca:	4b75      	ldr	r3, [pc, #468]	; (80007a0 <main+0x28c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	4a73      	ldr	r2, [pc, #460]	; (80007a0 <main+0x28c>)
 80005d2:	6013      	str	r3, [r2, #0]
			  }
			  while (adc_value < THRESHOLD_low || adc_value > THRESHOLD_high) {
 80005d4:	e00e      	b.n	80005f4 <main+0xe0>
				  // Check if sound signal ended
				HAL_ADC_Start(&hadc3);
 80005d6:	4875      	ldr	r0, [pc, #468]	; (80007ac <main+0x298>)
 80005d8:	f000 fe8a 	bl	80012f0 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80005dc:	f04f 31ff 	mov.w	r1, #4294967295
 80005e0:	4872      	ldr	r0, [pc, #456]	; (80007ac <main+0x298>)
 80005e2:	f000 ff8a 	bl	80014fa <HAL_ADC_PollForConversion>
				adc_value = HAL_ADC_GetValue(&hadc3);//* (5.0 / 1023.0);
 80005e6:	4871      	ldr	r0, [pc, #452]	; (80007ac <main+0x298>)
 80005e8:	f001 f812 	bl	8001610 <HAL_ADC_GetValue>
 80005ec:	4603      	mov	r3, r0
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	4b6f      	ldr	r3, [pc, #444]	; (80007b0 <main+0x29c>)
 80005f2:	801a      	strh	r2, [r3, #0]
			  while (adc_value < THRESHOLD_low || adc_value > THRESHOLD_high) {
 80005f4:	4b6e      	ldr	r3, [pc, #440]	; (80007b0 <main+0x29c>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	f240 5213 	movw	r2, #1299	; 0x513
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d9ea      	bls.n	80005d6 <main+0xc2>
 8000600:	4b6b      	ldr	r3, [pc, #428]	; (80007b0 <main+0x29c>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8000608:	4293      	cmp	r3, r2
 800060a:	d8e4      	bhi.n	80005d6 <main+0xc2>
			  }


			  /* Record end time of signal */
			  endTime = HAL_GetTick();
 800060c:	f000 fdfc 	bl	8001208 <HAL_GetTick>
 8000610:	4603      	mov	r3, r0
 8000612:	4a61      	ldr	r2, [pc, #388]	; (8000798 <main+0x284>)
 8000614:	6013      	str	r3, [r2, #0]

			  /* Calculate duration of signal */
			  duration = (endTime - startTime);
 8000616:	4b60      	ldr	r3, [pc, #384]	; (8000798 <main+0x284>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4b63      	ldr	r3, [pc, #396]	; (80007a8 <main+0x294>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	4a64      	ldr	r2, [pc, #400]	; (80007b4 <main+0x2a0>)
 8000622:	6013      	str	r3, [r2, #0]

			  if (silence_duration > PAUSE_THRESHOLD_LOW && silence_duration < PAUSE_THRESHOLD_HIGH)
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	f240 32b6 	movw	r2, #950	; 0x3b6
 800062a:	4293      	cmp	r3, r2
 800062c:	dd0f      	ble.n	800064e <main+0x13a>
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	f240 4219 	movw	r2, #1049	; 0x419
 8000634:	4293      	cmp	r3, r2
 8000636:	dc0a      	bgt.n	800064e <main+0x13a>
			  {
				  rx_buffer[rx_index] = ' ';
 8000638:	4b59      	ldr	r3, [pc, #356]	; (80007a0 <main+0x28c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a59      	ldr	r2, [pc, #356]	; (80007a4 <main+0x290>)
 800063e:	2120      	movs	r1, #32
 8000640:	54d1      	strb	r1, [r2, r3]
				  rx_index++;
 8000642:	4b57      	ldr	r3, [pc, #348]	; (80007a0 <main+0x28c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	4a55      	ldr	r2, [pc, #340]	; (80007a0 <main+0x28c>)
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	e012      	b.n	8000674 <main+0x160>
			  }
			  else if (silence_duration > PAUSE_THRESHOLD_HIGH && rx_index!=0)
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	f240 421a 	movw	r2, #1050	; 0x41a
 8000654:	4293      	cmp	r3, r2
 8000656:	dd0d      	ble.n	8000674 <main+0x160>
 8000658:	4b51      	ldr	r3, [pc, #324]	; (80007a0 <main+0x28c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d009      	beq.n	8000674 <main+0x160>
			  {
				  rx_buffer[rx_index] = '/';
 8000660:	4b4f      	ldr	r3, [pc, #316]	; (80007a0 <main+0x28c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a4f      	ldr	r2, [pc, #316]	; (80007a4 <main+0x290>)
 8000666:	212f      	movs	r1, #47	; 0x2f
 8000668:	54d1      	strb	r1, [r2, r3]
				  rx_index++;
 800066a:	4b4d      	ldr	r3, [pc, #308]	; (80007a0 <main+0x28c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	4a4b      	ldr	r2, [pc, #300]	; (80007a0 <main+0x28c>)
 8000672:	6013      	str	r3, [r2, #0]
			  }

			  if (duration < DOT_THRESHOLD)
 8000674:	4b4f      	ldr	r3, [pc, #316]	; (80007b4 <main+0x2a0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b6d      	cmp	r3, #109	; 0x6d
 800067a:	d80a      	bhi.n	8000692 <main+0x17e>
			  {
				  rx_buffer[rx_index] = '.';
 800067c:	4b48      	ldr	r3, [pc, #288]	; (80007a0 <main+0x28c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a48      	ldr	r2, [pc, #288]	; (80007a4 <main+0x290>)
 8000682:	212e      	movs	r1, #46	; 0x2e
 8000684:	54d1      	strb	r1, [r2, r3]
				  rx_index++;
 8000686:	4b46      	ldr	r3, [pc, #280]	; (80007a0 <main+0x28c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3301      	adds	r3, #1
 800068c:	4a44      	ldr	r2, [pc, #272]	; (80007a0 <main+0x28c>)
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	e00e      	b.n	80006b0 <main+0x19c>
			  }
			  else if (duration < DASH_THRESHOLD)
 8000692:	4b48      	ldr	r3, [pc, #288]	; (80007b4 <main+0x2a0>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800069a:	d209      	bcs.n	80006b0 <main+0x19c>
			  {
				  rx_buffer[rx_index] = '-';
 800069c:	4b40      	ldr	r3, [pc, #256]	; (80007a0 <main+0x28c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a40      	ldr	r2, [pc, #256]	; (80007a4 <main+0x290>)
 80006a2:	212d      	movs	r1, #45	; 0x2d
 80006a4:	54d1      	strb	r1, [r2, r3]
				  rx_index++;
 80006a6:	4b3e      	ldr	r3, [pc, #248]	; (80007a0 <main+0x28c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	3301      	adds	r3, #1
 80006ac:	4a3c      	ldr	r2, [pc, #240]	; (80007a0 <main+0x28c>)
 80006ae:	6013      	str	r3, [r2, #0]
			  }
		  }
		  HAL_Delay(5);
 80006b0:	2005      	movs	r0, #5
 80006b2:	f000 fdb5 	bl	8001220 <HAL_Delay>
		  HAL_ADC_Stop(&hadc3);
 80006b6:	483d      	ldr	r0, [pc, #244]	; (80007ac <main+0x298>)
 80006b8:	f000 feec 	bl	8001494 <HAL_ADC_Stop>
	  }
	  if(MODE==0){
 80006bc:	4b34      	ldr	r3, [pc, #208]	; (8000790 <main+0x27c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	f47f af39 	bne.w	8000538 <main+0x24>
		  //printf("%ld\r\n",HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
		  if (!led) {
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	f040 80ac 	bne.w	8000826 <main+0x312>
			  /* Record end time of signal */
			  //startTime = notStartTime;
			  led=1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	81fb      	strh	r3, [r7, #14]
			  while (led){
 80006d2:	e006      	b.n	80006e2 <main+0x1ce>
				  led=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80006d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d8:	4837      	ldr	r0, [pc, #220]	; (80007b8 <main+0x2a4>)
 80006da:	f001 fd0d 	bl	80020f8 <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	81fb      	strh	r3, [r7, #14]
			  while (led){
 80006e2:	89fb      	ldrh	r3, [r7, #14]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1f5      	bne.n	80006d4 <main+0x1c0>
			  }
			  HAL_Delay(100);
 80006e8:	2064      	movs	r0, #100	; 0x64
 80006ea:	f000 fd99 	bl	8001220 <HAL_Delay>
			  endTime = HAL_GetTick();
 80006ee:	f000 fd8b 	bl	8001208 <HAL_GetTick>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a28      	ldr	r2, [pc, #160]	; (8000798 <main+0x284>)
 80006f6:	6013      	str	r3, [r2, #0]

			  /* Calculate duration of signal */
			  duration = endTime - startTime - 100;
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <main+0x284>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <main+0x294>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	3b64      	subs	r3, #100	; 0x64
 8000704:	4a2b      	ldr	r2, [pc, #172]	; (80007b4 <main+0x2a0>)
 8000706:	6013      	str	r3, [r2, #0]
			  HAL_Delay(5);
 8000708:	2005      	movs	r0, #5
 800070a:	f000 fd89 	bl	8001220 <HAL_Delay>
			  //if (duration>200){
				  if (duration> 290 && duration < 310)
 800070e:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <main+0x2a0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8000716:	d90f      	bls.n	8000738 <main+0x224>
 8000718:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <main+0x2a0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8000720:	d20a      	bcs.n	8000738 <main+0x224>
				  {
					  rx_buffer[rx_index] = '.';
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <main+0x28c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <main+0x290>)
 8000728:	212e      	movs	r1, #46	; 0x2e
 800072a:	54d1      	strb	r1, [r2, r3]
					  rx_index++;
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <main+0x28c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <main+0x28c>)
 8000734:	6013      	str	r3, [r2, #0]
 8000736:	e071      	b.n	800081c <main+0x308>
				  }
				  else if (duration>390 &&duration < 410)
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <main+0x2a0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8000740:	d90f      	bls.n	8000762 <main+0x24e>
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <main+0x2a0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800074a:	d20a      	bcs.n	8000762 <main+0x24e>
				  {
					  rx_buffer[rx_index] = '-';
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <main+0x28c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <main+0x290>)
 8000752:	212d      	movs	r1, #45	; 0x2d
 8000754:	54d1      	strb	r1, [r2, r3]
					  rx_index++;
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <main+0x28c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <main+0x28c>)
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	e05c      	b.n	800081c <main+0x308>
				  }
				  else if (duration>490 &&duration < 510)
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <main+0x2a0>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 800076a:	d927      	bls.n	80007bc <main+0x2a8>
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <main+0x2a0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8000774:	d222      	bcs.n	80007bc <main+0x2a8>
				  {
					  rx_buffer[rx_index] = ' ';
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <main+0x28c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <main+0x290>)
 800077c:	2120      	movs	r1, #32
 800077e:	54d1      	strb	r1, [r2, r3]
					  rx_index++;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <main+0x28c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <main+0x28c>)
 8000788:	6013      	str	r3, [r2, #0]
 800078a:	e047      	b.n	800081c <main+0x308>
 800078c:	080047b0 	.word	0x080047b0
 8000790:	2000018c 	.word	0x2000018c
 8000794:	20000180 	.word	0x20000180
 8000798:	20000184 	.word	0x20000184
 800079c:	20000194 	.word	0x20000194
 80007a0:	20000190 	.word	0x20000190
 80007a4:	20000114 	.word	0x20000114
 80007a8:	2000017c 	.word	0x2000017c
 80007ac:	20000084 	.word	0x20000084
 80007b0:	20000178 	.word	0x20000178
 80007b4:	20000188 	.word	0x20000188
 80007b8:	40020000 	.word	0x40020000
				  }
				  else if (duration>590 &&duration < 610)
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <main+0x334>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f240 224e 	movw	r2, #590	; 0x24e
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d910      	bls.n	80007ea <main+0x2d6>
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <main+0x334>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f240 2261 	movw	r2, #609	; 0x261
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d80a      	bhi.n	80007ea <main+0x2d6>
				  {
					  rx_buffer[rx_index] = '/';
 80007d4:	4b1d      	ldr	r3, [pc, #116]	; (800084c <main+0x338>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a1d      	ldr	r2, [pc, #116]	; (8000850 <main+0x33c>)
 80007da:	212f      	movs	r1, #47	; 0x2f
 80007dc:	54d1      	strb	r1, [r2, r3]
					  rx_index++;
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <main+0x338>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	4a19      	ldr	r2, [pc, #100]	; (800084c <main+0x338>)
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	e018      	b.n	800081c <main+0x308>
				  }
				  else
				  {
					  // Decode the Morse code character
					  decodeMorse(rx_buffer, rx_index);
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <main+0x338>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4619      	mov	r1, r3
 80007f0:	4817      	ldr	r0, [pc, #92]	; (8000850 <main+0x33c>)
 80007f2:	f000 f85f 	bl	80008b4 <decodeMorse>
					  // Reset the message buffer index

					  for(int i=0;i<rx_index;i++){
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	e007      	b.n	800080c <main+0x2f8>
						  rx_buffer[i] = '\0';
 80007fc:	4a14      	ldr	r2, [pc, #80]	; (8000850 <main+0x33c>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
					  for(int i=0;i<rx_index;i++){
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3301      	adds	r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <main+0x338>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	429a      	cmp	r2, r3
 8000814:	dbf2      	blt.n	80007fc <main+0x2e8>
					  }
					  rx_index = 0;
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <main+0x338>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
				  //}
			  }
			  startTime = endTime;
 800081c:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <main+0x340>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <main+0x344>)
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	e688      	b.n	8000538 <main+0x24>
		  }
		  //decodeMorse(rx_buffer, rx_index);
		  else{
			  led = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082a:	480c      	ldr	r0, [pc, #48]	; (800085c <main+0x348>)
 800082c:	f001 fc64 	bl	80020f8 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	81fb      	strh	r3, [r7, #14]
			  HAL_Delay(100);
 8000834:	2064      	movs	r0, #100	; 0x64
 8000836:	f000 fcf3 	bl	8001220 <HAL_Delay>
			  startTime = HAL_GetTick();
 800083a:	f000 fce5 	bl	8001208 <HAL_GetTick>
 800083e:	4603      	mov	r3, r0
 8000840:	4a05      	ldr	r2, [pc, #20]	; (8000858 <main+0x344>)
 8000842:	6013      	str	r3, [r2, #0]
	  if(MODE==1){
 8000844:	e678      	b.n	8000538 <main+0x24>
 8000846:	bf00      	nop
 8000848:	20000188 	.word	0x20000188
 800084c:	20000190 	.word	0x20000190
 8000850:	20000114 	.word	0x20000114
 8000854:	20000184 	.word	0x20000184
 8000858:	2000017c 	.word	0x2000017c
 800085c:	40020000 	.word	0x40020000

08000860 <isSoundSignalDetected>:
	  }
   }
}

  /* Function to detect the presence of a sound signal */
	int isSoundSignalDetected() {
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
		HAL_ADC_Start(&hadc3);
 8000864:	4811      	ldr	r0, [pc, #68]	; (80008ac <isSoundSignalDetected+0x4c>)
 8000866:	f000 fd43 	bl	80012f0 <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 800086a:	f04f 31ff 	mov.w	r1, #4294967295
 800086e:	480f      	ldr	r0, [pc, #60]	; (80008ac <isSoundSignalDetected+0x4c>)
 8000870:	f000 fe43 	bl	80014fa <HAL_ADC_PollForConversion>

	    // Read the analog input from the sound sensor using the ADC
		//HAL_ADC_PollForConversion(&hadc3, 100);
	    adc_value = HAL_ADC_GetValue(&hadc3);//* (5.0 / 1023.0); // Example ADC reading
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <isSoundSignalDetected+0x4c>)
 8000876:	f000 fecb 	bl	8001610 <HAL_ADC_GetValue>
 800087a:	4603      	mov	r3, r0
 800087c:	b29a      	uxth	r2, r3
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <isSoundSignalDetected+0x50>)
 8000880:	801a      	strh	r2, [r3, #0]

        /* Wait for sound signal to end */
        HAL_ADC_Stop(&hadc3);
 8000882:	480a      	ldr	r0, [pc, #40]	; (80008ac <isSoundSignalDetected+0x4c>)
 8000884:	f000 fe06 	bl	8001494 <HAL_ADC_Stop>

	    // Analyze the ADC value to determine if a sound signal is detected
        if (adc_value < THRESHOLD_low || adc_value > THRESHOLD_high) {
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <isSoundSignalDetected+0x50>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	f240 5213 	movw	r2, #1299	; 0x513
 8000890:	4293      	cmp	r3, r2
 8000892:	d905      	bls.n	80008a0 <isSoundSignalDetected+0x40>
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <isSoundSignalDetected+0x50>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800089c:	4293      	cmp	r3, r2
 800089e:	d901      	bls.n	80008a4 <isSoundSignalDetected+0x44>
	        return 1; // Sound signal detected
 80008a0:	2301      	movs	r3, #1
 80008a2:	e000      	b.n	80008a6 <isSoundSignalDetected+0x46>
	    } else {
	    	return 0; // No sound signal detected
 80008a4:	2300      	movs	r3, #0
		}
  }
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000084 	.word	0x20000084
 80008b0:	20000178 	.word	0x20000178

080008b4 <decodeMorse>:
		return !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
  }


	void decodeMorse(char *message, int length)
	  {
 80008b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008b8:	b0b7      	sub	sp, #220	; 0xdc
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	6039      	str	r1, [r7, #0]
 80008c0:	466b      	mov	r3, sp
 80008c2:	461e      	mov	r6, r3
	      //printf("%s\r\n", message);
		  char* morseAlphabet[] = {     "......", ".....-", "....-.", "....--", "...-..", "...-.-", "...--.", "...---", "..-...", "..-..-",
 80008c4:	4a5b      	ldr	r2, [pc, #364]	; (8000a34 <decodeMorse+0x180>)
 80008c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008ca:	4611      	mov	r1, r2
 80008cc:	2290      	movs	r2, #144	; 0x90
 80008ce:	4618      	mov	r0, r3
 80008d0:	f003 fce5 	bl	800429e <memcpy>
				    "..-.-.", "..-.--", "..--..", "..--.-", "..----", ".-....", ".-...-", ".-..-.", ".-..--", ".-.-..",
				    ".-.-.-", ".-.--.", ".-.---", ".--...", ".--..-", ".--.-.", ".--.--", ".---..", ".---.-", ".----.",
				    ".-----", "-.....", "-....-", "-...-.", "-...--", "-..-.."};

	      char alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
 80008d4:	4b58      	ldr	r3, [pc, #352]	; (8000a38 <decodeMorse+0x184>)
 80008d6:	f107 040c 	add.w	r4, r7, #12
 80008da:	461d      	mov	r5, r3
 80008dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008e8:	6020      	str	r0, [r4, #0]
 80008ea:	3404      	adds	r4, #4
 80008ec:	7021      	strb	r1, [r4, #0]
	      char decoded_message[length + 1]; // Maximum possible length of decoded message
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	1c59      	adds	r1, r3, #1
 80008f2:	1e4b      	subs	r3, r1, #1
 80008f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80008f8:	460a      	mov	r2, r1
 80008fa:	2300      	movs	r3, #0
 80008fc:	4692      	mov	sl, r2
 80008fe:	469b      	mov	fp, r3
 8000900:	f04f 0200 	mov.w	r2, #0
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800090c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000914:	460a      	mov	r2, r1
 8000916:	2300      	movs	r3, #0
 8000918:	4690      	mov	r8, r2
 800091a:	4699      	mov	r9, r3
 800091c:	f04f 0200 	mov.w	r2, #0
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000928:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800092c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000930:	460b      	mov	r3, r1
 8000932:	3307      	adds	r3, #7
 8000934:	08db      	lsrs	r3, r3, #3
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	ebad 0d03 	sub.w	sp, sp, r3
 800093c:	466b      	mov	r3, sp
 800093e:	3300      	adds	r3, #0
 8000940:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	      int decoded_index = 0; // Index to keep track of the position in the decoded message
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	      int k;
	      int i=0;
 800094a:	2300      	movs	r3, #0
 800094c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	      while(i<length){
 8000950:	e062      	b.n	8000a18 <decodeMorse+0x164>
			  k=0;
 8000952:	2300      	movs	r3, #0
 8000954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			  decoded_index = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	    	  if (message[i] == ' '){
 800095e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b20      	cmp	r3, #32
 800096a:	d105      	bne.n	8000978 <decodeMorse+0xc4>
	    		  i++;
 800096c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000970:	3301      	adds	r3, #1
 8000972:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000976:	e04f      	b.n	8000a18 <decodeMorse+0x164>
	    	  }
	    	  else if (message[i] == '/'){
 8000978:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	4413      	add	r3, r2
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b2f      	cmp	r3, #47	; 0x2f
 8000984:	d108      	bne.n	8000998 <decodeMorse+0xe4>
		    		printf(" ");
 8000986:	2020      	movs	r0, #32
 8000988:	f003 fad2 	bl	8003f30 <putchar>
	    		    i++;
 800098c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000990:	3301      	adds	r3, #1
 8000992:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000996:	e03f      	b.n	8000a18 <decodeMorse+0x164>
	    	  }
	    	  else{
	    		  for(decoded_index=0;decoded_index<6;decoded_index++){
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800099e:	e015      	b.n	80009cc <decodeMorse+0x118>
	    			  decoded_message[decoded_index] = message[i];
 80009a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	4413      	add	r3, r2
 80009a8:	7819      	ldrb	r1, [r3, #0]
 80009aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80009ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80009b2:	4413      	add	r3, r2
 80009b4:	460a      	mov	r2, r1
 80009b6:	701a      	strb	r2, [r3, #0]
	    			  i++;
 80009b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80009bc:	3301      	adds	r3, #1
 80009be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	    		  for(decoded_index=0;decoded_index<6;decoded_index++){
 80009c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80009c6:	3301      	adds	r3, #1
 80009c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80009cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80009d0:	2b05      	cmp	r3, #5
 80009d2:	dde5      	ble.n	80009a0 <decodeMorse+0xec>
	    		  }
				  while(k < sizeof(morseAlphabet) / sizeof(morseAlphabet[0]) && strcmp(decoded_message, morseAlphabet[k]) != 0){
 80009d4:	e004      	b.n	80009e0 <decodeMorse+0x12c>
					k++;
 80009d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80009da:	3301      	adds	r3, #1
 80009dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				  while(k < sizeof(morseAlphabet) / sizeof(morseAlphabet[0]) && strcmp(decoded_message, morseAlphabet[k]) != 0){
 80009e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80009e4:	2b23      	cmp	r3, #35	; 0x23
 80009e6:	d80e      	bhi.n	8000a06 <decodeMorse+0x152>
 80009e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	33d8      	adds	r3, #216	; 0xd8
 80009f0:	443b      	add	r3, r7
 80009f2:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80009f6:	4619      	mov	r1, r3
 80009f8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80009fc:	f7ff fc02 	bl	8000204 <strcmp>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d1e7      	bne.n	80009d6 <decodeMorse+0x122>
				  }
				  printf("%c",alphabet[k]);
 8000a06:	f107 020c 	add.w	r2, r7, #12
 8000a0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000a0e:	4413      	add	r3, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f003 fa8c 	bl	8003f30 <putchar>
	      while(i<length){
 8000a18:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	db97      	blt.n	8000952 <decodeMorse+0x9e>
	    	  }
	      }
	      printf("\r\n");
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <decodeMorse+0x188>)
 8000a24:	f003 fae0 	bl	8003fe8 <puts>
 8000a28:	46b5      	mov	sp, r6
	  }
 8000a2a:	bf00      	nop
 8000a2c:	37dc      	adds	r7, #220	; 0xdc
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a34:	080048fc 	.word	0x080048fc
 8000a38:	0800498c 	.word	0x0800498c
 8000a3c:	080047d8 	.word	0x080047d8

08000a40 <__io_putchar>:


  PUTCHAR_PROTOTYPE
  {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of
  transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000a48:	1d39      	adds	r1, r7, #4
 8000a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4803      	ldr	r0, [pc, #12]	; (8000a60 <__io_putchar+0x20>)
 8000a52:	f002 f9f9 	bl	8002e48 <HAL_UART_Transmit>
  return ch;
 8000a56:	687b      	ldr	r3, [r7, #4]
  }
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200000cc 	.word	0x200000cc

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b094      	sub	sp, #80	; 0x50
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	2234      	movs	r2, #52	; 0x34
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 fb98 	bl	80041a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <SystemClock_Config+0xd4>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	4a29      	ldr	r2, [pc, #164]	; (8000b38 <SystemClock_Config+0xd4>)
 8000a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a96:	6413      	str	r3, [r2, #64]	; 0x40
 8000a98:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <SystemClock_Config+0xd4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <SystemClock_Config+0xd8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab0:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <SystemClock_Config+0xd8>)
 8000ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab6:	6013      	str	r3, [r2, #0]
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <SystemClock_Config+0xd8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000acc:	2310      	movs	r3, #16
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ad8:	2310      	movs	r3, #16
 8000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000adc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ae0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aea:	2302      	movs	r3, #2
 8000aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 feba 	bl	800286c <HAL_RCC_OscConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000afe:	f000 f92b 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b02:	230f      	movs	r3, #15
 8000b04:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b06:	2302      	movs	r3, #2
 8000b08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fb5a 	bl	80021d8 <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b2a:	f000 f915 	bl	8000d58 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3750      	adds	r7, #80	; 0x50
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40007000 	.word	0x40007000

08000b40 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_ADC3_Init+0x98>)
 8000b54:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <MX_ADC3_Init+0x9c>)
 8000b56:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <MX_ADC3_Init+0x98>)
 8000b5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b5e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_ADC3_Init+0x98>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <MX_ADC3_Init+0x98>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_ADC3_Init+0x98>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <MX_ADC3_Init+0x98>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_ADC3_Init+0x98>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_ADC3_Init+0x98>)
 8000b82:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <MX_ADC3_Init+0xa0>)
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_ADC3_Init+0x98>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_ADC3_Init+0x98>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_ADC3_Init+0x98>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_ADC3_Init+0x98>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_ADC3_Init+0x98>)
 8000ba2:	f000 fb61 	bl	8001268 <HAL_ADC_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000bac:	f000 f8d4 	bl	8000d58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_ADC3_Init+0x98>)
 8000bc2:	f000 fd33 	bl	800162c <HAL_ADC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000bcc:	f000 f8c4 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000084 	.word	0x20000084
 8000bdc:	40012200 	.word	0x40012200
 8000be0:	0f000001 	.word	0x0f000001

08000be4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <MX_USART2_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	f002 f8c4 	bl	8002da8 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c26:	f000 f897 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000cc 	.word	0x200000cc
 8000c34:	40004400 	.word	0x40004400

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b3e      	ldr	r3, [pc, #248]	; (8000d4c <MX_GPIO_Init+0x114>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a3d      	ldr	r2, [pc, #244]	; (8000d4c <MX_GPIO_Init+0x114>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b3b      	ldr	r3, [pc, #236]	; (8000d4c <MX_GPIO_Init+0x114>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <MX_GPIO_Init+0x114>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a36      	ldr	r2, [pc, #216]	; (8000d4c <MX_GPIO_Init+0x114>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <MX_GPIO_Init+0x114>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	4b30      	ldr	r3, [pc, #192]	; (8000d4c <MX_GPIO_Init+0x114>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <MX_GPIO_Init+0x114>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <MX_GPIO_Init+0x114>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <MX_GPIO_Init+0x114>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a28      	ldr	r2, [pc, #160]	; (8000d4c <MX_GPIO_Init+0x114>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <MX_GPIO_Init+0x114>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	4823      	ldr	r0, [pc, #140]	; (8000d50 <MX_GPIO_Init+0x118>)
 8000cc4:	f001 fa30 	bl	8002128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	481d      	ldr	r0, [pc, #116]	; (8000d54 <MX_GPIO_Init+0x11c>)
 8000ce0:	f001 f876 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4816      	ldr	r0, [pc, #88]	; (8000d50 <MX_GPIO_Init+0x118>)
 8000cf8:	f001 f86a 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cfc:	2320      	movs	r3, #32
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	480f      	ldr	r0, [pc, #60]	; (8000d50 <MX_GPIO_Init+0x118>)
 8000d14:	f001 f85c 	bl	8001dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4808      	ldr	r0, [pc, #32]	; (8000d50 <MX_GPIO_Init+0x118>)
 8000d2e:	f001 f84f 	bl	8001dd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	2028      	movs	r0, #40	; 0x28
 8000d38:	f000 ff81 	bl	8001c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d3c:	2028      	movs	r0, #40	; 0x28
 8000d3e:	f000 ff9a 	bl	8001c76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	; 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000
 8000d54:	40020800 	.word	0x40020800

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d78:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000da2:	2007      	movs	r0, #7
 8000da4:	f000 ff40 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40023800 	.word	0x40023800

08000db4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <HAL_ADC_MspInit+0x7c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d127      	bne.n	8000e26 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_ADC_MspInit+0x80>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <HAL_ADC_MspInit+0x80>)
 8000de0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_ADC_MspInit+0x80>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_ADC_MspInit+0x80>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_ADC_MspInit+0x80>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_ADC_MspInit+0x80>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0-WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e12:	2303      	movs	r3, #3
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <HAL_ADC_MspInit+0x84>)
 8000e22:	f000 ffd5 	bl	8001dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40012200 	.word	0x40012200
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000

08000e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_UART_MspInit+0x94>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d133      	bne.n	8000ec6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <HAL_UART_MspInit+0x98>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <HAL_UART_MspInit+0x98>)
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_UART_MspInit+0x98>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_UART_MspInit+0x98>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <HAL_UART_MspInit+0x98>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_UART_MspInit+0x98>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e96:	230c      	movs	r3, #12
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <HAL_UART_MspInit+0x9c>)
 8000eb2:	f000 ff8d 	bl	8001dd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2026      	movs	r0, #38	; 0x26
 8000ebc:	f000 febf 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ec0:	2026      	movs	r0, #38	; 0x26
 8000ec2:	f000 fed8 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ec6:	bf00      	nop
 8000ec8:	3728      	adds	r7, #40	; 0x28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40004400 	.word	0x40004400
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020000 	.word	0x40020000

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 f95a 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <USART2_IRQHandler+0x10>)
 8000f36:	f002 f813 	bl	8002f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200000cc 	.word	0x200000cc

08000f44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (MODE == 0){
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <EXTI15_10_IRQHandler+0x30>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d103      	bne.n	8000f58 <EXTI15_10_IRQHandler+0x14>
	  	MODE = 1;
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <EXTI15_10_IRQHandler+0x30>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	e002      	b.n	8000f5e <EXTI15_10_IRQHandler+0x1a>
	}
	else{
		MODE = 0;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <EXTI15_10_IRQHandler+0x30>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
	}
  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f5e:	2120      	movs	r1, #32
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <EXTI15_10_IRQHandler+0x34>)
 8000f62:	f001 f8fa 	bl	800215a <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f66:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f6a:	f001 f911 	bl	8002190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000018c 	.word	0x2000018c
 8000f78:	40020000 	.word	0x40020000

08000f7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e00a      	b.n	8000fa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f8e:	f3af 8000 	nop.w
 8000f92:	4601      	mov	r1, r0
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60ba      	str	r2, [r7, #8]
 8000f9a:	b2ca      	uxtb	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbf0      	blt.n	8000f8e <_read+0x12>
  }

  return len;
 8000fac:	687b      	ldr	r3, [r7, #4]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	e009      	b.n	8000fdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	60ba      	str	r2, [r7, #8]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fd35 	bl	8000a40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbf1      	blt.n	8000fc8 <_write+0x12>
  }
  return len;
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_close>:

int _close(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001016:	605a      	str	r2, [r3, #4]
  return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_isatty>:

int _isatty(int file)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001060:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <_sbrk+0x5c>)
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <_sbrk+0x60>)
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <_sbrk+0x64>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <_sbrk+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	429a      	cmp	r2, r3
 8001086:	d207      	bcs.n	8001098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001088:	f003 f8dc 	bl	8004244 <__errno>
 800108c:	4603      	mov	r3, r0
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	e009      	b.n	80010ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <_sbrk+0x64>)
 80010a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20020000 	.word	0x20020000
 80010b8:	00000400 	.word	0x00000400
 80010bc:	20000198 	.word	0x20000198
 80010c0:	200002f0 	.word	0x200002f0

080010c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <SystemInit+0x20>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <SystemInit+0x20>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001120 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010ec:	f7ff ffea 	bl	80010c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010f2:	490d      	ldr	r1, [pc, #52]	; (8001128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001108:	4c0a      	ldr	r4, [pc, #40]	; (8001134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001116:	f003 f89b 	bl	8004250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111a:	f7ff f9fb 	bl	8000514 <main>
  bx  lr    
 800111e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001120:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800112c:	080049dc 	.word	0x080049dc
  ldr r2, =_sbss
 8001130:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001134:	200002ec 	.word	0x200002ec

08001138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC_IRQHandler>
	...

0800113c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <HAL_Init+0x40>)
 8001146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <HAL_Init+0x40>)
 8001152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001156:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_Init+0x40>)
 800115e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001162:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 fd5f 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116a:	2000      	movs	r0, #0
 800116c:	f000 f808 	bl	8001180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001170:	f7ff fdf8 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023c00 	.word	0x40023c00

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x54>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x58>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fd77 	bl	8001c92 <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00e      	b.n	80011cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d80a      	bhi.n	80011ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 fd3f 	bl	8001c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_InitTick+0x5c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000004 	.word	0x20000004

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008
 8001204:	2000019c 	.word	0x2000019c

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2000019c 	.word	0x2000019c

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000008 	.word	0x20000008

08001268 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e033      	b.n	80012e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	2b00      	cmp	r3, #0
 8001284:	d109      	bne.n	800129a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fd94 	bl	8000db4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d118      	bne.n	80012d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012ae:	f023 0302 	bic.w	r3, r3, #2
 80012b2:	f043 0202 	orr.w	r2, r3, #2
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 fae8 	bl	8001890 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f023 0303 	bic.w	r3, r3, #3
 80012ce:	f043 0201 	orr.w	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
 80012d6:	e001      	b.n	80012dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_ADC_Start+0x1a>
 8001306:	2302      	movs	r3, #2
 8001308:	e0b2      	b.n	8001470 <HAL_ADC_Start+0x180>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b01      	cmp	r3, #1
 800131e:	d018      	beq.n	8001352 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0201 	orr.w	r2, r2, #1
 800132e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001330:	4b52      	ldr	r3, [pc, #328]	; (800147c <HAL_ADC_Start+0x18c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a52      	ldr	r2, [pc, #328]	; (8001480 <HAL_ADC_Start+0x190>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	0c9a      	lsrs	r2, r3, #18
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001344:	e002      	b.n	800134c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	3b01      	subs	r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f9      	bne.n	8001346 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b01      	cmp	r3, #1
 800135e:	d17a      	bne.n	8001456 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001368:	f023 0301 	bic.w	r3, r3, #1
 800136c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137e:	2b00      	cmp	r3, #0
 8001380:	d007      	beq.n	8001392 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800138a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800139a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800139e:	d106      	bne.n	80013ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	f023 0206 	bic.w	r2, r3, #6
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	645a      	str	r2, [r3, #68]	; 0x44
 80013ac:	e002      	b.n	80013b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013bc:	4b31      	ldr	r3, [pc, #196]	; (8001484 <HAL_ADC_Start+0x194>)
 80013be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013c8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 031f 	and.w	r3, r3, #31
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d12a      	bne.n	800142c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a2b      	ldr	r2, [pc, #172]	; (8001488 <HAL_ADC_Start+0x198>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d015      	beq.n	800140c <HAL_ADC_Start+0x11c>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a29      	ldr	r2, [pc, #164]	; (800148c <HAL_ADC_Start+0x19c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d105      	bne.n	80013f6 <HAL_ADC_Start+0x106>
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_ADC_Start+0x194>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00a      	beq.n	800140c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a25      	ldr	r2, [pc, #148]	; (8001490 <HAL_ADC_Start+0x1a0>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d136      	bne.n	800146e <HAL_ADC_Start+0x17e>
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_ADC_Start+0x194>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	2b00      	cmp	r3, #0
 800140a:	d130      	bne.n	800146e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d129      	bne.n	800146e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	e020      	b.n	800146e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a15      	ldr	r2, [pc, #84]	; (8001488 <HAL_ADC_Start+0x198>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d11b      	bne.n	800146e <HAL_ADC_Start+0x17e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d114      	bne.n	800146e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	e00b      	b.n	800146e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f043 0210 	orr.w	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f043 0201 	orr.w	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	20000000 	.word	0x20000000
 8001480:	431bde83 	.word	0x431bde83
 8001484:	40012300 	.word	0x40012300
 8001488:	40012000 	.word	0x40012000
 800148c:	40012100 	.word	0x40012100
 8001490:	40012200 	.word	0x40012200

08001494 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_ADC_Stop+0x16>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e021      	b.n	80014ee <HAL_ADC_Stop+0x5a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0201 	bic.w	r2, r2, #1
 80014c0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d109      	bne.n	80014e4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014d8:	f023 0301 	bic.w	r3, r3, #1
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001516:	d113      	bne.n	8001540 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001526:	d10b      	bne.n	8001540 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f043 0220 	orr.w	r2, r3, #32
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e063      	b.n	8001608 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001540:	f7ff fe62 	bl	8001208 <HAL_GetTick>
 8001544:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001546:	e021      	b.n	800158c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154e:	d01d      	beq.n	800158c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <HAL_ADC_PollForConversion+0x6c>
 8001556:	f7ff fe57 	bl	8001208 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d212      	bcs.n	800158c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b02      	cmp	r3, #2
 8001572:	d00b      	beq.n	800158c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f043 0204 	orr.w	r2, r3, #4
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e03d      	b.n	8001608 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b02      	cmp	r3, #2
 8001598:	d1d6      	bne.n	8001548 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f06f 0212 	mvn.w	r2, #18
 80015a2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d123      	bne.n	8001606 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d11f      	bne.n	8001606 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d111      	bne.n	8001606 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d105      	bne.n	8001606 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f043 0201 	orr.w	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x1c>
 8001644:	2302      	movs	r3, #2
 8001646:	e113      	b.n	8001870 <HAL_ADC_ConfigChannel+0x244>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b09      	cmp	r3, #9
 8001656:	d925      	bls.n	80016a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68d9      	ldr	r1, [r3, #12]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	3b1e      	subs	r3, #30
 800166e:	2207      	movs	r2, #7
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43da      	mvns	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	400a      	ands	r2, r1
 800167c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68d9      	ldr	r1, [r3, #12]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	b29b      	uxth	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	4603      	mov	r3, r0
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4403      	add	r3, r0
 8001696:	3b1e      	subs	r3, #30
 8001698:	409a      	lsls	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	e022      	b.n	80016ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6919      	ldr	r1, [r3, #16]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	2207      	movs	r2, #7
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	400a      	ands	r2, r1
 80016c6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6919      	ldr	r1, [r3, #16]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	4603      	mov	r3, r0
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4403      	add	r3, r0
 80016e0:	409a      	lsls	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d824      	bhi.n	800173c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	3b05      	subs	r3, #5
 8001704:	221f      	movs	r2, #31
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	400a      	ands	r2, r1
 8001712:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	b29b      	uxth	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	3b05      	subs	r3, #5
 800172e:	fa00 f203 	lsl.w	r2, r0, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	635a      	str	r2, [r3, #52]	; 0x34
 800173a:	e04c      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b0c      	cmp	r3, #12
 8001742:	d824      	bhi.n	800178e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b23      	subs	r3, #35	; 0x23
 8001756:	221f      	movs	r2, #31
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43da      	mvns	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	400a      	ands	r2, r1
 8001764:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
 8001772:	4618      	mov	r0, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	3b23      	subs	r3, #35	; 0x23
 8001780:	fa00 f203 	lsl.w	r2, r0, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	631a      	str	r2, [r3, #48]	; 0x30
 800178c:	e023      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	3b41      	subs	r3, #65	; 0x41
 80017a0:	221f      	movs	r2, #31
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	400a      	ands	r2, r1
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	3b41      	subs	r3, #65	; 0x41
 80017ca:	fa00 f203 	lsl.w	r2, r0, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <HAL_ADC_ConfigChannel+0x250>)
 80017d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a28      	ldr	r2, [pc, #160]	; (8001880 <HAL_ADC_ConfigChannel+0x254>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d10f      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1d8>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b12      	cmp	r3, #18
 80017ea:	d10b      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_ADC_ConfigChannel+0x254>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d12b      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x23a>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <HAL_ADC_ConfigChannel+0x258>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d003      	beq.n	8001820 <HAL_ADC_ConfigChannel+0x1f4>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b11      	cmp	r3, #17
 800181e:	d122      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a11      	ldr	r2, [pc, #68]	; (8001884 <HAL_ADC_ConfigChannel+0x258>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d111      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_ADC_ConfigChannel+0x25c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a11      	ldr	r2, [pc, #68]	; (800188c <HAL_ADC_ConfigChannel+0x260>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	0c9a      	lsrs	r2, r3, #18
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001858:	e002      	b.n	8001860 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	3b01      	subs	r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f9      	bne.n	800185a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	40012300 	.word	0x40012300
 8001880:	40012000 	.word	0x40012000
 8001884:	10000012 	.word	0x10000012
 8001888:	20000000 	.word	0x20000000
 800188c:	431bde83 	.word	0x431bde83

08001890 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001898:	4b79      	ldr	r3, [pc, #484]	; (8001a80 <ADC_Init+0x1f0>)
 800189a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6859      	ldr	r1, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	021a      	lsls	r2, r3, #8
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800190a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6899      	ldr	r1, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	4a58      	ldr	r2, [pc, #352]	; (8001a84 <ADC_Init+0x1f4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d022      	beq.n	800196e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001936:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6899      	ldr	r1, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001958:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6899      	ldr	r1, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	e00f      	b.n	800198e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800197c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800198c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0202 	bic.w	r2, r2, #2
 800199c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6899      	ldr	r1, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7e1b      	ldrb	r3, [r3, #24]
 80019a8:	005a      	lsls	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01b      	beq.n	80019f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6859      	ldr	r1, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	3b01      	subs	r3, #1
 80019e8:	035a      	lsls	r2, r3, #13
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	e007      	b.n	8001a04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a02:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	051a      	lsls	r2, r3, #20
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6899      	ldr	r1, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a46:	025a      	lsls	r2, r3, #9
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6899      	ldr	r1, [r3, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	029a      	lsls	r2, r3, #10
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	609a      	str	r2, [r3, #8]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	40012300 	.word	0x40012300
 8001a84:	0f000001 	.word	0x0f000001

08001a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aba:	4a04      	ldr	r2, [pc, #16]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	60d3      	str	r3, [r2, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db0b      	blt.n	8001b16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	f003 021f 	and.w	r2, r3, #31
 8001b04:	4907      	ldr	r1, [pc, #28]	; (8001b24 <__NVIC_EnableIRQ+0x38>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	db0a      	blt.n	8001b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	490c      	ldr	r1, [pc, #48]	; (8001b74 <__NVIC_SetPriority+0x4c>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b50:	e00a      	b.n	8001b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4908      	ldr	r1, [pc, #32]	; (8001b78 <__NVIC_SetPriority+0x50>)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	761a      	strb	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000e100 	.word	0xe000e100
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f1c3 0307 	rsb	r3, r3, #7
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	bf28      	it	cs
 8001b9a:	2304      	movcs	r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d902      	bls.n	8001bac <NVIC_EncodePriority+0x30>
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3b03      	subs	r3, #3
 8001baa:	e000      	b.n	8001bae <NVIC_EncodePriority+0x32>
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43d9      	mvns	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	4313      	orrs	r3, r2
         );
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	; 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f7ff ff8e 	bl	8001b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff29 	bl	8001a88 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c50:	f7ff ff3e 	bl	8001ad0 <__NVIC_GetPriorityGrouping>
 8001c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ff8e 	bl	8001b7c <NVIC_EncodePriority>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff5d 	bl	8001b28 <__NVIC_SetPriority>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff31 	bl	8001aec <__NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffa2 	bl	8001be4 <SysTick_Config>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff faa6 	bl	8001208 <HAL_GetTick>
 8001cbc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d008      	beq.n	8001cdc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e052      	b.n	8001d82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0216 	bic.w	r2, r2, #22
 8001cea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cfa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d103      	bne.n	8001d0c <HAL_DMA_Abort+0x62>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0208 	bic.w	r2, r2, #8
 8001d1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2c:	e013      	b.n	8001d56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d2e:	f7ff fa6b 	bl	8001208 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d90c      	bls.n	8001d56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2203      	movs	r2, #3
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e015      	b.n	8001d82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e4      	bne.n	8001d2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d68:	223f      	movs	r2, #63	; 0x3f
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d004      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2280      	movs	r2, #128	; 0x80
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e00c      	b.n	8001dc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2205      	movs	r2, #5
 8001dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0201 	bic.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	e165      	b.n	80020b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dec:	2201      	movs	r2, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	f040 8154 	bne.w	80020b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d005      	beq.n	8001e22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d130      	bne.n	8001e84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 0201 	and.w	r2, r3, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d017      	beq.n	8001ec0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d123      	bne.n	8001f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	08da      	lsrs	r2, r3, #3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3208      	adds	r2, #8
 8001ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	08da      	lsrs	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3208      	adds	r2, #8
 8001f0e:	69b9      	ldr	r1, [r7, #24]
 8001f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0203 	and.w	r2, r3, #3
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80ae 	beq.w	80020b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b5d      	ldr	r3, [pc, #372]	; (80020d0 <HAL_GPIO_Init+0x300>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	4a5c      	ldr	r2, [pc, #368]	; (80020d0 <HAL_GPIO_Init+0x300>)
 8001f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f64:	6453      	str	r3, [r2, #68]	; 0x44
 8001f66:	4b5a      	ldr	r3, [pc, #360]	; (80020d0 <HAL_GPIO_Init+0x300>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f72:	4a58      	ldr	r2, [pc, #352]	; (80020d4 <HAL_GPIO_Init+0x304>)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	089b      	lsrs	r3, r3, #2
 8001f78:	3302      	adds	r3, #2
 8001f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	220f      	movs	r2, #15
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4f      	ldr	r2, [pc, #316]	; (80020d8 <HAL_GPIO_Init+0x308>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d025      	beq.n	8001fea <HAL_GPIO_Init+0x21a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4e      	ldr	r2, [pc, #312]	; (80020dc <HAL_GPIO_Init+0x30c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d01f      	beq.n	8001fe6 <HAL_GPIO_Init+0x216>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4d      	ldr	r2, [pc, #308]	; (80020e0 <HAL_GPIO_Init+0x310>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d019      	beq.n	8001fe2 <HAL_GPIO_Init+0x212>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4c      	ldr	r2, [pc, #304]	; (80020e4 <HAL_GPIO_Init+0x314>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_Init+0x20e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a4b      	ldr	r2, [pc, #300]	; (80020e8 <HAL_GPIO_Init+0x318>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00d      	beq.n	8001fda <HAL_GPIO_Init+0x20a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4a      	ldr	r2, [pc, #296]	; (80020ec <HAL_GPIO_Init+0x31c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <HAL_GPIO_Init+0x206>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a49      	ldr	r2, [pc, #292]	; (80020f0 <HAL_GPIO_Init+0x320>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <HAL_GPIO_Init+0x202>
 8001fce:	2306      	movs	r3, #6
 8001fd0:	e00c      	b.n	8001fec <HAL_GPIO_Init+0x21c>
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	e00a      	b.n	8001fec <HAL_GPIO_Init+0x21c>
 8001fd6:	2305      	movs	r3, #5
 8001fd8:	e008      	b.n	8001fec <HAL_GPIO_Init+0x21c>
 8001fda:	2304      	movs	r3, #4
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x21c>
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e004      	b.n	8001fec <HAL_GPIO_Init+0x21c>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e002      	b.n	8001fec <HAL_GPIO_Init+0x21c>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_GPIO_Init+0x21c>
 8001fea:	2300      	movs	r3, #0
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	f002 0203 	and.w	r2, r2, #3
 8001ff2:	0092      	lsls	r2, r2, #2
 8001ff4:	4093      	lsls	r3, r2
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ffc:	4935      	ldr	r1, [pc, #212]	; (80020d4 <HAL_GPIO_Init+0x304>)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	3302      	adds	r3, #2
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800200a:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_GPIO_Init+0x324>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800202e:	4a31      	ldr	r2, [pc, #196]	; (80020f4 <HAL_GPIO_Init+0x324>)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002034:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_GPIO_Init+0x324>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002058:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_GPIO_Init+0x324>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800205e:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <HAL_GPIO_Init+0x324>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002082:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <HAL_GPIO_Init+0x324>)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_GPIO_Init+0x324>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ac:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <HAL_GPIO_Init+0x324>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3301      	adds	r3, #1
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	2b0f      	cmp	r3, #15
 80020bc:	f67f ae96 	bls.w	8001dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3724      	adds	r7, #36	; 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40013800 	.word	0x40013800
 80020d8:	40020000 	.word	0x40020000
 80020dc:	40020400 	.word	0x40020400
 80020e0:	40020800 	.word	0x40020800
 80020e4:	40020c00 	.word	0x40020c00
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40021400 	.word	0x40021400
 80020f0:	40021800 	.word	0x40021800
 80020f4:	40013c00 	.word	0x40013c00

080020f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	e001      	b.n	800211a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
 8002134:	4613      	mov	r3, r2
 8002136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002138:	787b      	ldrb	r3, [r7, #1]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800213e:	887a      	ldrh	r2, [r7, #2]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002144:	e003      	b.n	800214e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002146:	887b      	ldrh	r3, [r7, #2]
 8002148:	041a      	lsls	r2, r3, #16
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	619a      	str	r2, [r3, #24]
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	460b      	mov	r3, r1
 8002164:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800216c:	887a      	ldrh	r2, [r7, #2]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4013      	ands	r3, r2
 8002172:	041a      	lsls	r2, r3, #16
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	43d9      	mvns	r1, r3
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	400b      	ands	r3, r1
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	619a      	str	r2, [r3, #24]
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f806 	bl	80021c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40013c00 	.word	0x40013c00

080021c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0cc      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	4b68      	ldr	r3, [pc, #416]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d90c      	bls.n	8002214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b65      	ldr	r3, [pc, #404]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b63      	ldr	r3, [pc, #396]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0b8      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800222c:	4b59      	ldr	r3, [pc, #356]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4a58      	ldr	r2, [pc, #352]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002236:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002244:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a52      	ldr	r2, [pc, #328]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800224e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002250:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	494d      	ldr	r1, [pc, #308]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d044      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d119      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e07f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d003      	beq.n	8002296 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002292:	2b03      	cmp	r3, #3
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002296:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d109      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e067      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f023 0203 	bic.w	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4934      	ldr	r1, [pc, #208]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c8:	f7fe ff9e 	bl	8001208 <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d0:	f7fe ff9a 	bl	8001208 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e04f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 020c 	and.w	r2, r3, #12
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d1eb      	bne.n	80022d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d20c      	bcs.n	8002320 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e032      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4916      	ldr	r1, [pc, #88]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	490e      	ldr	r1, [pc, #56]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800235e:	f000 f855 	bl	800240c <HAL_RCC_GetSysClockFreq>
 8002362:	4602      	mov	r2, r0
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	490a      	ldr	r1, [pc, #40]	; (8002398 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	5ccb      	ldrb	r3, [r1, r3]
 8002372:	fa22 f303 	lsr.w	r3, r2, r3
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x1c8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fefe 	bl	8001180 <HAL_InitTick>

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023c00 	.word	0x40023c00
 8002394:	40023800 	.word	0x40023800
 8002398:	080049b4 	.word	0x080049b4
 800239c:	20000000 	.word	0x20000000
 80023a0:	20000004 	.word	0x20000004

080023a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000000 	.word	0x20000000

080023bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023c0:	f7ff fff0 	bl	80023a4 <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	0a9b      	lsrs	r3, r3, #10
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4903      	ldr	r1, [pc, #12]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	080049c4 	.word	0x080049c4

080023e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023e8:	f7ff ffdc 	bl	80023a4 <HAL_RCC_GetHCLKFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	0b5b      	lsrs	r3, r3, #13
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	4903      	ldr	r1, [pc, #12]	; (8002408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40023800 	.word	0x40023800
 8002408:	080049c4 	.word	0x080049c4

0800240c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800240c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002410:	b0ae      	sub	sp, #184	; 0xb8
 8002412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002432:	4bcb      	ldr	r3, [pc, #812]	; (8002760 <HAL_RCC_GetSysClockFreq+0x354>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b0c      	cmp	r3, #12
 800243c:	f200 8206 	bhi.w	800284c <HAL_RCC_GetSysClockFreq+0x440>
 8002440:	a201      	add	r2, pc, #4	; (adr r2, 8002448 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002446:	bf00      	nop
 8002448:	0800247d 	.word	0x0800247d
 800244c:	0800284d 	.word	0x0800284d
 8002450:	0800284d 	.word	0x0800284d
 8002454:	0800284d 	.word	0x0800284d
 8002458:	08002485 	.word	0x08002485
 800245c:	0800284d 	.word	0x0800284d
 8002460:	0800284d 	.word	0x0800284d
 8002464:	0800284d 	.word	0x0800284d
 8002468:	0800248d 	.word	0x0800248d
 800246c:	0800284d 	.word	0x0800284d
 8002470:	0800284d 	.word	0x0800284d
 8002474:	0800284d 	.word	0x0800284d
 8002478:	0800267d 	.word	0x0800267d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800247c:	4bb9      	ldr	r3, [pc, #740]	; (8002764 <HAL_RCC_GetSysClockFreq+0x358>)
 800247e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002482:	e1e7      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002484:	4bb8      	ldr	r3, [pc, #736]	; (8002768 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002486:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800248a:	e1e3      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800248c:	4bb4      	ldr	r3, [pc, #720]	; (8002760 <HAL_RCC_GetSysClockFreq+0x354>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002494:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002498:	4bb1      	ldr	r3, [pc, #708]	; (8002760 <HAL_RCC_GetSysClockFreq+0x354>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d071      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a4:	4bae      	ldr	r3, [pc, #696]	; (8002760 <HAL_RCC_GetSysClockFreq+0x354>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	099b      	lsrs	r3, r3, #6
 80024aa:	2200      	movs	r2, #0
 80024ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024b0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80024b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80024c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024ca:	4622      	mov	r2, r4
 80024cc:	462b      	mov	r3, r5
 80024ce:	f04f 0000 	mov.w	r0, #0
 80024d2:	f04f 0100 	mov.w	r1, #0
 80024d6:	0159      	lsls	r1, r3, #5
 80024d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024dc:	0150      	lsls	r0, r2, #5
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4621      	mov	r1, r4
 80024e4:	1a51      	subs	r1, r2, r1
 80024e6:	6439      	str	r1, [r7, #64]	; 0x40
 80024e8:	4629      	mov	r1, r5
 80024ea:	eb63 0301 	sbc.w	r3, r3, r1
 80024ee:	647b      	str	r3, [r7, #68]	; 0x44
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80024fc:	4649      	mov	r1, r9
 80024fe:	018b      	lsls	r3, r1, #6
 8002500:	4641      	mov	r1, r8
 8002502:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002506:	4641      	mov	r1, r8
 8002508:	018a      	lsls	r2, r1, #6
 800250a:	4641      	mov	r1, r8
 800250c:	1a51      	subs	r1, r2, r1
 800250e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002510:	4649      	mov	r1, r9
 8002512:	eb63 0301 	sbc.w	r3, r3, r1
 8002516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002524:	4649      	mov	r1, r9
 8002526:	00cb      	lsls	r3, r1, #3
 8002528:	4641      	mov	r1, r8
 800252a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800252e:	4641      	mov	r1, r8
 8002530:	00ca      	lsls	r2, r1, #3
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	4603      	mov	r3, r0
 8002538:	4622      	mov	r2, r4
 800253a:	189b      	adds	r3, r3, r2
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
 800253e:	462b      	mov	r3, r5
 8002540:	460a      	mov	r2, r1
 8002542:	eb42 0303 	adc.w	r3, r2, r3
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002554:	4629      	mov	r1, r5
 8002556:	024b      	lsls	r3, r1, #9
 8002558:	4621      	mov	r1, r4
 800255a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800255e:	4621      	mov	r1, r4
 8002560:	024a      	lsls	r2, r1, #9
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800256a:	2200      	movs	r2, #0
 800256c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002570:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002574:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002578:	f7fd fe4e 	bl	8000218 <__aeabi_uldivmod>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4613      	mov	r3, r2
 8002582:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002586:	e067      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002588:	4b75      	ldr	r3, [pc, #468]	; (8002760 <HAL_RCC_GetSysClockFreq+0x354>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	2200      	movs	r2, #0
 8002590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002594:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002598:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800259c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80025a2:	2300      	movs	r3, #0
 80025a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80025aa:	4622      	mov	r2, r4
 80025ac:	462b      	mov	r3, r5
 80025ae:	f04f 0000 	mov.w	r0, #0
 80025b2:	f04f 0100 	mov.w	r1, #0
 80025b6:	0159      	lsls	r1, r3, #5
 80025b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025bc:	0150      	lsls	r0, r2, #5
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4621      	mov	r1, r4
 80025c4:	1a51      	subs	r1, r2, r1
 80025c6:	62b9      	str	r1, [r7, #40]	; 0x28
 80025c8:	4629      	mov	r1, r5
 80025ca:	eb63 0301 	sbc.w	r3, r3, r1
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80025dc:	4649      	mov	r1, r9
 80025de:	018b      	lsls	r3, r1, #6
 80025e0:	4641      	mov	r1, r8
 80025e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025e6:	4641      	mov	r1, r8
 80025e8:	018a      	lsls	r2, r1, #6
 80025ea:	4641      	mov	r1, r8
 80025ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80025f0:	4649      	mov	r1, r9
 80025f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002602:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002606:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800260a:	4692      	mov	sl, r2
 800260c:	469b      	mov	fp, r3
 800260e:	4623      	mov	r3, r4
 8002610:	eb1a 0303 	adds.w	r3, sl, r3
 8002614:	623b      	str	r3, [r7, #32]
 8002616:	462b      	mov	r3, r5
 8002618:	eb4b 0303 	adc.w	r3, fp, r3
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800262a:	4629      	mov	r1, r5
 800262c:	028b      	lsls	r3, r1, #10
 800262e:	4621      	mov	r1, r4
 8002630:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002634:	4621      	mov	r1, r4
 8002636:	028a      	lsls	r2, r1, #10
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002640:	2200      	movs	r2, #0
 8002642:	673b      	str	r3, [r7, #112]	; 0x70
 8002644:	677a      	str	r2, [r7, #116]	; 0x74
 8002646:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800264a:	f7fd fde5 	bl	8000218 <__aeabi_uldivmod>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4613      	mov	r3, r2
 8002654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002658:	4b41      	ldr	r3, [pc, #260]	; (8002760 <HAL_RCC_GetSysClockFreq+0x354>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800266a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800266e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002672:	fbb2 f3f3 	udiv	r3, r2, r3
 8002676:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800267a:	e0eb      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800267c:	4b38      	ldr	r3, [pc, #224]	; (8002760 <HAL_RCC_GetSysClockFreq+0x354>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002688:	4b35      	ldr	r3, [pc, #212]	; (8002760 <HAL_RCC_GetSysClockFreq+0x354>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d06b      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002694:	4b32      	ldr	r3, [pc, #200]	; (8002760 <HAL_RCC_GetSysClockFreq+0x354>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	099b      	lsrs	r3, r3, #6
 800269a:	2200      	movs	r2, #0
 800269c:	66bb      	str	r3, [r7, #104]	; 0x68
 800269e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a6:	663b      	str	r3, [r7, #96]	; 0x60
 80026a8:	2300      	movs	r3, #0
 80026aa:	667b      	str	r3, [r7, #100]	; 0x64
 80026ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80026b0:	4622      	mov	r2, r4
 80026b2:	462b      	mov	r3, r5
 80026b4:	f04f 0000 	mov.w	r0, #0
 80026b8:	f04f 0100 	mov.w	r1, #0
 80026bc:	0159      	lsls	r1, r3, #5
 80026be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c2:	0150      	lsls	r0, r2, #5
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4621      	mov	r1, r4
 80026ca:	1a51      	subs	r1, r2, r1
 80026cc:	61b9      	str	r1, [r7, #24]
 80026ce:	4629      	mov	r1, r5
 80026d0:	eb63 0301 	sbc.w	r3, r3, r1
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026e2:	4659      	mov	r1, fp
 80026e4:	018b      	lsls	r3, r1, #6
 80026e6:	4651      	mov	r1, sl
 80026e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ec:	4651      	mov	r1, sl
 80026ee:	018a      	lsls	r2, r1, #6
 80026f0:	4651      	mov	r1, sl
 80026f2:	ebb2 0801 	subs.w	r8, r2, r1
 80026f6:	4659      	mov	r1, fp
 80026f8:	eb63 0901 	sbc.w	r9, r3, r1
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002708:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800270c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002710:	4690      	mov	r8, r2
 8002712:	4699      	mov	r9, r3
 8002714:	4623      	mov	r3, r4
 8002716:	eb18 0303 	adds.w	r3, r8, r3
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	462b      	mov	r3, r5
 800271e:	eb49 0303 	adc.w	r3, r9, r3
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002730:	4629      	mov	r1, r5
 8002732:	024b      	lsls	r3, r1, #9
 8002734:	4621      	mov	r1, r4
 8002736:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800273a:	4621      	mov	r1, r4
 800273c:	024a      	lsls	r2, r1, #9
 800273e:	4610      	mov	r0, r2
 8002740:	4619      	mov	r1, r3
 8002742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002746:	2200      	movs	r2, #0
 8002748:	65bb      	str	r3, [r7, #88]	; 0x58
 800274a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800274c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002750:	f7fd fd62 	bl	8000218 <__aeabi_uldivmod>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4613      	mov	r3, r2
 800275a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800275e:	e065      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x420>
 8002760:	40023800 	.word	0x40023800
 8002764:	00f42400 	.word	0x00f42400
 8002768:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276c:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <HAL_RCC_GetSysClockFreq+0x458>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	2200      	movs	r2, #0
 8002774:	4618      	mov	r0, r3
 8002776:	4611      	mov	r1, r2
 8002778:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800277c:	653b      	str	r3, [r7, #80]	; 0x50
 800277e:	2300      	movs	r3, #0
 8002780:	657b      	str	r3, [r7, #84]	; 0x54
 8002782:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002786:	4642      	mov	r2, r8
 8002788:	464b      	mov	r3, r9
 800278a:	f04f 0000 	mov.w	r0, #0
 800278e:	f04f 0100 	mov.w	r1, #0
 8002792:	0159      	lsls	r1, r3, #5
 8002794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002798:	0150      	lsls	r0, r2, #5
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4641      	mov	r1, r8
 80027a0:	1a51      	subs	r1, r2, r1
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	4649      	mov	r1, r9
 80027a6:	eb63 0301 	sbc.w	r3, r3, r1
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80027b8:	4659      	mov	r1, fp
 80027ba:	018b      	lsls	r3, r1, #6
 80027bc:	4651      	mov	r1, sl
 80027be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027c2:	4651      	mov	r1, sl
 80027c4:	018a      	lsls	r2, r1, #6
 80027c6:	4651      	mov	r1, sl
 80027c8:	1a54      	subs	r4, r2, r1
 80027ca:	4659      	mov	r1, fp
 80027cc:	eb63 0501 	sbc.w	r5, r3, r1
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	00eb      	lsls	r3, r5, #3
 80027da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027de:	00e2      	lsls	r2, r4, #3
 80027e0:	4614      	mov	r4, r2
 80027e2:	461d      	mov	r5, r3
 80027e4:	4643      	mov	r3, r8
 80027e6:	18e3      	adds	r3, r4, r3
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	464b      	mov	r3, r9
 80027ec:	eb45 0303 	adc.w	r3, r5, r3
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027fe:	4629      	mov	r1, r5
 8002800:	028b      	lsls	r3, r1, #10
 8002802:	4621      	mov	r1, r4
 8002804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002808:	4621      	mov	r1, r4
 800280a:	028a      	lsls	r2, r1, #10
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002814:	2200      	movs	r2, #0
 8002816:	64bb      	str	r3, [r7, #72]	; 0x48
 8002818:	64fa      	str	r2, [r7, #76]	; 0x4c
 800281a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800281e:	f7fd fcfb 	bl	8000218 <__aeabi_uldivmod>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4613      	mov	r3, r2
 8002828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800282c:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <HAL_RCC_GetSysClockFreq+0x458>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	0f1b      	lsrs	r3, r3, #28
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800283a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800283e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
 8002846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800284a:	e003      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_RCC_GetSysClockFreq+0x45c>)
 800284e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002852:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002854:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002858:	4618      	mov	r0, r3
 800285a:	37b8      	adds	r7, #184	; 0xb8
 800285c:	46bd      	mov	sp, r7
 800285e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	00f42400 	.word	0x00f42400

0800286c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e28d      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8083 	beq.w	8002992 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800288c:	4b94      	ldr	r3, [pc, #592]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 030c 	and.w	r3, r3, #12
 8002894:	2b04      	cmp	r3, #4
 8002896:	d019      	beq.n	80028cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002898:	4b91      	ldr	r3, [pc, #580]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028a4:	4b8e      	ldr	r3, [pc, #568]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b0:	d00c      	beq.n	80028cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b2:	4b8b      	ldr	r3, [pc, #556]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d112      	bne.n	80028e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028be:	4b88      	ldr	r3, [pc, #544]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ca:	d10b      	bne.n	80028e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	4b84      	ldr	r3, [pc, #528]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d05b      	beq.n	8002990 <HAL_RCC_OscConfig+0x124>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d157      	bne.n	8002990 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e25a      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ec:	d106      	bne.n	80028fc <HAL_RCC_OscConfig+0x90>
 80028ee:	4b7c      	ldr	r3, [pc, #496]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a7b      	ldr	r2, [pc, #492]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 80028f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	e01d      	b.n	8002938 <HAL_RCC_OscConfig+0xcc>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002904:	d10c      	bne.n	8002920 <HAL_RCC_OscConfig+0xb4>
 8002906:	4b76      	ldr	r3, [pc, #472]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a75      	ldr	r2, [pc, #468]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 800290c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	4b73      	ldr	r3, [pc, #460]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a72      	ldr	r2, [pc, #456]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 8002918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e00b      	b.n	8002938 <HAL_RCC_OscConfig+0xcc>
 8002920:	4b6f      	ldr	r3, [pc, #444]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a6e      	ldr	r2, [pc, #440]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 8002926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	4b6c      	ldr	r3, [pc, #432]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a6b      	ldr	r2, [pc, #428]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 8002932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d013      	beq.n	8002968 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe fc62 	bl	8001208 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002948:	f7fe fc5e 	bl	8001208 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e21f      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295a:	4b61      	ldr	r3, [pc, #388]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0xdc>
 8002966:	e014      	b.n	8002992 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7fe fc4e 	bl	8001208 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002970:	f7fe fc4a 	bl	8001208 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e20b      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002982:	4b57      	ldr	r3, [pc, #348]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x104>
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d06f      	beq.n	8002a7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800299e:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d017      	beq.n	80029da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029aa:	4b4d      	ldr	r3, [pc, #308]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d105      	bne.n	80029c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029b6:	4b4a      	ldr	r3, [pc, #296]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00b      	beq.n	80029da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c2:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d11c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ce:	4b44      	ldr	r3, [pc, #272]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d116      	bne.n	8002a08 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	4b41      	ldr	r3, [pc, #260]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d005      	beq.n	80029f2 <HAL_RCC_OscConfig+0x186>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e1d3      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f2:	4b3b      	ldr	r3, [pc, #236]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4937      	ldr	r1, [pc, #220]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a06:	e03a      	b.n	8002a7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d020      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a10:	4b34      	ldr	r3, [pc, #208]	; (8002ae4 <HAL_RCC_OscConfig+0x278>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a16:	f7fe fbf7 	bl	8001208 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a1e:	f7fe fbf3 	bl	8001208 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e1b4      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a30:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3c:	4b28      	ldr	r3, [pc, #160]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4925      	ldr	r1, [pc, #148]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]
 8002a50:	e015      	b.n	8002a7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a52:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <HAL_RCC_OscConfig+0x278>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe fbd6 	bl	8001208 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a60:	f7fe fbd2 	bl	8001208 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e193      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a72:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d036      	beq.n	8002af8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d016      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe fbb6 	bl	8001208 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fbb2 	bl	8001208 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e173      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x234>
 8002abe:	e01b      	b.n	8002af8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac6:	f7fe fb9f 	bl	8001208 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002acc:	e00e      	b.n	8002aec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ace:	f7fe fb9b 	bl	8001208 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d907      	bls.n	8002aec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e15c      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	42470000 	.word	0x42470000
 8002ae8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aec:	4b8a      	ldr	r3, [pc, #552]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1ea      	bne.n	8002ace <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 8097 	beq.w	8002c34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b06:	2300      	movs	r3, #0
 8002b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b0a:	4b83      	ldr	r3, [pc, #524]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10f      	bne.n	8002b36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	4b7f      	ldr	r3, [pc, #508]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a7e      	ldr	r2, [pc, #504]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b7c      	ldr	r3, [pc, #496]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b32:	2301      	movs	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b36:	4b79      	ldr	r3, [pc, #484]	; (8002d1c <HAL_RCC_OscConfig+0x4b0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d118      	bne.n	8002b74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b42:	4b76      	ldr	r3, [pc, #472]	; (8002d1c <HAL_RCC_OscConfig+0x4b0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a75      	ldr	r2, [pc, #468]	; (8002d1c <HAL_RCC_OscConfig+0x4b0>)
 8002b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fb5b 	bl	8001208 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b56:	f7fe fb57 	bl	8001208 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e118      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b68:	4b6c      	ldr	r3, [pc, #432]	; (8002d1c <HAL_RCC_OscConfig+0x4b0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCC_OscConfig+0x31e>
 8002b7c:	4b66      	ldr	r3, [pc, #408]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	4a65      	ldr	r2, [pc, #404]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6713      	str	r3, [r2, #112]	; 0x70
 8002b88:	e01c      	b.n	8002bc4 <HAL_RCC_OscConfig+0x358>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b05      	cmp	r3, #5
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x340>
 8002b92:	4b61      	ldr	r3, [pc, #388]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	4a60      	ldr	r2, [pc, #384]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9e:	4b5e      	ldr	r3, [pc, #376]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	4a5d      	ldr	r2, [pc, #372]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8002baa:	e00b      	b.n	8002bc4 <HAL_RCC_OscConfig+0x358>
 8002bac:	4b5a      	ldr	r3, [pc, #360]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	4a59      	ldr	r2, [pc, #356]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002bb2:	f023 0301 	bic.w	r3, r3, #1
 8002bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb8:	4b57      	ldr	r3, [pc, #348]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	4a56      	ldr	r2, [pc, #344]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002bbe:	f023 0304 	bic.w	r3, r3, #4
 8002bc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d015      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bcc:	f7fe fb1c 	bl	8001208 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7fe fb18 	bl	8001208 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e0d7      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bea:	4b4b      	ldr	r3, [pc, #300]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0ee      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x368>
 8002bf6:	e014      	b.n	8002c22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7fe fb06 	bl	8001208 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c00:	f7fe fb02 	bl	8001208 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e0c1      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c16:	4b40      	ldr	r3, [pc, #256]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1ee      	bne.n	8002c00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d105      	bne.n	8002c34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c28:	4b3b      	ldr	r3, [pc, #236]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	4a3a      	ldr	r2, [pc, #232]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80ad 	beq.w	8002d98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c3e:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d060      	beq.n	8002d0c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d145      	bne.n	8002cde <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c52:	4b33      	ldr	r3, [pc, #204]	; (8002d20 <HAL_RCC_OscConfig+0x4b4>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fad6 	bl	8001208 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c60:	f7fe fad2 	bl	8001208 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e093      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c72:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	019b      	lsls	r3, r3, #6
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	085b      	lsrs	r3, r3, #1
 8002c96:	3b01      	subs	r3, #1
 8002c98:	041b      	lsls	r3, r3, #16
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	061b      	lsls	r3, r3, #24
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	071b      	lsls	r3, r3, #28
 8002caa:	491b      	ldr	r1, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x4b4>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7fe faa7 	bl	8001208 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbe:	f7fe faa3 	bl	8001208 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e064      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x452>
 8002cdc:	e05c      	b.n	8002d98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_RCC_OscConfig+0x4b4>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fa90 	bl	8001208 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe fa8c 	bl	8001208 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e04d      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_RCC_OscConfig+0x4ac>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x480>
 8002d0a:	e045      	b.n	8002d98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e040      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d24:	4b1f      	ldr	r3, [pc, #124]	; (8002da4 <HAL_RCC_OscConfig+0x538>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d030      	beq.n	8002d94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d129      	bne.n	8002d94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d122      	bne.n	8002d94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d119      	bne.n	8002d94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d10f      	bne.n	8002d94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d107      	bne.n	8002d94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800

08002da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e042      	b.n	8002e40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fe f834 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2224      	movs	r2, #36	; 0x24
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fd69 	bl	80038c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	; 0x28
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	4613      	mov	r3, r2
 8002e56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d175      	bne.n	8002f54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_UART_Transmit+0x2c>
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e06e      	b.n	8002f56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2221      	movs	r2, #33	; 0x21
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e86:	f7fe f9bf 	bl	8001208 <HAL_GetTick>
 8002e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	88fa      	ldrh	r2, [r7, #6]
 8002e90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	88fa      	ldrh	r2, [r7, #6]
 8002e96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea0:	d108      	bne.n	8002eb4 <HAL_UART_Transmit+0x6c>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	e003      	b.n	8002ebc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ebc:	e02e      	b.n	8002f1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2180      	movs	r1, #128	; 0x80
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fb05 	bl	80034d8 <UART_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e03a      	b.n	8002f56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10b      	bne.n	8002efe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ef4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	3302      	adds	r3, #2
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	e007      	b.n	8002f0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1cb      	bne.n	8002ebe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2140      	movs	r1, #64	; 0x40
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 fad1 	bl	80034d8 <UART_WaitOnFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e006      	b.n	8002f56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b0ba      	sub	sp, #232	; 0xe8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10f      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x66>
 8002fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fbc2 	bl	8003748 <UART_Receive_IT>
      return;
 8002fc4:	e25b      	b.n	800347e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80de 	beq.w	800318c <HAL_UART_IRQHandler+0x22c>
 8002fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80d1 	beq.w	800318c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <HAL_UART_IRQHandler+0xae>
 8002ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800300e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_UART_IRQHandler+0xd2>
 800301a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	f043 0202 	orr.w	r2, r3, #2
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00b      	beq.n	8003056 <HAL_UART_IRQHandler+0xf6>
 800303e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	f043 0204 	orr.w	r2, r3, #4
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d011      	beq.n	8003086 <HAL_UART_IRQHandler+0x126>
 8003062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800306e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	f043 0208 	orr.w	r2, r3, #8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 81f2 	beq.w	8003474 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_UART_IRQHandler+0x14e>
 800309c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fb4d 	bl	8003748 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <HAL_UART_IRQHandler+0x17a>
 80030d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d04f      	beq.n	800317a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa55 	bl	800358a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	d141      	bne.n	8003172 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3314      	adds	r3, #20
 80030f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003104:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800310c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3314      	adds	r3, #20
 8003116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800311a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800311e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1d9      	bne.n	80030ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d013      	beq.n	800316a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	4a7e      	ldr	r2, [pc, #504]	; (8003340 <HAL_UART_IRQHandler+0x3e0>)
 8003148:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe fe1b 	bl	8001d8a <HAL_DMA_Abort_IT>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003164:	4610      	mov	r0, r2
 8003166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	e00e      	b.n	8003188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f99e 	bl	80034ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	e00a      	b.n	8003188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f99a 	bl	80034ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	e006      	b.n	8003188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f996 	bl	80034ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003186:	e175      	b.n	8003474 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	bf00      	nop
    return;
 800318a:	e173      	b.n	8003474 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	2b01      	cmp	r3, #1
 8003192:	f040 814f 	bne.w	8003434 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8148 	beq.w	8003434 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8141 	beq.w	8003434 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d2:	2b40      	cmp	r3, #64	; 0x40
 80031d4:	f040 80b6 	bne.w	8003344 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8145 	beq.w	8003478 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031f6:	429a      	cmp	r2, r3
 80031f8:	f080 813e 	bcs.w	8003478 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003202:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320e:	f000 8088 	beq.w	8003322 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003220:	e853 3f00 	ldrex	r3, [r3]
 8003224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800322c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800323e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003246:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800324a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800324e:	e841 2300 	strex	r3, r2, [r1]
 8003252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1d9      	bne.n	8003212 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3314      	adds	r3, #20
 8003264:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800326e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3314      	adds	r3, #20
 800327e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003282:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003286:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800328a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e1      	bne.n	800325e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3314      	adds	r3, #20
 80032a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3314      	adds	r3, #20
 80032ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e3      	bne.n	800329a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ea:	e853 3f00 	ldrex	r3, [r3]
 80032ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f2:	f023 0310 	bic.w	r3, r3, #16
 80032f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003304:	65ba      	str	r2, [r7, #88]	; 0x58
 8003306:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800330a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e3      	bne.n	80032e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe fcc4 	bl	8001caa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003330:	b29b      	uxth	r3, r3
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	b29b      	uxth	r3, r3
 8003336:	4619      	mov	r1, r3
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f8c1 	bl	80034c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800333e:	e09b      	b.n	8003478 <HAL_UART_IRQHandler+0x518>
 8003340:	08003651 	.word	0x08003651
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800334c:	b29b      	uxth	r3, r3
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 808e 	beq.w	800347c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8089 	beq.w	800347c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	330c      	adds	r3, #12
 8003370:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	e853 3f00 	ldrex	r3, [r3]
 8003378:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800337a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800337c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003380:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	330c      	adds	r3, #12
 800338a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800338e:	647a      	str	r2, [r7, #68]	; 0x44
 8003390:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800339c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1e3      	bne.n	800336a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3314      	adds	r3, #20
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	e853 3f00 	ldrex	r3, [r3]
 80033b0:	623b      	str	r3, [r7, #32]
   return(result);
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3314      	adds	r3, #20
 80033c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033c6:	633a      	str	r2, [r7, #48]	; 0x30
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1e3      	bne.n	80033a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0310 	bic.w	r3, r3, #16
 80033fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	330c      	adds	r3, #12
 8003408:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800340c:	61fa      	str	r2, [r7, #28]
 800340e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	69b9      	ldr	r1, [r7, #24]
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	e841 2300 	strex	r3, r2, [r1]
 8003418:	617b      	str	r3, [r7, #20]
   return(result);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e3      	bne.n	80033e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003426:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800342a:	4619      	mov	r1, r3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f847 	bl	80034c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003432:	e023      	b.n	800347c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <HAL_UART_IRQHandler+0x4f4>
 8003440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f913 	bl	8003678 <UART_Transmit_IT>
    return;
 8003452:	e014      	b.n	800347e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00e      	beq.n	800347e <HAL_UART_IRQHandler+0x51e>
 8003460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f953 	bl	8003718 <UART_EndTransmit_IT>
    return;
 8003472:	e004      	b.n	800347e <HAL_UART_IRQHandler+0x51e>
    return;
 8003474:	bf00      	nop
 8003476:	e002      	b.n	800347e <HAL_UART_IRQHandler+0x51e>
      return;
 8003478:	bf00      	nop
 800347a:	e000      	b.n	800347e <HAL_UART_IRQHandler+0x51e>
      return;
 800347c:	bf00      	nop
  }
}
 800347e:	37e8      	adds	r7, #232	; 0xe8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	4613      	mov	r3, r2
 80034e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e8:	e03b      	b.n	8003562 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f0:	d037      	beq.n	8003562 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f2:	f7fd fe89 	bl	8001208 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	6a3a      	ldr	r2, [r7, #32]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d302      	bcc.n	8003508 <UART_WaitOnFlagUntilTimeout+0x30>
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e03a      	b.n	8003582 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d023      	beq.n	8003562 <UART_WaitOnFlagUntilTimeout+0x8a>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b80      	cmp	r3, #128	; 0x80
 800351e:	d020      	beq.n	8003562 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d01d      	beq.n	8003562 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b08      	cmp	r3, #8
 8003532:	d116      	bne.n	8003562 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f81d 	bl	800358a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2208      	movs	r2, #8
 8003554:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e00f      	b.n	8003582 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4013      	ands	r3, r2
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	bf0c      	ite	eq
 8003572:	2301      	moveq	r3, #1
 8003574:	2300      	movne	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	429a      	cmp	r2, r3
 800357e:	d0b4      	beq.n	80034ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800358a:	b480      	push	{r7}
 800358c:	b095      	sub	sp, #84	; 0x54
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	330c      	adds	r3, #12
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	330c      	adds	r3, #12
 80035b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035b2:	643a      	str	r2, [r7, #64]	; 0x40
 80035b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035ba:	e841 2300 	strex	r3, r2, [r1]
 80035be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1e5      	bne.n	8003592 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3314      	adds	r3, #20
 80035cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3314      	adds	r3, #20
 80035e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ee:	e841 2300 	strex	r3, r2, [r1]
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e5      	bne.n	80035c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d119      	bne.n	8003636 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	60bb      	str	r3, [r7, #8]
   return(result);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f023 0310 	bic.w	r3, r3, #16
 8003618:	647b      	str	r3, [r7, #68]	; 0x44
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	330c      	adds	r3, #12
 8003620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003622:	61ba      	str	r2, [r7, #24]
 8003624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	6979      	ldr	r1, [r7, #20]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	613b      	str	r3, [r7, #16]
   return(result);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e5      	bne.n	8003602 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003644:	bf00      	nop
 8003646:	3754      	adds	r7, #84	; 0x54
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f7ff ff1e 	bl	80034ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003670:	bf00      	nop
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b21      	cmp	r3, #33	; 0x21
 800368a:	d13e      	bne.n	800370a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003694:	d114      	bne.n	80036c0 <UART_Transmit_IT+0x48>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d110      	bne.n	80036c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	1c9a      	adds	r2, r3, #2
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	621a      	str	r2, [r3, #32]
 80036be:	e008      	b.n	80036d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	1c59      	adds	r1, r3, #1
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6211      	str	r1, [r2, #32]
 80036ca:	781a      	ldrb	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29b      	uxth	r3, r3
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	4619      	mov	r1, r3
 80036e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10f      	bne.n	8003706 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003704:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	e000      	b.n	800370c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800370a:	2302      	movs	r3, #2
  }
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800372e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff fea3 	bl	8003484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08c      	sub	sp, #48	; 0x30
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b22      	cmp	r3, #34	; 0x22
 800375a:	f040 80ae 	bne.w	80038ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003766:	d117      	bne.n	8003798 <UART_Receive_IT+0x50>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d113      	bne.n	8003798 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003770:	2300      	movs	r3, #0
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003786:	b29a      	uxth	r2, r3
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	1c9a      	adds	r2, r3, #2
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	629a      	str	r2, [r3, #40]	; 0x28
 8003796:	e026      	b.n	80037e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037aa:	d007      	beq.n	80037bc <UART_Receive_IT+0x74>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <UART_Receive_IT+0x82>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e008      	b.n	80037dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	4619      	mov	r1, r3
 80037f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d15d      	bne.n	80038b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0220 	bic.w	r2, r2, #32
 8003808:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003818:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	2b01      	cmp	r3, #1
 800383e:	d135      	bne.n	80038ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	330c      	adds	r3, #12
 800384c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	613b      	str	r3, [r7, #16]
   return(result);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f023 0310 	bic.w	r3, r3, #16
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	330c      	adds	r3, #12
 8003864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003866:	623a      	str	r2, [r7, #32]
 8003868:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	69f9      	ldr	r1, [r7, #28]
 800386c:	6a3a      	ldr	r2, [r7, #32]
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	61bb      	str	r3, [r7, #24]
   return(result);
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e5      	bne.n	8003846 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b10      	cmp	r3, #16
 8003886:	d10a      	bne.n	800389e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038a2:	4619      	mov	r1, r3
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff fe0b 	bl	80034c0 <HAL_UARTEx_RxEventCallback>
 80038aa:	e002      	b.n	80038b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff fdf3 	bl	8003498 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e002      	b.n	80038bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	e000      	b.n	80038bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80038ba:	2302      	movs	r3, #2
  }
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3730      	adds	r7, #48	; 0x30
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c8:	b0c0      	sub	sp, #256	; 0x100
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	68d9      	ldr	r1, [r3, #12]
 80038e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	ea40 0301 	orr.w	r3, r0, r1
 80038ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	431a      	orrs	r2, r3
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800391c:	f021 010c 	bic.w	r1, r1, #12
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800392a:	430b      	orrs	r3, r1
 800392c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800393a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393e:	6999      	ldr	r1, [r3, #24]
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	ea40 0301 	orr.w	r3, r0, r1
 800394a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4b8f      	ldr	r3, [pc, #572]	; (8003b90 <UART_SetConfig+0x2cc>)
 8003954:	429a      	cmp	r2, r3
 8003956:	d005      	beq.n	8003964 <UART_SetConfig+0xa0>
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4b8d      	ldr	r3, [pc, #564]	; (8003b94 <UART_SetConfig+0x2d0>)
 8003960:	429a      	cmp	r2, r3
 8003962:	d104      	bne.n	800396e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003964:	f7fe fd3e 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 8003968:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800396c:	e003      	b.n	8003976 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800396e:	f7fe fd25 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 8003972:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003980:	f040 810c 	bne.w	8003b9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003988:	2200      	movs	r2, #0
 800398a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800398e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003992:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003996:	4622      	mov	r2, r4
 8003998:	462b      	mov	r3, r5
 800399a:	1891      	adds	r1, r2, r2
 800399c:	65b9      	str	r1, [r7, #88]	; 0x58
 800399e:	415b      	adcs	r3, r3
 80039a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039a6:	4621      	mov	r1, r4
 80039a8:	eb12 0801 	adds.w	r8, r2, r1
 80039ac:	4629      	mov	r1, r5
 80039ae:	eb43 0901 	adc.w	r9, r3, r1
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039c6:	4690      	mov	r8, r2
 80039c8:	4699      	mov	r9, r3
 80039ca:	4623      	mov	r3, r4
 80039cc:	eb18 0303 	adds.w	r3, r8, r3
 80039d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039d4:	462b      	mov	r3, r5
 80039d6:	eb49 0303 	adc.w	r3, r9, r3
 80039da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039f2:	460b      	mov	r3, r1
 80039f4:	18db      	adds	r3, r3, r3
 80039f6:	653b      	str	r3, [r7, #80]	; 0x50
 80039f8:	4613      	mov	r3, r2
 80039fa:	eb42 0303 	adc.w	r3, r2, r3
 80039fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003a00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a08:	f7fc fc06 	bl	8000218 <__aeabi_uldivmod>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4b61      	ldr	r3, [pc, #388]	; (8003b98 <UART_SetConfig+0x2d4>)
 8003a12:	fba3 2302 	umull	r2, r3, r3, r2
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	011c      	lsls	r4, r3, #4
 8003a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a2c:	4642      	mov	r2, r8
 8003a2e:	464b      	mov	r3, r9
 8003a30:	1891      	adds	r1, r2, r2
 8003a32:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a34:	415b      	adcs	r3, r3
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a3c:	4641      	mov	r1, r8
 8003a3e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a42:	4649      	mov	r1, r9
 8003a44:	eb43 0b01 	adc.w	fp, r3, r1
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a5c:	4692      	mov	sl, r2
 8003a5e:	469b      	mov	fp, r3
 8003a60:	4643      	mov	r3, r8
 8003a62:	eb1a 0303 	adds.w	r3, sl, r3
 8003a66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a6a:	464b      	mov	r3, r9
 8003a6c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	18db      	adds	r3, r3, r3
 8003a8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a8e:	4613      	mov	r3, r2
 8003a90:	eb42 0303 	adc.w	r3, r2, r3
 8003a94:	647b      	str	r3, [r7, #68]	; 0x44
 8003a96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a9e:	f7fc fbbb 	bl	8000218 <__aeabi_uldivmod>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4b3b      	ldr	r3, [pc, #236]	; (8003b98 <UART_SetConfig+0x2d4>)
 8003aaa:	fba3 2301 	umull	r2, r3, r3, r1
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	2264      	movs	r2, #100	; 0x64
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	1acb      	subs	r3, r1, r3
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003abe:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <UART_SetConfig+0x2d4>)
 8003ac0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003acc:	441c      	add	r4, r3
 8003ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ad8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003adc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	464b      	mov	r3, r9
 8003ae4:	1891      	adds	r1, r2, r2
 8003ae6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ae8:	415b      	adcs	r3, r3
 8003aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003af0:	4641      	mov	r1, r8
 8003af2:	1851      	adds	r1, r2, r1
 8003af4:	6339      	str	r1, [r7, #48]	; 0x30
 8003af6:	4649      	mov	r1, r9
 8003af8:	414b      	adcs	r3, r1
 8003afa:	637b      	str	r3, [r7, #52]	; 0x34
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b08:	4659      	mov	r1, fp
 8003b0a:	00cb      	lsls	r3, r1, #3
 8003b0c:	4651      	mov	r1, sl
 8003b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b12:	4651      	mov	r1, sl
 8003b14:	00ca      	lsls	r2, r1, #3
 8003b16:	4610      	mov	r0, r2
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	4642      	mov	r2, r8
 8003b1e:	189b      	adds	r3, r3, r2
 8003b20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b24:	464b      	mov	r3, r9
 8003b26:	460a      	mov	r2, r1
 8003b28:	eb42 0303 	adc.w	r3, r2, r3
 8003b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b44:	460b      	mov	r3, r1
 8003b46:	18db      	adds	r3, r3, r3
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	eb42 0303 	adc.w	r3, r2, r3
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b5a:	f7fc fb5d 	bl	8000218 <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <UART_SetConfig+0x2d4>)
 8003b64:	fba3 1302 	umull	r1, r3, r3, r2
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	2164      	movs	r1, #100	; 0x64
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	3332      	adds	r3, #50	; 0x32
 8003b76:	4a08      	ldr	r2, [pc, #32]	; (8003b98 <UART_SetConfig+0x2d4>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	f003 0207 	and.w	r2, r3, #7
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4422      	add	r2, r4
 8003b8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b8c:	e106      	b.n	8003d9c <UART_SetConfig+0x4d8>
 8003b8e:	bf00      	nop
 8003b90:	40011000 	.word	0x40011000
 8003b94:	40011400 	.word	0x40011400
 8003b98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ba6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003baa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bae:	4642      	mov	r2, r8
 8003bb0:	464b      	mov	r3, r9
 8003bb2:	1891      	adds	r1, r2, r2
 8003bb4:	6239      	str	r1, [r7, #32]
 8003bb6:	415b      	adcs	r3, r3
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bbe:	4641      	mov	r1, r8
 8003bc0:	1854      	adds	r4, r2, r1
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	eb43 0501 	adc.w	r5, r3, r1
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	00eb      	lsls	r3, r5, #3
 8003bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bd6:	00e2      	lsls	r2, r4, #3
 8003bd8:	4614      	mov	r4, r2
 8003bda:	461d      	mov	r5, r3
 8003bdc:	4643      	mov	r3, r8
 8003bde:	18e3      	adds	r3, r4, r3
 8003be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003be4:	464b      	mov	r3, r9
 8003be6:	eb45 0303 	adc.w	r3, r5, r3
 8003bea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	008b      	lsls	r3, r1, #2
 8003c0e:	4621      	mov	r1, r4
 8003c10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c14:	4621      	mov	r1, r4
 8003c16:	008a      	lsls	r2, r1, #2
 8003c18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c1c:	f7fc fafc 	bl	8000218 <__aeabi_uldivmod>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4b60      	ldr	r3, [pc, #384]	; (8003da8 <UART_SetConfig+0x4e4>)
 8003c26:	fba3 2302 	umull	r2, r3, r3, r2
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	011c      	lsls	r4, r3, #4
 8003c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c40:	4642      	mov	r2, r8
 8003c42:	464b      	mov	r3, r9
 8003c44:	1891      	adds	r1, r2, r2
 8003c46:	61b9      	str	r1, [r7, #24]
 8003c48:	415b      	adcs	r3, r3
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c50:	4641      	mov	r1, r8
 8003c52:	1851      	adds	r1, r2, r1
 8003c54:	6139      	str	r1, [r7, #16]
 8003c56:	4649      	mov	r1, r9
 8003c58:	414b      	adcs	r3, r1
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c68:	4659      	mov	r1, fp
 8003c6a:	00cb      	lsls	r3, r1, #3
 8003c6c:	4651      	mov	r1, sl
 8003c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c72:	4651      	mov	r1, sl
 8003c74:	00ca      	lsls	r2, r1, #3
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	189b      	adds	r3, r3, r2
 8003c80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c84:	464b      	mov	r3, r9
 8003c86:	460a      	mov	r2, r1
 8003c88:	eb42 0303 	adc.w	r3, r2, r3
 8003c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ca8:	4649      	mov	r1, r9
 8003caa:	008b      	lsls	r3, r1, #2
 8003cac:	4641      	mov	r1, r8
 8003cae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	008a      	lsls	r2, r1, #2
 8003cb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cba:	f7fc faad 	bl	8000218 <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4b38      	ldr	r3, [pc, #224]	; (8003da8 <UART_SetConfig+0x4e4>)
 8003cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2264      	movs	r2, #100	; 0x64
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	1acb      	subs	r3, r1, r3
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	3332      	adds	r3, #50	; 0x32
 8003cd8:	4a33      	ldr	r2, [pc, #204]	; (8003da8 <UART_SetConfig+0x4e4>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ce4:	441c      	add	r4, r3
 8003ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cea:	2200      	movs	r2, #0
 8003cec:	673b      	str	r3, [r7, #112]	; 0x70
 8003cee:	677a      	str	r2, [r7, #116]	; 0x74
 8003cf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	1891      	adds	r1, r2, r2
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	415b      	adcs	r3, r3
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d04:	4641      	mov	r1, r8
 8003d06:	1851      	adds	r1, r2, r1
 8003d08:	6039      	str	r1, [r7, #0]
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	414b      	adcs	r3, r1
 8003d0e:	607b      	str	r3, [r7, #4]
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d1c:	4659      	mov	r1, fp
 8003d1e:	00cb      	lsls	r3, r1, #3
 8003d20:	4651      	mov	r1, sl
 8003d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d26:	4651      	mov	r1, sl
 8003d28:	00ca      	lsls	r2, r1, #3
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4642      	mov	r2, r8
 8003d32:	189b      	adds	r3, r3, r2
 8003d34:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d36:	464b      	mov	r3, r9
 8003d38:	460a      	mov	r2, r1
 8003d3a:	eb42 0303 	adc.w	r3, r2, r3
 8003d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	663b      	str	r3, [r7, #96]	; 0x60
 8003d4a:	667a      	str	r2, [r7, #100]	; 0x64
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d58:	4649      	mov	r1, r9
 8003d5a:	008b      	lsls	r3, r1, #2
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d62:	4641      	mov	r1, r8
 8003d64:	008a      	lsls	r2, r1, #2
 8003d66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d6a:	f7fc fa55 	bl	8000218 <__aeabi_uldivmod>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <UART_SetConfig+0x4e4>)
 8003d74:	fba3 1302 	umull	r1, r3, r3, r2
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	2164      	movs	r1, #100	; 0x64
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	3332      	adds	r3, #50	; 0x32
 8003d86:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <UART_SetConfig+0x4e4>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	f003 020f 	and.w	r2, r3, #15
 8003d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4422      	add	r2, r4
 8003d9a:	609a      	str	r2, [r3, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003da2:	46bd      	mov	sp, r7
 8003da4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da8:	51eb851f 	.word	0x51eb851f

08003dac <std>:
 8003dac:	2300      	movs	r3, #0
 8003dae:	b510      	push	{r4, lr}
 8003db0:	4604      	mov	r4, r0
 8003db2:	e9c0 3300 	strd	r3, r3, [r0]
 8003db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dba:	6083      	str	r3, [r0, #8]
 8003dbc:	8181      	strh	r1, [r0, #12]
 8003dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8003dc0:	81c2      	strh	r2, [r0, #14]
 8003dc2:	6183      	str	r3, [r0, #24]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	305c      	adds	r0, #92	; 0x5c
 8003dca:	f000 f9ed 	bl	80041a8 <memset>
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <std+0x58>)
 8003dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8003dd2:	4b0d      	ldr	r3, [pc, #52]	; (8003e08 <std+0x5c>)
 8003dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <std+0x60>)
 8003dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <std+0x64>)
 8003ddc:	6323      	str	r3, [r4, #48]	; 0x30
 8003dde:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <std+0x68>)
 8003de0:	6224      	str	r4, [r4, #32]
 8003de2:	429c      	cmp	r4, r3
 8003de4:	d006      	beq.n	8003df4 <std+0x48>
 8003de6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003dea:	4294      	cmp	r4, r2
 8003dec:	d002      	beq.n	8003df4 <std+0x48>
 8003dee:	33d0      	adds	r3, #208	; 0xd0
 8003df0:	429c      	cmp	r4, r3
 8003df2:	d105      	bne.n	8003e00 <std+0x54>
 8003df4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dfc:	f000 ba4c 	b.w	8004298 <__retarget_lock_init_recursive>
 8003e00:	bd10      	pop	{r4, pc}
 8003e02:	bf00      	nop
 8003e04:	08003ff9 	.word	0x08003ff9
 8003e08:	0800401b 	.word	0x0800401b
 8003e0c:	08004053 	.word	0x08004053
 8003e10:	08004077 	.word	0x08004077
 8003e14:	200001a0 	.word	0x200001a0

08003e18 <stdio_exit_handler>:
 8003e18:	4a02      	ldr	r2, [pc, #8]	; (8003e24 <stdio_exit_handler+0xc>)
 8003e1a:	4903      	ldr	r1, [pc, #12]	; (8003e28 <stdio_exit_handler+0x10>)
 8003e1c:	4803      	ldr	r0, [pc, #12]	; (8003e2c <stdio_exit_handler+0x14>)
 8003e1e:	f000 b869 	b.w	8003ef4 <_fwalk_sglue>
 8003e22:	bf00      	nop
 8003e24:	2000000c 	.word	0x2000000c
 8003e28:	080045b9 	.word	0x080045b9
 8003e2c:	20000018 	.word	0x20000018

08003e30 <cleanup_stdio>:
 8003e30:	6841      	ldr	r1, [r0, #4]
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <cleanup_stdio+0x34>)
 8003e34:	4299      	cmp	r1, r3
 8003e36:	b510      	push	{r4, lr}
 8003e38:	4604      	mov	r4, r0
 8003e3a:	d001      	beq.n	8003e40 <cleanup_stdio+0x10>
 8003e3c:	f000 fbbc 	bl	80045b8 <_fflush_r>
 8003e40:	68a1      	ldr	r1, [r4, #8]
 8003e42:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <cleanup_stdio+0x38>)
 8003e44:	4299      	cmp	r1, r3
 8003e46:	d002      	beq.n	8003e4e <cleanup_stdio+0x1e>
 8003e48:	4620      	mov	r0, r4
 8003e4a:	f000 fbb5 	bl	80045b8 <_fflush_r>
 8003e4e:	68e1      	ldr	r1, [r4, #12]
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <cleanup_stdio+0x3c>)
 8003e52:	4299      	cmp	r1, r3
 8003e54:	d004      	beq.n	8003e60 <cleanup_stdio+0x30>
 8003e56:	4620      	mov	r0, r4
 8003e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e5c:	f000 bbac 	b.w	80045b8 <_fflush_r>
 8003e60:	bd10      	pop	{r4, pc}
 8003e62:	bf00      	nop
 8003e64:	200001a0 	.word	0x200001a0
 8003e68:	20000208 	.word	0x20000208
 8003e6c:	20000270 	.word	0x20000270

08003e70 <global_stdio_init.part.0>:
 8003e70:	b510      	push	{r4, lr}
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <global_stdio_init.part.0+0x30>)
 8003e74:	4c0b      	ldr	r4, [pc, #44]	; (8003ea4 <global_stdio_init.part.0+0x34>)
 8003e76:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <global_stdio_init.part.0+0x38>)
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2104      	movs	r1, #4
 8003e80:	f7ff ff94 	bl	8003dac <std>
 8003e84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003e88:	2201      	movs	r2, #1
 8003e8a:	2109      	movs	r1, #9
 8003e8c:	f7ff ff8e 	bl	8003dac <std>
 8003e90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003e94:	2202      	movs	r2, #2
 8003e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e9a:	2112      	movs	r1, #18
 8003e9c:	f7ff bf86 	b.w	8003dac <std>
 8003ea0:	200002d8 	.word	0x200002d8
 8003ea4:	200001a0 	.word	0x200001a0
 8003ea8:	08003e19 	.word	0x08003e19

08003eac <__sfp_lock_acquire>:
 8003eac:	4801      	ldr	r0, [pc, #4]	; (8003eb4 <__sfp_lock_acquire+0x8>)
 8003eae:	f000 b9f4 	b.w	800429a <__retarget_lock_acquire_recursive>
 8003eb2:	bf00      	nop
 8003eb4:	200002e1 	.word	0x200002e1

08003eb8 <__sfp_lock_release>:
 8003eb8:	4801      	ldr	r0, [pc, #4]	; (8003ec0 <__sfp_lock_release+0x8>)
 8003eba:	f000 b9ef 	b.w	800429c <__retarget_lock_release_recursive>
 8003ebe:	bf00      	nop
 8003ec0:	200002e1 	.word	0x200002e1

08003ec4 <__sinit>:
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	f7ff fff0 	bl	8003eac <__sfp_lock_acquire>
 8003ecc:	6a23      	ldr	r3, [r4, #32]
 8003ece:	b11b      	cbz	r3, 8003ed8 <__sinit+0x14>
 8003ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed4:	f7ff bff0 	b.w	8003eb8 <__sfp_lock_release>
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <__sinit+0x28>)
 8003eda:	6223      	str	r3, [r4, #32]
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <__sinit+0x2c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f5      	bne.n	8003ed0 <__sinit+0xc>
 8003ee4:	f7ff ffc4 	bl	8003e70 <global_stdio_init.part.0>
 8003ee8:	e7f2      	b.n	8003ed0 <__sinit+0xc>
 8003eea:	bf00      	nop
 8003eec:	08003e31 	.word	0x08003e31
 8003ef0:	200002d8 	.word	0x200002d8

08003ef4 <_fwalk_sglue>:
 8003ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ef8:	4607      	mov	r7, r0
 8003efa:	4688      	mov	r8, r1
 8003efc:	4614      	mov	r4, r2
 8003efe:	2600      	movs	r6, #0
 8003f00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f04:	f1b9 0901 	subs.w	r9, r9, #1
 8003f08:	d505      	bpl.n	8003f16 <_fwalk_sglue+0x22>
 8003f0a:	6824      	ldr	r4, [r4, #0]
 8003f0c:	2c00      	cmp	r4, #0
 8003f0e:	d1f7      	bne.n	8003f00 <_fwalk_sglue+0xc>
 8003f10:	4630      	mov	r0, r6
 8003f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f16:	89ab      	ldrh	r3, [r5, #12]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d907      	bls.n	8003f2c <_fwalk_sglue+0x38>
 8003f1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f20:	3301      	adds	r3, #1
 8003f22:	d003      	beq.n	8003f2c <_fwalk_sglue+0x38>
 8003f24:	4629      	mov	r1, r5
 8003f26:	4638      	mov	r0, r7
 8003f28:	47c0      	blx	r8
 8003f2a:	4306      	orrs	r6, r0
 8003f2c:	3568      	adds	r5, #104	; 0x68
 8003f2e:	e7e9      	b.n	8003f04 <_fwalk_sglue+0x10>

08003f30 <putchar>:
 8003f30:	4b02      	ldr	r3, [pc, #8]	; (8003f3c <putchar+0xc>)
 8003f32:	4601      	mov	r1, r0
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	6882      	ldr	r2, [r0, #8]
 8003f38:	f000 bbc8 	b.w	80046cc <_putc_r>
 8003f3c:	20000064 	.word	0x20000064

08003f40 <_puts_r>:
 8003f40:	6a03      	ldr	r3, [r0, #32]
 8003f42:	b570      	push	{r4, r5, r6, lr}
 8003f44:	6884      	ldr	r4, [r0, #8]
 8003f46:	4605      	mov	r5, r0
 8003f48:	460e      	mov	r6, r1
 8003f4a:	b90b      	cbnz	r3, 8003f50 <_puts_r+0x10>
 8003f4c:	f7ff ffba 	bl	8003ec4 <__sinit>
 8003f50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f52:	07db      	lsls	r3, r3, #31
 8003f54:	d405      	bmi.n	8003f62 <_puts_r+0x22>
 8003f56:	89a3      	ldrh	r3, [r4, #12]
 8003f58:	0598      	lsls	r0, r3, #22
 8003f5a:	d402      	bmi.n	8003f62 <_puts_r+0x22>
 8003f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f5e:	f000 f99c 	bl	800429a <__retarget_lock_acquire_recursive>
 8003f62:	89a3      	ldrh	r3, [r4, #12]
 8003f64:	0719      	lsls	r1, r3, #28
 8003f66:	d513      	bpl.n	8003f90 <_puts_r+0x50>
 8003f68:	6923      	ldr	r3, [r4, #16]
 8003f6a:	b18b      	cbz	r3, 8003f90 <_puts_r+0x50>
 8003f6c:	3e01      	subs	r6, #1
 8003f6e:	68a3      	ldr	r3, [r4, #8]
 8003f70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f74:	3b01      	subs	r3, #1
 8003f76:	60a3      	str	r3, [r4, #8]
 8003f78:	b9e9      	cbnz	r1, 8003fb6 <_puts_r+0x76>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da2e      	bge.n	8003fdc <_puts_r+0x9c>
 8003f7e:	4622      	mov	r2, r4
 8003f80:	210a      	movs	r1, #10
 8003f82:	4628      	mov	r0, r5
 8003f84:	f000 f87b 	bl	800407e <__swbuf_r>
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d007      	beq.n	8003f9c <_puts_r+0x5c>
 8003f8c:	250a      	movs	r5, #10
 8003f8e:	e007      	b.n	8003fa0 <_puts_r+0x60>
 8003f90:	4621      	mov	r1, r4
 8003f92:	4628      	mov	r0, r5
 8003f94:	f000 f8b0 	bl	80040f8 <__swsetup_r>
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	d0e7      	beq.n	8003f6c <_puts_r+0x2c>
 8003f9c:	f04f 35ff 	mov.w	r5, #4294967295
 8003fa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fa2:	07da      	lsls	r2, r3, #31
 8003fa4:	d405      	bmi.n	8003fb2 <_puts_r+0x72>
 8003fa6:	89a3      	ldrh	r3, [r4, #12]
 8003fa8:	059b      	lsls	r3, r3, #22
 8003faa:	d402      	bmi.n	8003fb2 <_puts_r+0x72>
 8003fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fae:	f000 f975 	bl	800429c <__retarget_lock_release_recursive>
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	bd70      	pop	{r4, r5, r6, pc}
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	da04      	bge.n	8003fc4 <_puts_r+0x84>
 8003fba:	69a2      	ldr	r2, [r4, #24]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	dc06      	bgt.n	8003fce <_puts_r+0x8e>
 8003fc0:	290a      	cmp	r1, #10
 8003fc2:	d004      	beq.n	8003fce <_puts_r+0x8e>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	6022      	str	r2, [r4, #0]
 8003fca:	7019      	strb	r1, [r3, #0]
 8003fcc:	e7cf      	b.n	8003f6e <_puts_r+0x2e>
 8003fce:	4622      	mov	r2, r4
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	f000 f854 	bl	800407e <__swbuf_r>
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	d1c9      	bne.n	8003f6e <_puts_r+0x2e>
 8003fda:	e7df      	b.n	8003f9c <_puts_r+0x5c>
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	250a      	movs	r5, #10
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	6022      	str	r2, [r4, #0]
 8003fe4:	701d      	strb	r5, [r3, #0]
 8003fe6:	e7db      	b.n	8003fa0 <_puts_r+0x60>

08003fe8 <puts>:
 8003fe8:	4b02      	ldr	r3, [pc, #8]	; (8003ff4 <puts+0xc>)
 8003fea:	4601      	mov	r1, r0
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	f7ff bfa7 	b.w	8003f40 <_puts_r>
 8003ff2:	bf00      	nop
 8003ff4:	20000064 	.word	0x20000064

08003ff8 <__sread>:
 8003ff8:	b510      	push	{r4, lr}
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004000:	f000 f8fc 	bl	80041fc <_read_r>
 8004004:	2800      	cmp	r0, #0
 8004006:	bfab      	itete	ge
 8004008:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800400a:	89a3      	ldrhlt	r3, [r4, #12]
 800400c:	181b      	addge	r3, r3, r0
 800400e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004012:	bfac      	ite	ge
 8004014:	6563      	strge	r3, [r4, #84]	; 0x54
 8004016:	81a3      	strhlt	r3, [r4, #12]
 8004018:	bd10      	pop	{r4, pc}

0800401a <__swrite>:
 800401a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800401e:	461f      	mov	r7, r3
 8004020:	898b      	ldrh	r3, [r1, #12]
 8004022:	05db      	lsls	r3, r3, #23
 8004024:	4605      	mov	r5, r0
 8004026:	460c      	mov	r4, r1
 8004028:	4616      	mov	r6, r2
 800402a:	d505      	bpl.n	8004038 <__swrite+0x1e>
 800402c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004030:	2302      	movs	r3, #2
 8004032:	2200      	movs	r2, #0
 8004034:	f000 f8d0 	bl	80041d8 <_lseek_r>
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800403e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004042:	81a3      	strh	r3, [r4, #12]
 8004044:	4632      	mov	r2, r6
 8004046:	463b      	mov	r3, r7
 8004048:	4628      	mov	r0, r5
 800404a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800404e:	f000 b8e7 	b.w	8004220 <_write_r>

08004052 <__sseek>:
 8004052:	b510      	push	{r4, lr}
 8004054:	460c      	mov	r4, r1
 8004056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800405a:	f000 f8bd 	bl	80041d8 <_lseek_r>
 800405e:	1c43      	adds	r3, r0, #1
 8004060:	89a3      	ldrh	r3, [r4, #12]
 8004062:	bf15      	itete	ne
 8004064:	6560      	strne	r0, [r4, #84]	; 0x54
 8004066:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800406a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800406e:	81a3      	strheq	r3, [r4, #12]
 8004070:	bf18      	it	ne
 8004072:	81a3      	strhne	r3, [r4, #12]
 8004074:	bd10      	pop	{r4, pc}

08004076 <__sclose>:
 8004076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800407a:	f000 b89d 	b.w	80041b8 <_close_r>

0800407e <__swbuf_r>:
 800407e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004080:	460e      	mov	r6, r1
 8004082:	4614      	mov	r4, r2
 8004084:	4605      	mov	r5, r0
 8004086:	b118      	cbz	r0, 8004090 <__swbuf_r+0x12>
 8004088:	6a03      	ldr	r3, [r0, #32]
 800408a:	b90b      	cbnz	r3, 8004090 <__swbuf_r+0x12>
 800408c:	f7ff ff1a 	bl	8003ec4 <__sinit>
 8004090:	69a3      	ldr	r3, [r4, #24]
 8004092:	60a3      	str	r3, [r4, #8]
 8004094:	89a3      	ldrh	r3, [r4, #12]
 8004096:	071a      	lsls	r2, r3, #28
 8004098:	d525      	bpl.n	80040e6 <__swbuf_r+0x68>
 800409a:	6923      	ldr	r3, [r4, #16]
 800409c:	b31b      	cbz	r3, 80040e6 <__swbuf_r+0x68>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	6922      	ldr	r2, [r4, #16]
 80040a2:	1a98      	subs	r0, r3, r2
 80040a4:	6963      	ldr	r3, [r4, #20]
 80040a6:	b2f6      	uxtb	r6, r6
 80040a8:	4283      	cmp	r3, r0
 80040aa:	4637      	mov	r7, r6
 80040ac:	dc04      	bgt.n	80040b8 <__swbuf_r+0x3a>
 80040ae:	4621      	mov	r1, r4
 80040b0:	4628      	mov	r0, r5
 80040b2:	f000 fa81 	bl	80045b8 <_fflush_r>
 80040b6:	b9e0      	cbnz	r0, 80040f2 <__swbuf_r+0x74>
 80040b8:	68a3      	ldr	r3, [r4, #8]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	60a3      	str	r3, [r4, #8]
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	6022      	str	r2, [r4, #0]
 80040c4:	701e      	strb	r6, [r3, #0]
 80040c6:	6962      	ldr	r2, [r4, #20]
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d004      	beq.n	80040d8 <__swbuf_r+0x5a>
 80040ce:	89a3      	ldrh	r3, [r4, #12]
 80040d0:	07db      	lsls	r3, r3, #31
 80040d2:	d506      	bpl.n	80040e2 <__swbuf_r+0x64>
 80040d4:	2e0a      	cmp	r6, #10
 80040d6:	d104      	bne.n	80040e2 <__swbuf_r+0x64>
 80040d8:	4621      	mov	r1, r4
 80040da:	4628      	mov	r0, r5
 80040dc:	f000 fa6c 	bl	80045b8 <_fflush_r>
 80040e0:	b938      	cbnz	r0, 80040f2 <__swbuf_r+0x74>
 80040e2:	4638      	mov	r0, r7
 80040e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040e6:	4621      	mov	r1, r4
 80040e8:	4628      	mov	r0, r5
 80040ea:	f000 f805 	bl	80040f8 <__swsetup_r>
 80040ee:	2800      	cmp	r0, #0
 80040f0:	d0d5      	beq.n	800409e <__swbuf_r+0x20>
 80040f2:	f04f 37ff 	mov.w	r7, #4294967295
 80040f6:	e7f4      	b.n	80040e2 <__swbuf_r+0x64>

080040f8 <__swsetup_r>:
 80040f8:	b538      	push	{r3, r4, r5, lr}
 80040fa:	4b2a      	ldr	r3, [pc, #168]	; (80041a4 <__swsetup_r+0xac>)
 80040fc:	4605      	mov	r5, r0
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	460c      	mov	r4, r1
 8004102:	b118      	cbz	r0, 800410c <__swsetup_r+0x14>
 8004104:	6a03      	ldr	r3, [r0, #32]
 8004106:	b90b      	cbnz	r3, 800410c <__swsetup_r+0x14>
 8004108:	f7ff fedc 	bl	8003ec4 <__sinit>
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004112:	0718      	lsls	r0, r3, #28
 8004114:	d422      	bmi.n	800415c <__swsetup_r+0x64>
 8004116:	06d9      	lsls	r1, r3, #27
 8004118:	d407      	bmi.n	800412a <__swsetup_r+0x32>
 800411a:	2309      	movs	r3, #9
 800411c:	602b      	str	r3, [r5, #0]
 800411e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004122:	81a3      	strh	r3, [r4, #12]
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	e034      	b.n	8004194 <__swsetup_r+0x9c>
 800412a:	0758      	lsls	r0, r3, #29
 800412c:	d512      	bpl.n	8004154 <__swsetup_r+0x5c>
 800412e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004130:	b141      	cbz	r1, 8004144 <__swsetup_r+0x4c>
 8004132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004136:	4299      	cmp	r1, r3
 8004138:	d002      	beq.n	8004140 <__swsetup_r+0x48>
 800413a:	4628      	mov	r0, r5
 800413c:	f000 f8be 	bl	80042bc <_free_r>
 8004140:	2300      	movs	r3, #0
 8004142:	6363      	str	r3, [r4, #52]	; 0x34
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800414a:	81a3      	strh	r3, [r4, #12]
 800414c:	2300      	movs	r3, #0
 800414e:	6063      	str	r3, [r4, #4]
 8004150:	6923      	ldr	r3, [r4, #16]
 8004152:	6023      	str	r3, [r4, #0]
 8004154:	89a3      	ldrh	r3, [r4, #12]
 8004156:	f043 0308 	orr.w	r3, r3, #8
 800415a:	81a3      	strh	r3, [r4, #12]
 800415c:	6923      	ldr	r3, [r4, #16]
 800415e:	b94b      	cbnz	r3, 8004174 <__swsetup_r+0x7c>
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800416a:	d003      	beq.n	8004174 <__swsetup_r+0x7c>
 800416c:	4621      	mov	r1, r4
 800416e:	4628      	mov	r0, r5
 8004170:	f000 fa70 	bl	8004654 <__smakebuf_r>
 8004174:	89a0      	ldrh	r0, [r4, #12]
 8004176:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800417a:	f010 0301 	ands.w	r3, r0, #1
 800417e:	d00a      	beq.n	8004196 <__swsetup_r+0x9e>
 8004180:	2300      	movs	r3, #0
 8004182:	60a3      	str	r3, [r4, #8]
 8004184:	6963      	ldr	r3, [r4, #20]
 8004186:	425b      	negs	r3, r3
 8004188:	61a3      	str	r3, [r4, #24]
 800418a:	6923      	ldr	r3, [r4, #16]
 800418c:	b943      	cbnz	r3, 80041a0 <__swsetup_r+0xa8>
 800418e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004192:	d1c4      	bne.n	800411e <__swsetup_r+0x26>
 8004194:	bd38      	pop	{r3, r4, r5, pc}
 8004196:	0781      	lsls	r1, r0, #30
 8004198:	bf58      	it	pl
 800419a:	6963      	ldrpl	r3, [r4, #20]
 800419c:	60a3      	str	r3, [r4, #8]
 800419e:	e7f4      	b.n	800418a <__swsetup_r+0x92>
 80041a0:	2000      	movs	r0, #0
 80041a2:	e7f7      	b.n	8004194 <__swsetup_r+0x9c>
 80041a4:	20000064 	.word	0x20000064

080041a8 <memset>:
 80041a8:	4402      	add	r2, r0
 80041aa:	4603      	mov	r3, r0
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d100      	bne.n	80041b2 <memset+0xa>
 80041b0:	4770      	bx	lr
 80041b2:	f803 1b01 	strb.w	r1, [r3], #1
 80041b6:	e7f9      	b.n	80041ac <memset+0x4>

080041b8 <_close_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	4d06      	ldr	r5, [pc, #24]	; (80041d4 <_close_r+0x1c>)
 80041bc:	2300      	movs	r3, #0
 80041be:	4604      	mov	r4, r0
 80041c0:	4608      	mov	r0, r1
 80041c2:	602b      	str	r3, [r5, #0]
 80041c4:	f7fc ff13 	bl	8000fee <_close>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_close_r+0x1a>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_close_r+0x1a>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	200002dc 	.word	0x200002dc

080041d8 <_lseek_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4d07      	ldr	r5, [pc, #28]	; (80041f8 <_lseek_r+0x20>)
 80041dc:	4604      	mov	r4, r0
 80041de:	4608      	mov	r0, r1
 80041e0:	4611      	mov	r1, r2
 80041e2:	2200      	movs	r2, #0
 80041e4:	602a      	str	r2, [r5, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f7fc ff28 	bl	800103c <_lseek>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_lseek_r+0x1e>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_lseek_r+0x1e>
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	200002dc 	.word	0x200002dc

080041fc <_read_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	4d07      	ldr	r5, [pc, #28]	; (800421c <_read_r+0x20>)
 8004200:	4604      	mov	r4, r0
 8004202:	4608      	mov	r0, r1
 8004204:	4611      	mov	r1, r2
 8004206:	2200      	movs	r2, #0
 8004208:	602a      	str	r2, [r5, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	f7fc feb6 	bl	8000f7c <_read>
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	d102      	bne.n	800421a <_read_r+0x1e>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	b103      	cbz	r3, 800421a <_read_r+0x1e>
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	bd38      	pop	{r3, r4, r5, pc}
 800421c:	200002dc 	.word	0x200002dc

08004220 <_write_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	4d07      	ldr	r5, [pc, #28]	; (8004240 <_write_r+0x20>)
 8004224:	4604      	mov	r4, r0
 8004226:	4608      	mov	r0, r1
 8004228:	4611      	mov	r1, r2
 800422a:	2200      	movs	r2, #0
 800422c:	602a      	str	r2, [r5, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	f7fc fec1 	bl	8000fb6 <_write>
 8004234:	1c43      	adds	r3, r0, #1
 8004236:	d102      	bne.n	800423e <_write_r+0x1e>
 8004238:	682b      	ldr	r3, [r5, #0]
 800423a:	b103      	cbz	r3, 800423e <_write_r+0x1e>
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	bd38      	pop	{r3, r4, r5, pc}
 8004240:	200002dc 	.word	0x200002dc

08004244 <__errno>:
 8004244:	4b01      	ldr	r3, [pc, #4]	; (800424c <__errno+0x8>)
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	20000064 	.word	0x20000064

08004250 <__libc_init_array>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	4d0d      	ldr	r5, [pc, #52]	; (8004288 <__libc_init_array+0x38>)
 8004254:	4c0d      	ldr	r4, [pc, #52]	; (800428c <__libc_init_array+0x3c>)
 8004256:	1b64      	subs	r4, r4, r5
 8004258:	10a4      	asrs	r4, r4, #2
 800425a:	2600      	movs	r6, #0
 800425c:	42a6      	cmp	r6, r4
 800425e:	d109      	bne.n	8004274 <__libc_init_array+0x24>
 8004260:	4d0b      	ldr	r5, [pc, #44]	; (8004290 <__libc_init_array+0x40>)
 8004262:	4c0c      	ldr	r4, [pc, #48]	; (8004294 <__libc_init_array+0x44>)
 8004264:	f000 fa98 	bl	8004798 <_init>
 8004268:	1b64      	subs	r4, r4, r5
 800426a:	10a4      	asrs	r4, r4, #2
 800426c:	2600      	movs	r6, #0
 800426e:	42a6      	cmp	r6, r4
 8004270:	d105      	bne.n	800427e <__libc_init_array+0x2e>
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	f855 3b04 	ldr.w	r3, [r5], #4
 8004278:	4798      	blx	r3
 800427a:	3601      	adds	r6, #1
 800427c:	e7ee      	b.n	800425c <__libc_init_array+0xc>
 800427e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004282:	4798      	blx	r3
 8004284:	3601      	adds	r6, #1
 8004286:	e7f2      	b.n	800426e <__libc_init_array+0x1e>
 8004288:	080049d4 	.word	0x080049d4
 800428c:	080049d4 	.word	0x080049d4
 8004290:	080049d4 	.word	0x080049d4
 8004294:	080049d8 	.word	0x080049d8

08004298 <__retarget_lock_init_recursive>:
 8004298:	4770      	bx	lr

0800429a <__retarget_lock_acquire_recursive>:
 800429a:	4770      	bx	lr

0800429c <__retarget_lock_release_recursive>:
 800429c:	4770      	bx	lr

0800429e <memcpy>:
 800429e:	440a      	add	r2, r1
 80042a0:	4291      	cmp	r1, r2
 80042a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80042a6:	d100      	bne.n	80042aa <memcpy+0xc>
 80042a8:	4770      	bx	lr
 80042aa:	b510      	push	{r4, lr}
 80042ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042b4:	4291      	cmp	r1, r2
 80042b6:	d1f9      	bne.n	80042ac <memcpy+0xe>
 80042b8:	bd10      	pop	{r4, pc}
	...

080042bc <_free_r>:
 80042bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042be:	2900      	cmp	r1, #0
 80042c0:	d044      	beq.n	800434c <_free_r+0x90>
 80042c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c6:	9001      	str	r0, [sp, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f1a1 0404 	sub.w	r4, r1, #4
 80042ce:	bfb8      	it	lt
 80042d0:	18e4      	addlt	r4, r4, r3
 80042d2:	f000 f8df 	bl	8004494 <__malloc_lock>
 80042d6:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <_free_r+0x94>)
 80042d8:	9801      	ldr	r0, [sp, #4]
 80042da:	6813      	ldr	r3, [r2, #0]
 80042dc:	b933      	cbnz	r3, 80042ec <_free_r+0x30>
 80042de:	6063      	str	r3, [r4, #4]
 80042e0:	6014      	str	r4, [r2, #0]
 80042e2:	b003      	add	sp, #12
 80042e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042e8:	f000 b8da 	b.w	80044a0 <__malloc_unlock>
 80042ec:	42a3      	cmp	r3, r4
 80042ee:	d908      	bls.n	8004302 <_free_r+0x46>
 80042f0:	6825      	ldr	r5, [r4, #0]
 80042f2:	1961      	adds	r1, r4, r5
 80042f4:	428b      	cmp	r3, r1
 80042f6:	bf01      	itttt	eq
 80042f8:	6819      	ldreq	r1, [r3, #0]
 80042fa:	685b      	ldreq	r3, [r3, #4]
 80042fc:	1949      	addeq	r1, r1, r5
 80042fe:	6021      	streq	r1, [r4, #0]
 8004300:	e7ed      	b.n	80042de <_free_r+0x22>
 8004302:	461a      	mov	r2, r3
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	b10b      	cbz	r3, 800430c <_free_r+0x50>
 8004308:	42a3      	cmp	r3, r4
 800430a:	d9fa      	bls.n	8004302 <_free_r+0x46>
 800430c:	6811      	ldr	r1, [r2, #0]
 800430e:	1855      	adds	r5, r2, r1
 8004310:	42a5      	cmp	r5, r4
 8004312:	d10b      	bne.n	800432c <_free_r+0x70>
 8004314:	6824      	ldr	r4, [r4, #0]
 8004316:	4421      	add	r1, r4
 8004318:	1854      	adds	r4, r2, r1
 800431a:	42a3      	cmp	r3, r4
 800431c:	6011      	str	r1, [r2, #0]
 800431e:	d1e0      	bne.n	80042e2 <_free_r+0x26>
 8004320:	681c      	ldr	r4, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	6053      	str	r3, [r2, #4]
 8004326:	440c      	add	r4, r1
 8004328:	6014      	str	r4, [r2, #0]
 800432a:	e7da      	b.n	80042e2 <_free_r+0x26>
 800432c:	d902      	bls.n	8004334 <_free_r+0x78>
 800432e:	230c      	movs	r3, #12
 8004330:	6003      	str	r3, [r0, #0]
 8004332:	e7d6      	b.n	80042e2 <_free_r+0x26>
 8004334:	6825      	ldr	r5, [r4, #0]
 8004336:	1961      	adds	r1, r4, r5
 8004338:	428b      	cmp	r3, r1
 800433a:	bf04      	itt	eq
 800433c:	6819      	ldreq	r1, [r3, #0]
 800433e:	685b      	ldreq	r3, [r3, #4]
 8004340:	6063      	str	r3, [r4, #4]
 8004342:	bf04      	itt	eq
 8004344:	1949      	addeq	r1, r1, r5
 8004346:	6021      	streq	r1, [r4, #0]
 8004348:	6054      	str	r4, [r2, #4]
 800434a:	e7ca      	b.n	80042e2 <_free_r+0x26>
 800434c:	b003      	add	sp, #12
 800434e:	bd30      	pop	{r4, r5, pc}
 8004350:	200002e4 	.word	0x200002e4

08004354 <sbrk_aligned>:
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	4e0e      	ldr	r6, [pc, #56]	; (8004390 <sbrk_aligned+0x3c>)
 8004358:	460c      	mov	r4, r1
 800435a:	6831      	ldr	r1, [r6, #0]
 800435c:	4605      	mov	r5, r0
 800435e:	b911      	cbnz	r1, 8004366 <sbrk_aligned+0x12>
 8004360:	f000 fa0a 	bl	8004778 <_sbrk_r>
 8004364:	6030      	str	r0, [r6, #0]
 8004366:	4621      	mov	r1, r4
 8004368:	4628      	mov	r0, r5
 800436a:	f000 fa05 	bl	8004778 <_sbrk_r>
 800436e:	1c43      	adds	r3, r0, #1
 8004370:	d00a      	beq.n	8004388 <sbrk_aligned+0x34>
 8004372:	1cc4      	adds	r4, r0, #3
 8004374:	f024 0403 	bic.w	r4, r4, #3
 8004378:	42a0      	cmp	r0, r4
 800437a:	d007      	beq.n	800438c <sbrk_aligned+0x38>
 800437c:	1a21      	subs	r1, r4, r0
 800437e:	4628      	mov	r0, r5
 8004380:	f000 f9fa 	bl	8004778 <_sbrk_r>
 8004384:	3001      	adds	r0, #1
 8004386:	d101      	bne.n	800438c <sbrk_aligned+0x38>
 8004388:	f04f 34ff 	mov.w	r4, #4294967295
 800438c:	4620      	mov	r0, r4
 800438e:	bd70      	pop	{r4, r5, r6, pc}
 8004390:	200002e8 	.word	0x200002e8

08004394 <_malloc_r>:
 8004394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004398:	1ccd      	adds	r5, r1, #3
 800439a:	f025 0503 	bic.w	r5, r5, #3
 800439e:	3508      	adds	r5, #8
 80043a0:	2d0c      	cmp	r5, #12
 80043a2:	bf38      	it	cc
 80043a4:	250c      	movcc	r5, #12
 80043a6:	2d00      	cmp	r5, #0
 80043a8:	4607      	mov	r7, r0
 80043aa:	db01      	blt.n	80043b0 <_malloc_r+0x1c>
 80043ac:	42a9      	cmp	r1, r5
 80043ae:	d905      	bls.n	80043bc <_malloc_r+0x28>
 80043b0:	230c      	movs	r3, #12
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	2600      	movs	r6, #0
 80043b6:	4630      	mov	r0, r6
 80043b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004490 <_malloc_r+0xfc>
 80043c0:	f000 f868 	bl	8004494 <__malloc_lock>
 80043c4:	f8d8 3000 	ldr.w	r3, [r8]
 80043c8:	461c      	mov	r4, r3
 80043ca:	bb5c      	cbnz	r4, 8004424 <_malloc_r+0x90>
 80043cc:	4629      	mov	r1, r5
 80043ce:	4638      	mov	r0, r7
 80043d0:	f7ff ffc0 	bl	8004354 <sbrk_aligned>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	4604      	mov	r4, r0
 80043d8:	d155      	bne.n	8004486 <_malloc_r+0xf2>
 80043da:	f8d8 4000 	ldr.w	r4, [r8]
 80043de:	4626      	mov	r6, r4
 80043e0:	2e00      	cmp	r6, #0
 80043e2:	d145      	bne.n	8004470 <_malloc_r+0xdc>
 80043e4:	2c00      	cmp	r4, #0
 80043e6:	d048      	beq.n	800447a <_malloc_r+0xe6>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	4631      	mov	r1, r6
 80043ec:	4638      	mov	r0, r7
 80043ee:	eb04 0903 	add.w	r9, r4, r3
 80043f2:	f000 f9c1 	bl	8004778 <_sbrk_r>
 80043f6:	4581      	cmp	r9, r0
 80043f8:	d13f      	bne.n	800447a <_malloc_r+0xe6>
 80043fa:	6821      	ldr	r1, [r4, #0]
 80043fc:	1a6d      	subs	r5, r5, r1
 80043fe:	4629      	mov	r1, r5
 8004400:	4638      	mov	r0, r7
 8004402:	f7ff ffa7 	bl	8004354 <sbrk_aligned>
 8004406:	3001      	adds	r0, #1
 8004408:	d037      	beq.n	800447a <_malloc_r+0xe6>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	442b      	add	r3, r5
 800440e:	6023      	str	r3, [r4, #0]
 8004410:	f8d8 3000 	ldr.w	r3, [r8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d038      	beq.n	800448a <_malloc_r+0xf6>
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	42a2      	cmp	r2, r4
 800441c:	d12b      	bne.n	8004476 <_malloc_r+0xe2>
 800441e:	2200      	movs	r2, #0
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	e00f      	b.n	8004444 <_malloc_r+0xb0>
 8004424:	6822      	ldr	r2, [r4, #0]
 8004426:	1b52      	subs	r2, r2, r5
 8004428:	d41f      	bmi.n	800446a <_malloc_r+0xd6>
 800442a:	2a0b      	cmp	r2, #11
 800442c:	d917      	bls.n	800445e <_malloc_r+0xca>
 800442e:	1961      	adds	r1, r4, r5
 8004430:	42a3      	cmp	r3, r4
 8004432:	6025      	str	r5, [r4, #0]
 8004434:	bf18      	it	ne
 8004436:	6059      	strne	r1, [r3, #4]
 8004438:	6863      	ldr	r3, [r4, #4]
 800443a:	bf08      	it	eq
 800443c:	f8c8 1000 	streq.w	r1, [r8]
 8004440:	5162      	str	r2, [r4, r5]
 8004442:	604b      	str	r3, [r1, #4]
 8004444:	4638      	mov	r0, r7
 8004446:	f104 060b 	add.w	r6, r4, #11
 800444a:	f000 f829 	bl	80044a0 <__malloc_unlock>
 800444e:	f026 0607 	bic.w	r6, r6, #7
 8004452:	1d23      	adds	r3, r4, #4
 8004454:	1af2      	subs	r2, r6, r3
 8004456:	d0ae      	beq.n	80043b6 <_malloc_r+0x22>
 8004458:	1b9b      	subs	r3, r3, r6
 800445a:	50a3      	str	r3, [r4, r2]
 800445c:	e7ab      	b.n	80043b6 <_malloc_r+0x22>
 800445e:	42a3      	cmp	r3, r4
 8004460:	6862      	ldr	r2, [r4, #4]
 8004462:	d1dd      	bne.n	8004420 <_malloc_r+0x8c>
 8004464:	f8c8 2000 	str.w	r2, [r8]
 8004468:	e7ec      	b.n	8004444 <_malloc_r+0xb0>
 800446a:	4623      	mov	r3, r4
 800446c:	6864      	ldr	r4, [r4, #4]
 800446e:	e7ac      	b.n	80043ca <_malloc_r+0x36>
 8004470:	4634      	mov	r4, r6
 8004472:	6876      	ldr	r6, [r6, #4]
 8004474:	e7b4      	b.n	80043e0 <_malloc_r+0x4c>
 8004476:	4613      	mov	r3, r2
 8004478:	e7cc      	b.n	8004414 <_malloc_r+0x80>
 800447a:	230c      	movs	r3, #12
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	4638      	mov	r0, r7
 8004480:	f000 f80e 	bl	80044a0 <__malloc_unlock>
 8004484:	e797      	b.n	80043b6 <_malloc_r+0x22>
 8004486:	6025      	str	r5, [r4, #0]
 8004488:	e7dc      	b.n	8004444 <_malloc_r+0xb0>
 800448a:	605b      	str	r3, [r3, #4]
 800448c:	deff      	udf	#255	; 0xff
 800448e:	bf00      	nop
 8004490:	200002e4 	.word	0x200002e4

08004494 <__malloc_lock>:
 8004494:	4801      	ldr	r0, [pc, #4]	; (800449c <__malloc_lock+0x8>)
 8004496:	f7ff bf00 	b.w	800429a <__retarget_lock_acquire_recursive>
 800449a:	bf00      	nop
 800449c:	200002e0 	.word	0x200002e0

080044a0 <__malloc_unlock>:
 80044a0:	4801      	ldr	r0, [pc, #4]	; (80044a8 <__malloc_unlock+0x8>)
 80044a2:	f7ff befb 	b.w	800429c <__retarget_lock_release_recursive>
 80044a6:	bf00      	nop
 80044a8:	200002e0 	.word	0x200002e0

080044ac <__sflush_r>:
 80044ac:	898a      	ldrh	r2, [r1, #12]
 80044ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044b2:	4605      	mov	r5, r0
 80044b4:	0710      	lsls	r0, r2, #28
 80044b6:	460c      	mov	r4, r1
 80044b8:	d458      	bmi.n	800456c <__sflush_r+0xc0>
 80044ba:	684b      	ldr	r3, [r1, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	dc05      	bgt.n	80044cc <__sflush_r+0x20>
 80044c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	dc02      	bgt.n	80044cc <__sflush_r+0x20>
 80044c6:	2000      	movs	r0, #0
 80044c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044ce:	2e00      	cmp	r6, #0
 80044d0:	d0f9      	beq.n	80044c6 <__sflush_r+0x1a>
 80044d2:	2300      	movs	r3, #0
 80044d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044d8:	682f      	ldr	r7, [r5, #0]
 80044da:	6a21      	ldr	r1, [r4, #32]
 80044dc:	602b      	str	r3, [r5, #0]
 80044de:	d032      	beq.n	8004546 <__sflush_r+0x9a>
 80044e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044e2:	89a3      	ldrh	r3, [r4, #12]
 80044e4:	075a      	lsls	r2, r3, #29
 80044e6:	d505      	bpl.n	80044f4 <__sflush_r+0x48>
 80044e8:	6863      	ldr	r3, [r4, #4]
 80044ea:	1ac0      	subs	r0, r0, r3
 80044ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044ee:	b10b      	cbz	r3, 80044f4 <__sflush_r+0x48>
 80044f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044f2:	1ac0      	subs	r0, r0, r3
 80044f4:	2300      	movs	r3, #0
 80044f6:	4602      	mov	r2, r0
 80044f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044fa:	6a21      	ldr	r1, [r4, #32]
 80044fc:	4628      	mov	r0, r5
 80044fe:	47b0      	blx	r6
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	89a3      	ldrh	r3, [r4, #12]
 8004504:	d106      	bne.n	8004514 <__sflush_r+0x68>
 8004506:	6829      	ldr	r1, [r5, #0]
 8004508:	291d      	cmp	r1, #29
 800450a:	d82b      	bhi.n	8004564 <__sflush_r+0xb8>
 800450c:	4a29      	ldr	r2, [pc, #164]	; (80045b4 <__sflush_r+0x108>)
 800450e:	410a      	asrs	r2, r1
 8004510:	07d6      	lsls	r6, r2, #31
 8004512:	d427      	bmi.n	8004564 <__sflush_r+0xb8>
 8004514:	2200      	movs	r2, #0
 8004516:	6062      	str	r2, [r4, #4]
 8004518:	04d9      	lsls	r1, r3, #19
 800451a:	6922      	ldr	r2, [r4, #16]
 800451c:	6022      	str	r2, [r4, #0]
 800451e:	d504      	bpl.n	800452a <__sflush_r+0x7e>
 8004520:	1c42      	adds	r2, r0, #1
 8004522:	d101      	bne.n	8004528 <__sflush_r+0x7c>
 8004524:	682b      	ldr	r3, [r5, #0]
 8004526:	b903      	cbnz	r3, 800452a <__sflush_r+0x7e>
 8004528:	6560      	str	r0, [r4, #84]	; 0x54
 800452a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800452c:	602f      	str	r7, [r5, #0]
 800452e:	2900      	cmp	r1, #0
 8004530:	d0c9      	beq.n	80044c6 <__sflush_r+0x1a>
 8004532:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004536:	4299      	cmp	r1, r3
 8004538:	d002      	beq.n	8004540 <__sflush_r+0x94>
 800453a:	4628      	mov	r0, r5
 800453c:	f7ff febe 	bl	80042bc <_free_r>
 8004540:	2000      	movs	r0, #0
 8004542:	6360      	str	r0, [r4, #52]	; 0x34
 8004544:	e7c0      	b.n	80044c8 <__sflush_r+0x1c>
 8004546:	2301      	movs	r3, #1
 8004548:	4628      	mov	r0, r5
 800454a:	47b0      	blx	r6
 800454c:	1c41      	adds	r1, r0, #1
 800454e:	d1c8      	bne.n	80044e2 <__sflush_r+0x36>
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0c5      	beq.n	80044e2 <__sflush_r+0x36>
 8004556:	2b1d      	cmp	r3, #29
 8004558:	d001      	beq.n	800455e <__sflush_r+0xb2>
 800455a:	2b16      	cmp	r3, #22
 800455c:	d101      	bne.n	8004562 <__sflush_r+0xb6>
 800455e:	602f      	str	r7, [r5, #0]
 8004560:	e7b1      	b.n	80044c6 <__sflush_r+0x1a>
 8004562:	89a3      	ldrh	r3, [r4, #12]
 8004564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004568:	81a3      	strh	r3, [r4, #12]
 800456a:	e7ad      	b.n	80044c8 <__sflush_r+0x1c>
 800456c:	690f      	ldr	r7, [r1, #16]
 800456e:	2f00      	cmp	r7, #0
 8004570:	d0a9      	beq.n	80044c6 <__sflush_r+0x1a>
 8004572:	0793      	lsls	r3, r2, #30
 8004574:	680e      	ldr	r6, [r1, #0]
 8004576:	bf08      	it	eq
 8004578:	694b      	ldreq	r3, [r1, #20]
 800457a:	600f      	str	r7, [r1, #0]
 800457c:	bf18      	it	ne
 800457e:	2300      	movne	r3, #0
 8004580:	eba6 0807 	sub.w	r8, r6, r7
 8004584:	608b      	str	r3, [r1, #8]
 8004586:	f1b8 0f00 	cmp.w	r8, #0
 800458a:	dd9c      	ble.n	80044c6 <__sflush_r+0x1a>
 800458c:	6a21      	ldr	r1, [r4, #32]
 800458e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004590:	4643      	mov	r3, r8
 8004592:	463a      	mov	r2, r7
 8004594:	4628      	mov	r0, r5
 8004596:	47b0      	blx	r6
 8004598:	2800      	cmp	r0, #0
 800459a:	dc06      	bgt.n	80045aa <__sflush_r+0xfe>
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a2:	81a3      	strh	r3, [r4, #12]
 80045a4:	f04f 30ff 	mov.w	r0, #4294967295
 80045a8:	e78e      	b.n	80044c8 <__sflush_r+0x1c>
 80045aa:	4407      	add	r7, r0
 80045ac:	eba8 0800 	sub.w	r8, r8, r0
 80045b0:	e7e9      	b.n	8004586 <__sflush_r+0xda>
 80045b2:	bf00      	nop
 80045b4:	dfbffffe 	.word	0xdfbffffe

080045b8 <_fflush_r>:
 80045b8:	b538      	push	{r3, r4, r5, lr}
 80045ba:	690b      	ldr	r3, [r1, #16]
 80045bc:	4605      	mov	r5, r0
 80045be:	460c      	mov	r4, r1
 80045c0:	b913      	cbnz	r3, 80045c8 <_fflush_r+0x10>
 80045c2:	2500      	movs	r5, #0
 80045c4:	4628      	mov	r0, r5
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
 80045c8:	b118      	cbz	r0, 80045d2 <_fflush_r+0x1a>
 80045ca:	6a03      	ldr	r3, [r0, #32]
 80045cc:	b90b      	cbnz	r3, 80045d2 <_fflush_r+0x1a>
 80045ce:	f7ff fc79 	bl	8003ec4 <__sinit>
 80045d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f3      	beq.n	80045c2 <_fflush_r+0xa>
 80045da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045dc:	07d0      	lsls	r0, r2, #31
 80045de:	d404      	bmi.n	80045ea <_fflush_r+0x32>
 80045e0:	0599      	lsls	r1, r3, #22
 80045e2:	d402      	bmi.n	80045ea <_fflush_r+0x32>
 80045e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045e6:	f7ff fe58 	bl	800429a <__retarget_lock_acquire_recursive>
 80045ea:	4628      	mov	r0, r5
 80045ec:	4621      	mov	r1, r4
 80045ee:	f7ff ff5d 	bl	80044ac <__sflush_r>
 80045f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045f4:	07da      	lsls	r2, r3, #31
 80045f6:	4605      	mov	r5, r0
 80045f8:	d4e4      	bmi.n	80045c4 <_fflush_r+0xc>
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	059b      	lsls	r3, r3, #22
 80045fe:	d4e1      	bmi.n	80045c4 <_fflush_r+0xc>
 8004600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004602:	f7ff fe4b 	bl	800429c <__retarget_lock_release_recursive>
 8004606:	e7dd      	b.n	80045c4 <_fflush_r+0xc>

08004608 <__swhatbuf_r>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	460c      	mov	r4, r1
 800460c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004610:	2900      	cmp	r1, #0
 8004612:	b096      	sub	sp, #88	; 0x58
 8004614:	4615      	mov	r5, r2
 8004616:	461e      	mov	r6, r3
 8004618:	da0d      	bge.n	8004636 <__swhatbuf_r+0x2e>
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004620:	f04f 0100 	mov.w	r1, #0
 8004624:	bf0c      	ite	eq
 8004626:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800462a:	2340      	movne	r3, #64	; 0x40
 800462c:	2000      	movs	r0, #0
 800462e:	6031      	str	r1, [r6, #0]
 8004630:	602b      	str	r3, [r5, #0]
 8004632:	b016      	add	sp, #88	; 0x58
 8004634:	bd70      	pop	{r4, r5, r6, pc}
 8004636:	466a      	mov	r2, sp
 8004638:	f000 f87c 	bl	8004734 <_fstat_r>
 800463c:	2800      	cmp	r0, #0
 800463e:	dbec      	blt.n	800461a <__swhatbuf_r+0x12>
 8004640:	9901      	ldr	r1, [sp, #4]
 8004642:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004646:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800464a:	4259      	negs	r1, r3
 800464c:	4159      	adcs	r1, r3
 800464e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004652:	e7eb      	b.n	800462c <__swhatbuf_r+0x24>

08004654 <__smakebuf_r>:
 8004654:	898b      	ldrh	r3, [r1, #12]
 8004656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004658:	079d      	lsls	r5, r3, #30
 800465a:	4606      	mov	r6, r0
 800465c:	460c      	mov	r4, r1
 800465e:	d507      	bpl.n	8004670 <__smakebuf_r+0x1c>
 8004660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	6123      	str	r3, [r4, #16]
 8004668:	2301      	movs	r3, #1
 800466a:	6163      	str	r3, [r4, #20]
 800466c:	b002      	add	sp, #8
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	ab01      	add	r3, sp, #4
 8004672:	466a      	mov	r2, sp
 8004674:	f7ff ffc8 	bl	8004608 <__swhatbuf_r>
 8004678:	9900      	ldr	r1, [sp, #0]
 800467a:	4605      	mov	r5, r0
 800467c:	4630      	mov	r0, r6
 800467e:	f7ff fe89 	bl	8004394 <_malloc_r>
 8004682:	b948      	cbnz	r0, 8004698 <__smakebuf_r+0x44>
 8004684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004688:	059a      	lsls	r2, r3, #22
 800468a:	d4ef      	bmi.n	800466c <__smakebuf_r+0x18>
 800468c:	f023 0303 	bic.w	r3, r3, #3
 8004690:	f043 0302 	orr.w	r3, r3, #2
 8004694:	81a3      	strh	r3, [r4, #12]
 8004696:	e7e3      	b.n	8004660 <__smakebuf_r+0xc>
 8004698:	89a3      	ldrh	r3, [r4, #12]
 800469a:	6020      	str	r0, [r4, #0]
 800469c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a0:	81a3      	strh	r3, [r4, #12]
 80046a2:	9b00      	ldr	r3, [sp, #0]
 80046a4:	6163      	str	r3, [r4, #20]
 80046a6:	9b01      	ldr	r3, [sp, #4]
 80046a8:	6120      	str	r0, [r4, #16]
 80046aa:	b15b      	cbz	r3, 80046c4 <__smakebuf_r+0x70>
 80046ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046b0:	4630      	mov	r0, r6
 80046b2:	f000 f851 	bl	8004758 <_isatty_r>
 80046b6:	b128      	cbz	r0, 80046c4 <__smakebuf_r+0x70>
 80046b8:	89a3      	ldrh	r3, [r4, #12]
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	f043 0301 	orr.w	r3, r3, #1
 80046c2:	81a3      	strh	r3, [r4, #12]
 80046c4:	89a3      	ldrh	r3, [r4, #12]
 80046c6:	431d      	orrs	r5, r3
 80046c8:	81a5      	strh	r5, [r4, #12]
 80046ca:	e7cf      	b.n	800466c <__smakebuf_r+0x18>

080046cc <_putc_r>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	460d      	mov	r5, r1
 80046d0:	4614      	mov	r4, r2
 80046d2:	4606      	mov	r6, r0
 80046d4:	b118      	cbz	r0, 80046de <_putc_r+0x12>
 80046d6:	6a03      	ldr	r3, [r0, #32]
 80046d8:	b90b      	cbnz	r3, 80046de <_putc_r+0x12>
 80046da:	f7ff fbf3 	bl	8003ec4 <__sinit>
 80046de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046e0:	07d8      	lsls	r0, r3, #31
 80046e2:	d405      	bmi.n	80046f0 <_putc_r+0x24>
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	0599      	lsls	r1, r3, #22
 80046e8:	d402      	bmi.n	80046f0 <_putc_r+0x24>
 80046ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ec:	f7ff fdd5 	bl	800429a <__retarget_lock_acquire_recursive>
 80046f0:	68a3      	ldr	r3, [r4, #8]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	60a3      	str	r3, [r4, #8]
 80046f8:	da05      	bge.n	8004706 <_putc_r+0x3a>
 80046fa:	69a2      	ldr	r2, [r4, #24]
 80046fc:	4293      	cmp	r3, r2
 80046fe:	db12      	blt.n	8004726 <_putc_r+0x5a>
 8004700:	b2eb      	uxtb	r3, r5
 8004702:	2b0a      	cmp	r3, #10
 8004704:	d00f      	beq.n	8004726 <_putc_r+0x5a>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	6022      	str	r2, [r4, #0]
 800470c:	701d      	strb	r5, [r3, #0]
 800470e:	b2ed      	uxtb	r5, r5
 8004710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004712:	07da      	lsls	r2, r3, #31
 8004714:	d405      	bmi.n	8004722 <_putc_r+0x56>
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	059b      	lsls	r3, r3, #22
 800471a:	d402      	bmi.n	8004722 <_putc_r+0x56>
 800471c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800471e:	f7ff fdbd 	bl	800429c <__retarget_lock_release_recursive>
 8004722:	4628      	mov	r0, r5
 8004724:	bd70      	pop	{r4, r5, r6, pc}
 8004726:	4629      	mov	r1, r5
 8004728:	4622      	mov	r2, r4
 800472a:	4630      	mov	r0, r6
 800472c:	f7ff fca7 	bl	800407e <__swbuf_r>
 8004730:	4605      	mov	r5, r0
 8004732:	e7ed      	b.n	8004710 <_putc_r+0x44>

08004734 <_fstat_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4d07      	ldr	r5, [pc, #28]	; (8004754 <_fstat_r+0x20>)
 8004738:	2300      	movs	r3, #0
 800473a:	4604      	mov	r4, r0
 800473c:	4608      	mov	r0, r1
 800473e:	4611      	mov	r1, r2
 8004740:	602b      	str	r3, [r5, #0]
 8004742:	f7fc fc60 	bl	8001006 <_fstat>
 8004746:	1c43      	adds	r3, r0, #1
 8004748:	d102      	bne.n	8004750 <_fstat_r+0x1c>
 800474a:	682b      	ldr	r3, [r5, #0]
 800474c:	b103      	cbz	r3, 8004750 <_fstat_r+0x1c>
 800474e:	6023      	str	r3, [r4, #0]
 8004750:	bd38      	pop	{r3, r4, r5, pc}
 8004752:	bf00      	nop
 8004754:	200002dc 	.word	0x200002dc

08004758 <_isatty_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4d06      	ldr	r5, [pc, #24]	; (8004774 <_isatty_r+0x1c>)
 800475c:	2300      	movs	r3, #0
 800475e:	4604      	mov	r4, r0
 8004760:	4608      	mov	r0, r1
 8004762:	602b      	str	r3, [r5, #0]
 8004764:	f7fc fc5f 	bl	8001026 <_isatty>
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	d102      	bne.n	8004772 <_isatty_r+0x1a>
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	b103      	cbz	r3, 8004772 <_isatty_r+0x1a>
 8004770:	6023      	str	r3, [r4, #0]
 8004772:	bd38      	pop	{r3, r4, r5, pc}
 8004774:	200002dc 	.word	0x200002dc

08004778 <_sbrk_r>:
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	4d06      	ldr	r5, [pc, #24]	; (8004794 <_sbrk_r+0x1c>)
 800477c:	2300      	movs	r3, #0
 800477e:	4604      	mov	r4, r0
 8004780:	4608      	mov	r0, r1
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	f7fc fc68 	bl	8001058 <_sbrk>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d102      	bne.n	8004792 <_sbrk_r+0x1a>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	b103      	cbz	r3, 8004792 <_sbrk_r+0x1a>
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	bd38      	pop	{r3, r4, r5, pc}
 8004794:	200002dc 	.word	0x200002dc

08004798 <_init>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr

080047a4 <_fini>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr
