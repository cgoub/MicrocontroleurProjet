
micro1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031fc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  080033c0  080033c0  000133c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003694  08003694  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800369c  0800369c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  080036b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080036b0  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009fa8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aca  00000000  00000000  0002a027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  0002baf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000063f  00000000  00000000  0002c320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021364  00000000  00000000  0002c95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad29  00000000  00000000  0004dcc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca27d  00000000  00000000  000589ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020e8  00000000  00000000  00122c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ad  00000000  00000000  00124d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080033a8 	.word	0x080033a8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080033a8 	.word	0x080033a8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b970 	b.w	800050c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	460d      	mov	r5, r1
 800024c:	4604      	mov	r4, r0
 800024e:	460f      	mov	r7, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4694      	mov	ip, r2
 8000258:	d965      	bls.n	8000326 <__udivmoddi4+0xe2>
 800025a:	fab2 f382 	clz	r3, r2
 800025e:	b143      	cbz	r3, 8000272 <__udivmoddi4+0x2e>
 8000260:	fa02 fc03 	lsl.w	ip, r2, r3
 8000264:	f1c3 0220 	rsb	r2, r3, #32
 8000268:	409f      	lsls	r7, r3
 800026a:	fa20 f202 	lsr.w	r2, r0, r2
 800026e:	4317      	orrs	r7, r2
 8000270:	409c      	lsls	r4, r3
 8000272:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000276:	fa1f f58c 	uxth.w	r5, ip
 800027a:	fbb7 f1fe 	udiv	r1, r7, lr
 800027e:	0c22      	lsrs	r2, r4, #16
 8000280:	fb0e 7711 	mls	r7, lr, r1, r7
 8000284:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000288:	fb01 f005 	mul.w	r0, r1, r5
 800028c:	4290      	cmp	r0, r2
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000290:	eb1c 0202 	adds.w	r2, ip, r2
 8000294:	f101 37ff 	add.w	r7, r1, #4294967295
 8000298:	f080 811c 	bcs.w	80004d4 <__udivmoddi4+0x290>
 800029c:	4290      	cmp	r0, r2
 800029e:	f240 8119 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002a2:	3902      	subs	r1, #2
 80002a4:	4462      	add	r2, ip
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	b2a4      	uxth	r4, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b6:	fb00 f505 	mul.w	r5, r0, r5
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x90>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x294>
 80002ca:	42a5      	cmp	r5, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x294>
 80002d0:	4464      	add	r4, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d8:	1b64      	subs	r4, r4, r5
 80002da:	2100      	movs	r1, #0
 80002dc:	b11e      	cbz	r6, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40dc      	lsrs	r4, r3
 80002e0:	2300      	movs	r3, #0
 80002e2:	e9c6 4300 	strd	r4, r3, [r6]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0xbc>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80ed 	beq.w	80004ce <__udivmoddi4+0x28a>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e9c6 0500 	strd	r0, r5, [r6]
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	d149      	bne.n	800039c <__udivmoddi4+0x158>
 8000308:	42ab      	cmp	r3, r5
 800030a:	d302      	bcc.n	8000312 <__udivmoddi4+0xce>
 800030c:	4282      	cmp	r2, r0
 800030e:	f200 80f8 	bhi.w	8000502 <__udivmoddi4+0x2be>
 8000312:	1a84      	subs	r4, r0, r2
 8000314:	eb65 0203 	sbc.w	r2, r5, r3
 8000318:	2001      	movs	r0, #1
 800031a:	4617      	mov	r7, r2
 800031c:	2e00      	cmp	r6, #0
 800031e:	d0e2      	beq.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	e9c6 4700 	strd	r4, r7, [r6]
 8000324:	e7df      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000326:	b902      	cbnz	r2, 800032a <__udivmoddi4+0xe6>
 8000328:	deff      	udf	#255	; 0xff
 800032a:	fab2 f382 	clz	r3, r2
 800032e:	2b00      	cmp	r3, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x210>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	2101      	movs	r1, #1
 8000340:	fbb2 f5f7 	udiv	r5, r2, r7
 8000344:	fb07 2015 	mls	r0, r7, r5, r2
 8000348:	0c22      	lsrs	r2, r4, #16
 800034a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034e:	fb0e f005 	mul.w	r0, lr, r5
 8000352:	4290      	cmp	r0, r2
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x124>
 8000356:	eb1c 0202 	adds.w	r2, ip, r2
 800035a:	f105 38ff 	add.w	r8, r5, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4290      	cmp	r0, r2
 8000362:	f200 80cb 	bhi.w	80004fc <__udivmoddi4+0x2b8>
 8000366:	4645      	mov	r5, r8
 8000368:	1a12      	subs	r2, r2, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000370:	fb07 2210 	mls	r2, r7, r0, r2
 8000374:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000378:	fb0e fe00 	mul.w	lr, lr, r0
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x14e>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x14c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f200 80bb 	bhi.w	8000506 <__udivmoddi4+0x2c2>
 8000390:	4610      	mov	r0, r2
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039a:	e79f      	b.n	80002dc <__udivmoddi4+0x98>
 800039c:	f1c1 0720 	rsb	r7, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003aa:	fa05 f401 	lsl.w	r4, r5, r1
 80003ae:	fa20 f307 	lsr.w	r3, r0, r7
 80003b2:	40fd      	lsrs	r5, r7
 80003b4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fbb5 f8f9 	udiv	r8, r5, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 5518 	mls	r5, r9, r8, r5
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003cc:	fb08 f50e 	mul.w	r5, r8, lr
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	fa00 f001 	lsl.w	r0, r0, r1
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e4:	f080 8088 	bcs.w	80004f8 <__udivmoddi4+0x2b4>
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	f240 8085 	bls.w	80004f8 <__udivmoddi4+0x2b4>
 80003ee:	f1a8 0802 	sub.w	r8, r8, #2
 80003f2:	4464      	add	r4, ip
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	b29d      	uxth	r5, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f103 35ff 	add.w	r5, r3, #4294967295
 8000414:	d26c      	bcs.n	80004f0 <__udivmoddi4+0x2ac>
 8000416:	45a6      	cmp	lr, r4
 8000418:	d96a      	bls.n	80004f0 <__udivmoddi4+0x2ac>
 800041a:	3b02      	subs	r3, #2
 800041c:	4464      	add	r4, ip
 800041e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000422:	fba3 9502 	umull	r9, r5, r3, r2
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	42ac      	cmp	r4, r5
 800042c:	46c8      	mov	r8, r9
 800042e:	46ae      	mov	lr, r5
 8000430:	d356      	bcc.n	80004e0 <__udivmoddi4+0x29c>
 8000432:	d053      	beq.n	80004dc <__udivmoddi4+0x298>
 8000434:	b156      	cbz	r6, 800044c <__udivmoddi4+0x208>
 8000436:	ebb0 0208 	subs.w	r2, r0, r8
 800043a:	eb64 040e 	sbc.w	r4, r4, lr
 800043e:	fa04 f707 	lsl.w	r7, r4, r7
 8000442:	40ca      	lsrs	r2, r1
 8000444:	40cc      	lsrs	r4, r1
 8000446:	4317      	orrs	r7, r2
 8000448:	e9c6 7400 	strd	r7, r4, [r6]
 800044c:	4618      	mov	r0, r3
 800044e:	2100      	movs	r1, #0
 8000450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000454:	f1c3 0120 	rsb	r1, r3, #32
 8000458:	fa02 fc03 	lsl.w	ip, r2, r3
 800045c:	fa20 f201 	lsr.w	r2, r0, r1
 8000460:	fa25 f101 	lsr.w	r1, r5, r1
 8000464:	409d      	lsls	r5, r3
 8000466:	432a      	orrs	r2, r5
 8000468:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1510 	mls	r5, r7, r0, r1
 8000478:	0c11      	lsrs	r1, r2, #16
 800047a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047e:	fb00 f50e 	mul.w	r5, r0, lr
 8000482:	428d      	cmp	r5, r1
 8000484:	fa04 f403 	lsl.w	r4, r4, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x258>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000492:	d22f      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 8000494:	428d      	cmp	r5, r1
 8000496:	d92d      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 8000498:	3802      	subs	r0, #2
 800049a:	4461      	add	r1, ip
 800049c:	1b49      	subs	r1, r1, r5
 800049e:	b292      	uxth	r2, r2
 80004a0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a4:	fb07 1115 	mls	r1, r7, r5, r1
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	fb05 f10e 	mul.w	r1, r5, lr
 80004b0:	4291      	cmp	r1, r2
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x282>
 80004b4:	eb1c 0202 	adds.w	r2, ip, r2
 80004b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004bc:	d216      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 80004be:	4291      	cmp	r1, r2
 80004c0:	d914      	bls.n	80004ec <__udivmoddi4+0x2a8>
 80004c2:	3d02      	subs	r5, #2
 80004c4:	4462      	add	r2, ip
 80004c6:	1a52      	subs	r2, r2, r1
 80004c8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004cc:	e738      	b.n	8000340 <__udivmoddi4+0xfc>
 80004ce:	4631      	mov	r1, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xa2>
 80004d4:	4639      	mov	r1, r7
 80004d6:	e6e6      	b.n	80002a6 <__udivmoddi4+0x62>
 80004d8:	4610      	mov	r0, r2
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x90>
 80004dc:	4548      	cmp	r0, r9
 80004de:	d2a9      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004e0:	ebb9 0802 	subs.w	r8, r9, r2
 80004e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e8:	3b01      	subs	r3, #1
 80004ea:	e7a3      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ec:	4645      	mov	r5, r8
 80004ee:	e7ea      	b.n	80004c6 <__udivmoddi4+0x282>
 80004f0:	462b      	mov	r3, r5
 80004f2:	e794      	b.n	800041e <__udivmoddi4+0x1da>
 80004f4:	4640      	mov	r0, r8
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x258>
 80004f8:	46d0      	mov	r8, sl
 80004fa:	e77b      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fc:	3d02      	subs	r5, #2
 80004fe:	4462      	add	r2, ip
 8000500:	e732      	b.n	8000368 <__udivmoddi4+0x124>
 8000502:	4608      	mov	r0, r1
 8000504:	e70a      	b.n	800031c <__udivmoddi4+0xd8>
 8000506:	4464      	add	r4, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e742      	b.n	8000392 <__udivmoddi4+0x14e>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fc68 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f9e0 	bl	80008dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 faa0 	bl	8000a60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000520:	f000 fa74 	bl	8000a0c <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000524:	f000 fa48 	bl	80009b8 <MX_DAC_Init>
    /* USER CODE BEGIN WHILE */
    while (1){
        /* USER CODE END WHILE */

    	/* receiving the message */
    	init(receivedMessage,10);
 8000528:	210a      	movs	r1, #10
 800052a:	4811      	ldr	r0, [pc, #68]	; (8000570 <main+0x60>)
 800052c:	f000 f828 	bl	8000580 <init>
    	HAL_UART_Receive(&huart2,(uint8_t *) receivedMessage,20,5000);
 8000530:	f241 3388 	movw	r3, #5000	; 0x1388
 8000534:	2214      	movs	r2, #20
 8000536:	490e      	ldr	r1, [pc, #56]	; (8000570 <main+0x60>)
 8000538:	480e      	ldr	r0, [pc, #56]	; (8000574 <main+0x64>)
 800053a:	f001 ff2d 	bl	8002398 <HAL_UART_Receive>
    	if(receivedMessage[0]!='\0'){
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <main+0x60>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d008      	beq.n	8000558 <main+0x48>
        	init(morseCode,70);
 8000546:	2146      	movs	r1, #70	; 0x46
 8000548:	480b      	ldr	r0, [pc, #44]	; (8000578 <main+0x68>)
 800054a:	f000 f819 	bl	8000580 <init>
        	convertToMorse(receivedMessage, morseCode, sizeof(morseCode));
 800054e:	2246      	movs	r2, #70	; 0x46
 8000550:	4909      	ldr	r1, [pc, #36]	; (8000578 <main+0x68>)
 8000552:	4807      	ldr	r0, [pc, #28]	; (8000570 <main+0x60>)
 8000554:	f000 f830 	bl	80005b8 <convertToMorse>
    	}

    	if(MODE==1){
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <main+0x6c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d103      	bne.n	8000568 <main+0x58>
    		/* CODE SOUND */
    		transmitSound(morseCode);
 8000560:	4805      	ldr	r0, [pc, #20]	; (8000578 <main+0x68>)
 8000562:	f000 f8fd 	bl	8000760 <transmitSound>
 8000566:	e7df      	b.n	8000528 <main+0x18>
    	}
    	else{
    		/* CODE INFRAROUGE */
    		transmitLed(morseCode);
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <main+0x68>)
 800056a:	f000 f957 	bl	800081c <transmitLed>
    	init(receivedMessage,10);
 800056e:	e7db      	b.n	8000528 <main+0x18>
 8000570:	20000088 	.word	0x20000088
 8000574:	2000003c 	.word	0x2000003c
 8000578:	2000009c 	.word	0x2000009c
 800057c:	20000084 	.word	0x20000084

08000580 <init>:
    	  /* USER CODE BEGIN 3 */
    }
    /* USER CODE END 3 */
  }

  void init(char* message,int maxLength){
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	  for(int i=0; i<maxLength;i++){
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	e007      	b.n	80005a0 <init+0x20>
		  message[i]='\0';
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<maxLength;i++){
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	3301      	adds	r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbf3      	blt.n	8000590 <init+0x10>
	  }
  }
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <convertToMorse>:
 * @param message The string message to be converted.
 * @param morseCode The buffer to store the Morse code.
 * @param maxLength The maximum length of the Morse code buffer.
 */
  void convertToMorse(char* message, char* morseCode, int maxLength)
  {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b0ae      	sub	sp, #184	; 0xb8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
      // the Morse code alphabet
      const char* morseAlphabet[] = {     "......", ".....-", "....-.", "....--", "...-..", "...-.-", "...--.", "...---", "..-...", "..-..-",
 80005c4:	4a62      	ldr	r2, [pc, #392]	; (8000750 <convertToMorse+0x198>)
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4611      	mov	r1, r2
 80005cc:	2290      	movs	r2, #144	; 0x90
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fedc 	bl	800338c <memcpy>
			    "..-.-.", "..-.--", "..--..", "..--.-", "..----", ".-....", ".-...-", ".-..-.", ".-..--", ".-.-..",
			    ".-.-.-", ".-.--.", ".-.---", ".--...", ".--..-", ".--.-.", ".--.--", ".---..", ".---.-", ".----.",
			    ".-----", "-.....", "-....-", "-...-.", "-...--", "-..-.."};

      // Iterate through the message characters
      int morseIndex = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      for (int i = 0; message[i] != '\0' && morseIndex < maxLength - 5; i++) {
 80005da:	2300      	movs	r3, #0
 80005dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80005e0:	e0a3      	b.n	800072a <convertToMorse+0x172>
          // Get the uppercase representation of the character
          char uppercaseChar = toupper(message[i]);
 80005e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	4413      	add	r3, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80005f0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80005f4:	3301      	adds	r3, #1
 80005f6:	4a57      	ldr	r2, [pc, #348]	; (8000754 <convertToMorse+0x19c>)
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	f003 0303 	and.w	r3, r3, #3
 8000600:	2b02      	cmp	r3, #2
 8000602:	d103      	bne.n	800060c <convertToMorse+0x54>
 8000604:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000608:	3b20      	subs	r3, #32
 800060a:	e001      	b.n	8000610 <convertToMorse+0x58>
 800060c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000610:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae

          // If it's a space, add a space to the Morse code
          if (uppercaseChar == ' ') {
 8000614:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000618:	2b20      	cmp	r3, #32
 800061a:	d111      	bne.n	8000640 <convertToMorse+0x88>
              strcat(morseCode, "/"); // '/' to represent word spacing
 800061c:	68b8      	ldr	r0, [r7, #8]
 800061e:	f7ff fdf1 	bl	8000204 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	461a      	mov	r2, r3
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	4413      	add	r3, r2
 800062a:	494b      	ldr	r1, [pc, #300]	; (8000758 <convertToMorse+0x1a0>)
 800062c:	461a      	mov	r2, r3
 800062e:	460b      	mov	r3, r1
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	8013      	strh	r3, [r2, #0]
              morseIndex += 3; // Move to the next position in morseCode
 8000634:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000638:	3303      	adds	r3, #3
 800063a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800063e:	e06f      	b.n	8000720 <convertToMorse+0x168>
          }
          else if (isalnum(uppercaseChar)) {
 8000640:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000644:	3301      	adds	r3, #1
 8000646:	4a43      	ldr	r2, [pc, #268]	; (8000754 <convertToMorse+0x19c>)
 8000648:	4413      	add	r3, r2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f003 0307 	and.w	r3, r3, #7
 8000650:	2b00      	cmp	r3, #0
 8000652:	d065      	beq.n	8000720 <convertToMorse+0x168>
              // Check if it's an alphanumeric character
              if (isalpha(uppercaseChar)) {
 8000654:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000658:	3301      	adds	r3, #1
 800065a:	4a3e      	ldr	r2, [pc, #248]	; (8000754 <convertToMorse+0x19c>)
 800065c:	4413      	add	r3, r2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	f003 0303 	and.w	r3, r3, #3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d020      	beq.n	80006aa <convertToMorse+0xf2>
                  // Convert letters to Morse code
                  int index = uppercaseChar - 'A'; // Index for Morse code
 8000668:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800066c:	3b41      	subs	r3, #65	; 0x41
 800066e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                  strcat(morseCode, morseAlphabet[index]);
 8000672:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	33b8      	adds	r3, #184	; 0xb8
 800067a:	443b      	add	r3, r7
 800067c:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8000680:	4619      	mov	r1, r3
 8000682:	68b8      	ldr	r0, [r7, #8]
 8000684:	f002 fe4e 	bl	8003324 <strcat>
                  morseIndex += strlen(morseAlphabet[index]);
 8000688:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	33b8      	adds	r3, #184	; 0xb8
 8000690:	443b      	add	r3, r7
 8000692:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fdb4 	bl	8000204 <strlen>
 800069c:	4602      	mov	r2, r0
 800069e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80006a2:	4413      	add	r3, r2
 80006a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80006a8:	e029      	b.n	80006fe <convertToMorse+0x146>
              } else if (isdigit(uppercaseChar)) {
 80006aa:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80006ae:	3301      	adds	r3, #1
 80006b0:	4a28      	ldr	r2, [pc, #160]	; (8000754 <convertToMorse+0x19c>)
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d01f      	beq.n	80006fe <convertToMorse+0x146>
                  // Convert digits to Morse code
                  int index = uppercaseChar - '0' + 26; // Index for Morse code for number since they start after the 26 letter
 80006be:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80006c2:	3b16      	subs	r3, #22
 80006c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                  strcat(morseCode, morseAlphabet[index]);
 80006c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	33b8      	adds	r3, #184	; 0xb8
 80006d0:	443b      	add	r3, r7
 80006d2:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80006d6:	4619      	mov	r1, r3
 80006d8:	68b8      	ldr	r0, [r7, #8]
 80006da:	f002 fe23 	bl	8003324 <strcat>
                  morseIndex += strlen(morseAlphabet[index]);
 80006de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	33b8      	adds	r3, #184	; 0xb8
 80006e6:	443b      	add	r3, r7
 80006e8:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fd89 	bl	8000204 <strlen>
 80006f2:	4602      	mov	r2, r0
 80006f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80006f8:	4413      	add	r3, r2
 80006fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
              }
              // Add a space after each Morse code character
              strcat(morseCode, " ");
 80006fe:	68b8      	ldr	r0, [r7, #8]
 8000700:	f7ff fd80 	bl	8000204 <strlen>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	4413      	add	r3, r2
 800070c:	4913      	ldr	r1, [pc, #76]	; (800075c <convertToMorse+0x1a4>)
 800070e:	461a      	mov	r2, r3
 8000710:	460b      	mov	r3, r1
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	8013      	strh	r3, [r2, #0]
              morseIndex += 1;
 8000716:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800071a:	3301      	adds	r3, #1
 800071c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      for (int i = 0; message[i] != '\0' && morseIndex < maxLength - 5; i++) {
 8000720:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000724:	3301      	adds	r3, #1
 8000726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800072a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d006      	beq.n	8000746 <convertToMorse+0x18e>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b05      	subs	r3, #5
 800073c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000740:	429a      	cmp	r2, r3
 8000742:	f6ff af4e 	blt.w	80005e2 <convertToMorse+0x2a>
          }
      }
  }
 8000746:	bf00      	nop
 8000748:	37b8      	adds	r7, #184	; 0xb8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	080034e8 	.word	0x080034e8
 8000754:	08003590 	.word	0x08003590
 8000758:	080033c0 	.word	0x080033c0
 800075c:	080033c4 	.word	0x080033c4

08000760 <transmitSound>:

/**
 * This function transmits the Morse code to the buzzer.
 * @param morseCode The Morse code to be transmitted.
 */
  void transmitSound(char* morseCode){
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

      int i = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
      while (morseCode[i] != '\0') {
 800076c:	e048      	b.n	8000800 <transmitSound+0xa0>
          if (morseCode[i] == '.') {
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	4413      	add	r3, r2
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b2e      	cmp	r3, #46	; 0x2e
 8000778:	d111      	bne.n	800079e <transmitSound+0x3e>
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // Turn on buzzer for dot
 800077a:	2201      	movs	r2, #1
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	4826      	ldr	r0, [pc, #152]	; (8000818 <transmitSound+0xb8>)
 8000780:	f000 ff7a 	bl	8001678 <HAL_GPIO_WritePin>
              HAL_Delay(100); // Delay for dot
 8000784:	2064      	movs	r0, #100	; 0x64
 8000786:	f000 fba1 	bl	8000ecc <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Turn off buzzer
 800078a:	2200      	movs	r2, #0
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	4822      	ldr	r0, [pc, #136]	; (8000818 <transmitSound+0xb8>)
 8000790:	f000 ff72 	bl	8001678 <HAL_GPIO_WritePin>
              HAL_Delay(500); // Delay between dot and next signal
 8000794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000798:	f000 fb98 	bl	8000ecc <HAL_Delay>
 800079c:	e02d      	b.n	80007fa <transmitSound+0x9a>
          } else if (morseCode[i] == '-') {
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	4413      	add	r3, r2
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b2d      	cmp	r3, #45	; 0x2d
 80007a8:	d112      	bne.n	80007d0 <transmitSound+0x70>
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // Turn on buzzer for dash
 80007aa:	2201      	movs	r2, #1
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	481a      	ldr	r0, [pc, #104]	; (8000818 <transmitSound+0xb8>)
 80007b0:	f000 ff62 	bl	8001678 <HAL_GPIO_WritePin>
              HAL_Delay(300); // Delay for dash
 80007b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007b8:	f000 fb88 	bl	8000ecc <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Turn off buzzer
 80007bc:	2200      	movs	r2, #0
 80007be:	2180      	movs	r1, #128	; 0x80
 80007c0:	4815      	ldr	r0, [pc, #84]	; (8000818 <transmitSound+0xb8>)
 80007c2:	f000 ff59 	bl	8001678 <HAL_GPIO_WritePin>
              HAL_Delay(500); // Delay between dash and next signal
 80007c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ca:	f000 fb7f 	bl	8000ecc <HAL_Delay>
 80007ce:	e014      	b.n	80007fa <transmitSound+0x9a>
          } else if (morseCode[i] == ' ') {
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b20      	cmp	r3, #32
 80007da:	d104      	bne.n	80007e6 <transmitSound+0x86>
              HAL_Delay(500); // Delay for char gap 1s
 80007dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e0:	f000 fb74 	bl	8000ecc <HAL_Delay>
 80007e4:	e009      	b.n	80007fa <transmitSound+0x9a>
          }
          else if (morseCode[i] == '/') {
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b2f      	cmp	r3, #47	; 0x2f
 80007f0:	d103      	bne.n	80007fa <transmitSound+0x9a>
              HAL_Delay(700); // Delay for word gap 1,2s
 80007f2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80007f6:	f000 fb69 	bl	8000ecc <HAL_Delay>
          }
          i++;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3301      	adds	r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
      while (morseCode[i] != '\0') {
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1b0      	bne.n	800076e <transmitSound+0xe>
      }
  }
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40020000 	.word	0x40020000

0800081c <transmitLed>:

/**
 * This function transmits the Morse code to the LED.
 * @param morseCode The Morse code to be transmitted.
 */
  void transmitLed(char* morseCode){
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
      int i = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
      while (morseCode[i] != '\0') {
 8000828:	e03a      	b.n	80008a0 <transmitLed+0x84>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	482a      	ldr	r0, [pc, #168]	; (80008d8 <transmitLed+0xbc>)
 8000830:	f000 ff22 	bl	8001678 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000834:	2064      	movs	r0, #100	; 0x64
 8000836:	f000 fb49 	bl	8000ecc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2140      	movs	r1, #64	; 0x40
 800083e:	4826      	ldr	r0, [pc, #152]	; (80008d8 <transmitLed+0xbc>)
 8000840:	f000 ff1a 	bl	8001678 <HAL_GPIO_WritePin>

          if (morseCode[i] == '.') {
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b2e      	cmp	r3, #46	; 0x2e
 800084e:	d104      	bne.n	800085a <transmitLed+0x3e>
              HAL_Delay(300); // Delay for a dot
 8000850:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000854:	f000 fb3a 	bl	8000ecc <HAL_Delay>
 8000858:	e01f      	b.n	800089a <transmitLed+0x7e>
          } else if (morseCode[i] == '-') {
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4413      	add	r3, r2
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b2d      	cmp	r3, #45	; 0x2d
 8000864:	d104      	bne.n	8000870 <transmitLed+0x54>
              HAL_Delay(400); // Delay for a dash
 8000866:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800086a:	f000 fb2f 	bl	8000ecc <HAL_Delay>
 800086e:	e014      	b.n	800089a <transmitLed+0x7e>
          } else if (morseCode[i] == ' ') {
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b20      	cmp	r3, #32
 800087a:	d104      	bne.n	8000886 <transmitLed+0x6a>
              // Delay for charecter gap
              HAL_Delay(500); // Delay for charecter gap
 800087c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000880:	f000 fb24 	bl	8000ecc <HAL_Delay>
 8000884:	e009      	b.n	800089a <transmitLed+0x7e>
          }
          else if (morseCode[i] == '/') {
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	4413      	add	r3, r2
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b2f      	cmp	r3, #47	; 0x2f
 8000890:	d103      	bne.n	800089a <transmitLed+0x7e>
              // Delay for word gap
              HAL_Delay(600); // Delay for word gap
 8000892:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000896:	f000 fb19 	bl	8000ecc <HAL_Delay>
          }
          i++;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	3301      	adds	r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
      while (morseCode[i] != '\0') {
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1be      	bne.n	800082a <transmitLed+0xe>
      }
      HAL_Delay(700); // Delay for word gap
 80008ac:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80008b0:	f000 fb0c 	bl	8000ecc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2140      	movs	r1, #64	; 0x40
 80008b8:	4807      	ldr	r0, [pc, #28]	; (80008d8 <transmitLed+0xbc>)
 80008ba:	f000 fedd 	bl	8001678 <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 80008be:	20fa      	movs	r0, #250	; 0xfa
 80008c0:	f000 fb04 	bl	8000ecc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2140      	movs	r1, #64	; 0x40
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <transmitLed+0xbc>)
 80008ca:	f000 fed5 	bl	8001678 <HAL_GPIO_WritePin>
  }
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40020000 	.word	0x40020000

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b094      	sub	sp, #80	; 0x50
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2234      	movs	r2, #52	; 0x34
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 fd12 	bl	8003314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <SystemClock_Config+0xd4>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	4a29      	ldr	r2, [pc, #164]	; (80009b0 <SystemClock_Config+0xd4>)
 800090a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090e:	6413      	str	r3, [r2, #64]	; 0x40
 8000910:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <SystemClock_Config+0xd4>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800091c:	2300      	movs	r3, #0
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <SystemClock_Config+0xd8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000928:	4a22      	ldr	r2, [pc, #136]	; (80009b4 <SystemClock_Config+0xd8>)
 800092a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <SystemClock_Config+0xd8>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800093c:	2302      	movs	r3, #2
 800093e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000944:	2310      	movs	r3, #16
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000948:	2302      	movs	r3, #2
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800094c:	2300      	movs	r3, #0
 800094e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000950:	2310      	movs	r3, #16
 8000952:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000954:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000958:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800095a:	2304      	movs	r3, #4
 800095c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800095e:	2302      	movs	r3, #2
 8000960:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000962:	2302      	movs	r3, #2
 8000964:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4618      	mov	r0, r3
 800096c:	f001 fa26 	bl	8001dbc <HAL_RCC_OscConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000976:	f000 f8e9 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097a:	230f      	movs	r3, #15
 800097c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097e:	2302      	movs	r3, #2
 8000980:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	2102      	movs	r1, #2
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fec6 	bl	8001728 <HAL_RCC_ClockConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009a2:	f000 f8d3 	bl	8000b4c <Error_Handler>
  }
}
 80009a6:	bf00      	nop
 80009a8:	3750      	adds	r7, #80	; 0x50
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40007000 	.word	0x40007000

080009b8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009be:	463b      	mov	r3, r7
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_DAC_Init+0x4c>)
 80009c8:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <MX_DAC_Init+0x50>)
 80009ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80009cc:	480d      	ldr	r0, [pc, #52]	; (8000a04 <MX_DAC_Init+0x4c>)
 80009ce:	f000 fbb2 	bl	8001136 <HAL_DAC_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009d8:	f000 f8b8 	bl	8000b4c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009dc:	2300      	movs	r3, #0
 80009de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	2200      	movs	r2, #0
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	; (8000a04 <MX_DAC_Init+0x4c>)
 80009ec:	f000 fbc5 	bl	800117a <HAL_DAC_ConfigChannel>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009f6:	f000 f8a9 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000028 	.word	0x20000028
 8000a08:	40007400 	.word	0x40007400

08000a0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <MX_USART2_UART_Init+0x50>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a44:	f001 fc58 	bl	80022f8 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a4e:	f000 f87d 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000003c 	.word	0x2000003c
 8000a5c:	40004400 	.word	0x40004400

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a30      	ldr	r2, [pc, #192]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a29      	ldr	r2, [pc, #164]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <MX_GPIO_Init+0xe0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	21e0      	movs	r1, #224	; 0xe0
 8000aea:	4816      	ldr	r0, [pc, #88]	; (8000b44 <MX_GPIO_Init+0xe4>)
 8000aec:	f000 fdc4 	bl	8001678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4810      	ldr	r0, [pc, #64]	; (8000b48 <MX_GPIO_Init+0xe8>)
 8000b08:	f000 fc22 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b0c:	23e0      	movs	r3, #224	; 0xe0
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4808      	ldr	r0, [pc, #32]	; (8000b44 <MX_GPIO_Init+0xe4>)
 8000b24:	f000 fc14 	bl	8001350 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2028      	movs	r0, #40	; 0x28
 8000b2e:	f000 facc 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b32:	2028      	movs	r0, #40	; 0x28
 8000b34:	f000 fae5 	bl	8001102 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40020800 	.word	0x40020800

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b96:	2007      	movs	r0, #7
 8000b98:	f000 fa8c 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <HAL_DAC_MspInit+0x7c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d127      	bne.n	8000c1a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_DAC_MspInit+0x80>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a15      	ldr	r2, [pc, #84]	; (8000c28 <HAL_DAC_MspInit+0x80>)
 8000bd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <HAL_DAC_MspInit+0x80>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_DAC_MspInit+0x80>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_DAC_MspInit+0x80>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_DAC_MspInit+0x80>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c02:	2310      	movs	r3, #16
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c06:	2303      	movs	r3, #3
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <HAL_DAC_MspInit+0x84>)
 8000c16:	f000 fb9b 	bl	8001350 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40007400 	.word	0x40007400
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <HAL_UART_MspInit+0x94>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d133      	bne.n	8000cba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <HAL_UART_MspInit+0x98>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a1b      	ldr	r2, [pc, #108]	; (8000cc8 <HAL_UART_MspInit+0x98>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <HAL_UART_MspInit+0x98>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_UART_MspInit+0x98>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <HAL_UART_MspInit+0x98>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_UART_MspInit+0x98>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4809      	ldr	r0, [pc, #36]	; (8000ccc <HAL_UART_MspInit+0x9c>)
 8000ca6:	f000 fb53 	bl	8001350 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2026      	movs	r0, #38	; 0x26
 8000cb0:	f000 fa0b 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cb4:	2026      	movs	r0, #38	; 0x26
 8000cb6:	f000 fa24 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40004400 	.word	0x40004400
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f8b6 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <USART2_IRQHandler+0x10>)
 8000d2a:	f001 fbcd 	bl	80024c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000003c 	.word	0x2000003c

08000d38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (MODE == 0){
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <EXTI15_10_IRQHandler+0x30>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d103      	bne.n	8000d4c <EXTI15_10_IRQHandler+0x14>
	  	MODE = 1;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <EXTI15_10_IRQHandler+0x30>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	e002      	b.n	8000d52 <EXTI15_10_IRQHandler+0x1a>
	}
	else{
		MODE = 0;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <EXTI15_10_IRQHandler+0x30>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
	}
  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d52:	2120      	movs	r1, #32
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <EXTI15_10_IRQHandler+0x34>)
 8000d56:	f000 fca8 	bl	80016aa <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d5a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d5e:	f000 fcbf 	bl	80016e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000084 	.word	0x20000084
 8000d6c:	40020000 	.word	0x40020000

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d98:	f7ff ffea 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	; (8000de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f002 fabf 	bl	8003344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fba3 	bl	8000510 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dd8:	080036a4 	.word	0x080036a4
  ldr r2, =_sbss
 8000ddc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000de0:	200000e8 	.word	0x200000e8

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f94f 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fe9c 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f967 	bl	800111e <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f92f 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	200000e4 	.word	0x200000e4

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200000e4 	.word	0x200000e4

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0b      	blt.n	8000fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <__NVIC_EnableIRQ+0x38>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff29 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff3e 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff31 	bl	8000f78 <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa2 	bl	8001070 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e014      	b.n	8001172 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	791b      	ldrb	r3, [r3, #4]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d105      	bne.n	800115e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff fd25 	bl	8000ba8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2202      	movs	r2, #2
 8001162:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800117a:	b480      	push	{r7}
 800117c:	b089      	sub	sp, #36	; 0x24
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <HAL_DAC_ConfigChannel+0x1c>
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e042      	b.n	8001220 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	795b      	ldrb	r3, [r3, #5]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d101      	bne.n	80011a6 <HAL_DAC_ConfigChannel+0x2c>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e03c      	b.n	8001220 <HAL_DAC_ConfigChannel+0xa6>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2201      	movs	r2, #1
 80011aa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2202      	movs	r2, #2
 80011b0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4313      	orrs	r3, r2
 80011da:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6819      	ldr	r1, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0310 	and.w	r3, r3, #16
 8001202:	22c0      	movs	r2, #192	; 0xc0
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43da      	mvns	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	400a      	ands	r2, r1
 8001210:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2201      	movs	r2, #1
 8001216:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800121e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3724      	adds	r7, #36	; 0x24
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001238:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800123a:	f7ff fe3b 	bl	8000eb4 <HAL_GetTick>
 800123e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d008      	beq.n	800125e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e052      	b.n	8001304 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0216 	bic.w	r2, r2, #22
 800126c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	695a      	ldr	r2, [r3, #20]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800127c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	2b00      	cmp	r3, #0
 8001284:	d103      	bne.n	800128e <HAL_DMA_Abort+0x62>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128a:	2b00      	cmp	r3, #0
 800128c:	d007      	beq.n	800129e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0208 	bic.w	r2, r2, #8
 800129c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ae:	e013      	b.n	80012d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012b0:	f7ff fe00 	bl	8000eb4 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b05      	cmp	r3, #5
 80012bc:	d90c      	bls.n	80012d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2220      	movs	r2, #32
 80012c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2203      	movs	r2, #3
 80012c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e015      	b.n	8001304 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1e4      	bne.n	80012b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ea:	223f      	movs	r2, #63	; 0x3f
 80012ec:	409a      	lsls	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d004      	beq.n	800132a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00c      	b.n	8001344 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2205      	movs	r2, #5
 800132e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0201 	bic.w	r2, r2, #1
 8001340:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e165      	b.n	8001638 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800136c:	2201      	movs	r2, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	429a      	cmp	r2, r3
 8001386:	f040 8154 	bne.w	8001632 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d005      	beq.n	80013a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d130      	bne.n	8001404 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d8:	2201      	movs	r2, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 0201 	and.w	r2, r3, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b03      	cmp	r3, #3
 800140e:	d017      	beq.n	8001440 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d123      	bne.n	8001494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	08da      	lsrs	r2, r3, #3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3208      	adds	r2, #8
 8001454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	69b9      	ldr	r1, [r7, #24]
 8001490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0203 	and.w	r2, r3, #3
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80ae 	beq.w	8001632 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b5d      	ldr	r3, [pc, #372]	; (8001650 <HAL_GPIO_Init+0x300>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a5c      	ldr	r2, [pc, #368]	; (8001650 <HAL_GPIO_Init+0x300>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b5a      	ldr	r3, [pc, #360]	; (8001650 <HAL_GPIO_Init+0x300>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f2:	4a58      	ldr	r2, [pc, #352]	; (8001654 <HAL_GPIO_Init+0x304>)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	220f      	movs	r2, #15
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4f      	ldr	r2, [pc, #316]	; (8001658 <HAL_GPIO_Init+0x308>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d025      	beq.n	800156a <HAL_GPIO_Init+0x21a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4e      	ldr	r2, [pc, #312]	; (800165c <HAL_GPIO_Init+0x30c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d01f      	beq.n	8001566 <HAL_GPIO_Init+0x216>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4d      	ldr	r2, [pc, #308]	; (8001660 <HAL_GPIO_Init+0x310>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d019      	beq.n	8001562 <HAL_GPIO_Init+0x212>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4c      	ldr	r2, [pc, #304]	; (8001664 <HAL_GPIO_Init+0x314>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d013      	beq.n	800155e <HAL_GPIO_Init+0x20e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4b      	ldr	r2, [pc, #300]	; (8001668 <HAL_GPIO_Init+0x318>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d00d      	beq.n	800155a <HAL_GPIO_Init+0x20a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4a      	ldr	r2, [pc, #296]	; (800166c <HAL_GPIO_Init+0x31c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d007      	beq.n	8001556 <HAL_GPIO_Init+0x206>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a49      	ldr	r2, [pc, #292]	; (8001670 <HAL_GPIO_Init+0x320>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d101      	bne.n	8001552 <HAL_GPIO_Init+0x202>
 800154e:	2306      	movs	r3, #6
 8001550:	e00c      	b.n	800156c <HAL_GPIO_Init+0x21c>
 8001552:	2307      	movs	r3, #7
 8001554:	e00a      	b.n	800156c <HAL_GPIO_Init+0x21c>
 8001556:	2305      	movs	r3, #5
 8001558:	e008      	b.n	800156c <HAL_GPIO_Init+0x21c>
 800155a:	2304      	movs	r3, #4
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x21c>
 800155e:	2303      	movs	r3, #3
 8001560:	e004      	b.n	800156c <HAL_GPIO_Init+0x21c>
 8001562:	2302      	movs	r3, #2
 8001564:	e002      	b.n	800156c <HAL_GPIO_Init+0x21c>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x21c>
 800156a:	2300      	movs	r3, #0
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	f002 0203 	and.w	r2, r2, #3
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	4093      	lsls	r3, r2
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800157c:	4935      	ldr	r1, [pc, #212]	; (8001654 <HAL_GPIO_Init+0x304>)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158a:	4b3a      	ldr	r3, [pc, #232]	; (8001674 <HAL_GPIO_Init+0x324>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ae:	4a31      	ldr	r2, [pc, #196]	; (8001674 <HAL_GPIO_Init+0x324>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b4:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <HAL_GPIO_Init+0x324>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d8:	4a26      	ldr	r2, [pc, #152]	; (8001674 <HAL_GPIO_Init+0x324>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015de:	4b25      	ldr	r3, [pc, #148]	; (8001674 <HAL_GPIO_Init+0x324>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <HAL_GPIO_Init+0x324>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_GPIO_Init+0x324>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800162c:	4a11      	ldr	r2, [pc, #68]	; (8001674 <HAL_GPIO_Init+0x324>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b0f      	cmp	r3, #15
 800163c:	f67f ae96 	bls.w	800136c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40013800 	.word	0x40013800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400
 8001660:	40020800 	.word	0x40020800
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40021000 	.word	0x40021000
 800166c:	40021400 	.word	0x40021400
 8001670:	40021800 	.word	0x40021800
 8001674:	40013c00 	.word	0x40013c00

08001678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
 8001684:	4613      	mov	r3, r2
 8001686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001688:	787b      	ldrb	r3, [r7, #1]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001694:	e003      	b.n	800169e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001696:	887b      	ldrh	r3, [r7, #2]
 8001698:	041a      	lsls	r2, r3, #16
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	619a      	str	r2, [r3, #24]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b085      	sub	sp, #20
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	460b      	mov	r3, r1
 80016b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016bc:	887a      	ldrh	r2, [r7, #2]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4013      	ands	r3, r2
 80016c2:	041a      	lsls	r2, r3, #16
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	887b      	ldrh	r3, [r7, #2]
 80016ca:	400b      	ands	r3, r1
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	619a      	str	r2, [r3, #24]
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d006      	beq.n	8001704 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f806 	bl	8001710 <HAL_GPIO_EXTI_Callback>
  }
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40013c00 	.word	0x40013c00

08001710 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0cc      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 030f 	and.w	r3, r3, #15
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d90c      	bls.n	8001764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0b8      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	494d      	ldr	r1, [pc, #308]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d044      	beq.n	8001848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d119      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e067      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4934      	ldr	r1, [pc, #208]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7ff fb4c 	bl	8000eb4 <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff fb48 	bl	8000eb4 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d20c      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e032      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4916      	ldr	r1, [pc, #88]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	490e      	ldr	r1, [pc, #56]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ae:	f000 f855 	bl	800195c <HAL_RCC_GetSysClockFreq>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	490a      	ldr	r1, [pc, #40]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff faac 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00
 80018e4:	40023800 	.word	0x40023800
 80018e8:	08003578 	.word	0x08003578
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_RCC_GetHCLKFreq+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000000 	.word	0x20000000

0800190c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001910:	f7ff fff0 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001914:	4602      	mov	r2, r0
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	0a9b      	lsrs	r3, r3, #10
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	4903      	ldr	r1, [pc, #12]	; (8001930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001922:	5ccb      	ldrb	r3, [r1, r3]
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	08003588 	.word	0x08003588

08001934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001938:	f7ff ffdc 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 800193c:	4602      	mov	r2, r0
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	0b5b      	lsrs	r3, r3, #13
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	4903      	ldr	r1, [pc, #12]	; (8001958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800194a:	5ccb      	ldrb	r3, [r1, r3]
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001950:	4618      	mov	r0, r3
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	08003588 	.word	0x08003588

0800195c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001960:	b0ae      	sub	sp, #184	; 0xb8
 8001962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001982:	4bcb      	ldr	r3, [pc, #812]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b0c      	cmp	r3, #12
 800198c:	f200 8206 	bhi.w	8001d9c <HAL_RCC_GetSysClockFreq+0x440>
 8001990:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	080019cd 	.word	0x080019cd
 800199c:	08001d9d 	.word	0x08001d9d
 80019a0:	08001d9d 	.word	0x08001d9d
 80019a4:	08001d9d 	.word	0x08001d9d
 80019a8:	080019d5 	.word	0x080019d5
 80019ac:	08001d9d 	.word	0x08001d9d
 80019b0:	08001d9d 	.word	0x08001d9d
 80019b4:	08001d9d 	.word	0x08001d9d
 80019b8:	080019dd 	.word	0x080019dd
 80019bc:	08001d9d 	.word	0x08001d9d
 80019c0:	08001d9d 	.word	0x08001d9d
 80019c4:	08001d9d 	.word	0x08001d9d
 80019c8:	08001bcd 	.word	0x08001bcd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019cc:	4bb9      	ldr	r3, [pc, #740]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x358>)
 80019ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80019d2:	e1e7      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019d4:	4bb8      	ldr	r3, [pc, #736]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80019d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019da:	e1e3      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019dc:	4bb4      	ldr	r3, [pc, #720]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e8:	4bb1      	ldr	r3, [pc, #708]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d071      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f4:	4bae      	ldr	r3, [pc, #696]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	099b      	lsrs	r3, r3, #6
 80019fa:	2200      	movs	r2, #0
 80019fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a00:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a10:	2300      	movs	r3, #0
 8001a12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001a1a:	4622      	mov	r2, r4
 8001a1c:	462b      	mov	r3, r5
 8001a1e:	f04f 0000 	mov.w	r0, #0
 8001a22:	f04f 0100 	mov.w	r1, #0
 8001a26:	0159      	lsls	r1, r3, #5
 8001a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a2c:	0150      	lsls	r0, r2, #5
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4621      	mov	r1, r4
 8001a34:	1a51      	subs	r1, r2, r1
 8001a36:	6439      	str	r1, [r7, #64]	; 0x40
 8001a38:	4629      	mov	r1, r5
 8001a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a4c:	4649      	mov	r1, r9
 8001a4e:	018b      	lsls	r3, r1, #6
 8001a50:	4641      	mov	r1, r8
 8001a52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a56:	4641      	mov	r1, r8
 8001a58:	018a      	lsls	r2, r1, #6
 8001a5a:	4641      	mov	r1, r8
 8001a5c:	1a51      	subs	r1, r2, r1
 8001a5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a60:	4649      	mov	r1, r9
 8001a62:	eb63 0301 	sbc.w	r3, r3, r1
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001a74:	4649      	mov	r1, r9
 8001a76:	00cb      	lsls	r3, r1, #3
 8001a78:	4641      	mov	r1, r8
 8001a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a7e:	4641      	mov	r1, r8
 8001a80:	00ca      	lsls	r2, r1, #3
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	4603      	mov	r3, r0
 8001a88:	4622      	mov	r2, r4
 8001a8a:	189b      	adds	r3, r3, r2
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a8e:	462b      	mov	r3, r5
 8001a90:	460a      	mov	r2, r1
 8001a92:	eb42 0303 	adc.w	r3, r2, r3
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	024b      	lsls	r3, r1, #9
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aae:	4621      	mov	r1, r4
 8001ab0:	024a      	lsls	r2, r1, #9
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aba:	2200      	movs	r2, #0
 8001abc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ac0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ac4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ac8:	f7fe fba4 	bl	8000214 <__aeabi_uldivmod>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ad6:	e067      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad8:	4b75      	ldr	r3, [pc, #468]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	099b      	lsrs	r3, r3, #6
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ae4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001af2:	2300      	movs	r3, #0
 8001af4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001af6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001afa:	4622      	mov	r2, r4
 8001afc:	462b      	mov	r3, r5
 8001afe:	f04f 0000 	mov.w	r0, #0
 8001b02:	f04f 0100 	mov.w	r1, #0
 8001b06:	0159      	lsls	r1, r3, #5
 8001b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b0c:	0150      	lsls	r0, r2, #5
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4621      	mov	r1, r4
 8001b14:	1a51      	subs	r1, r2, r1
 8001b16:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b18:	4629      	mov	r1, r5
 8001b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b2c:	4649      	mov	r1, r9
 8001b2e:	018b      	lsls	r3, r1, #6
 8001b30:	4641      	mov	r1, r8
 8001b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b36:	4641      	mov	r1, r8
 8001b38:	018a      	lsls	r2, r1, #6
 8001b3a:	4641      	mov	r1, r8
 8001b3c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b40:	4649      	mov	r1, r9
 8001b42:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b52:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b5a:	4692      	mov	sl, r2
 8001b5c:	469b      	mov	fp, r3
 8001b5e:	4623      	mov	r3, r4
 8001b60:	eb1a 0303 	adds.w	r3, sl, r3
 8001b64:	623b      	str	r3, [r7, #32]
 8001b66:	462b      	mov	r3, r5
 8001b68:	eb4b 0303 	adc.w	r3, fp, r3
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	028b      	lsls	r3, r1, #10
 8001b7e:	4621      	mov	r1, r4
 8001b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b84:	4621      	mov	r1, r4
 8001b86:	028a      	lsls	r2, r1, #10
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b90:	2200      	movs	r2, #0
 8001b92:	673b      	str	r3, [r7, #112]	; 0x70
 8001b94:	677a      	str	r2, [r7, #116]	; 0x74
 8001b96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b9a:	f7fe fb3b 	bl	8000214 <__aeabi_uldivmod>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ba8:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001bba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bca:	e0eb      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bcc:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd8:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d06b      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be4:	4b32      	ldr	r3, [pc, #200]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	2200      	movs	r2, #0
 8001bec:	66bb      	str	r3, [r7, #104]	; 0x68
 8001bee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001bf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bf6:	663b      	str	r3, [r7, #96]	; 0x60
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	667b      	str	r3, [r7, #100]	; 0x64
 8001bfc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c00:	4622      	mov	r2, r4
 8001c02:	462b      	mov	r3, r5
 8001c04:	f04f 0000 	mov.w	r0, #0
 8001c08:	f04f 0100 	mov.w	r1, #0
 8001c0c:	0159      	lsls	r1, r3, #5
 8001c0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c12:	0150      	lsls	r0, r2, #5
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4621      	mov	r1, r4
 8001c1a:	1a51      	subs	r1, r2, r1
 8001c1c:	61b9      	str	r1, [r7, #24]
 8001c1e:	4629      	mov	r1, r5
 8001c20:	eb63 0301 	sbc.w	r3, r3, r1
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c32:	4659      	mov	r1, fp
 8001c34:	018b      	lsls	r3, r1, #6
 8001c36:	4651      	mov	r1, sl
 8001c38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c3c:	4651      	mov	r1, sl
 8001c3e:	018a      	lsls	r2, r1, #6
 8001c40:	4651      	mov	r1, sl
 8001c42:	ebb2 0801 	subs.w	r8, r2, r1
 8001c46:	4659      	mov	r1, fp
 8001c48:	eb63 0901 	sbc.w	r9, r3, r1
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	4623      	mov	r3, r4
 8001c66:	eb18 0303 	adds.w	r3, r8, r3
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	462b      	mov	r3, r5
 8001c6e:	eb49 0303 	adc.w	r3, r9, r3
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c80:	4629      	mov	r1, r5
 8001c82:	024b      	lsls	r3, r1, #9
 8001c84:	4621      	mov	r1, r4
 8001c86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	024a      	lsls	r2, r1, #9
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c96:	2200      	movs	r2, #0
 8001c98:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ca0:	f7fe fab8 	bl	8000214 <__aeabi_uldivmod>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4613      	mov	r3, r2
 8001caa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cae:	e065      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x420>
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	00f42400 	.word	0x00f42400
 8001cb8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cbc:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	099b      	lsrs	r3, r3, #6
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ccc:	653b      	str	r3, [r7, #80]	; 0x50
 8001cce:	2300      	movs	r3, #0
 8001cd0:	657b      	str	r3, [r7, #84]	; 0x54
 8001cd2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001cd6:	4642      	mov	r2, r8
 8001cd8:	464b      	mov	r3, r9
 8001cda:	f04f 0000 	mov.w	r0, #0
 8001cde:	f04f 0100 	mov.w	r1, #0
 8001ce2:	0159      	lsls	r1, r3, #5
 8001ce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce8:	0150      	lsls	r0, r2, #5
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4641      	mov	r1, r8
 8001cf0:	1a51      	subs	r1, r2, r1
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	4649      	mov	r1, r9
 8001cf6:	eb63 0301 	sbc.w	r3, r3, r1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d08:	4659      	mov	r1, fp
 8001d0a:	018b      	lsls	r3, r1, #6
 8001d0c:	4651      	mov	r1, sl
 8001d0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d12:	4651      	mov	r1, sl
 8001d14:	018a      	lsls	r2, r1, #6
 8001d16:	4651      	mov	r1, sl
 8001d18:	1a54      	subs	r4, r2, r1
 8001d1a:	4659      	mov	r1, fp
 8001d1c:	eb63 0501 	sbc.w	r5, r3, r1
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	00eb      	lsls	r3, r5, #3
 8001d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d2e:	00e2      	lsls	r2, r4, #3
 8001d30:	4614      	mov	r4, r2
 8001d32:	461d      	mov	r5, r3
 8001d34:	4643      	mov	r3, r8
 8001d36:	18e3      	adds	r3, r4, r3
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	464b      	mov	r3, r9
 8001d3c:	eb45 0303 	adc.w	r3, r5, r3
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d4e:	4629      	mov	r1, r5
 8001d50:	028b      	lsls	r3, r1, #10
 8001d52:	4621      	mov	r1, r4
 8001d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d58:	4621      	mov	r1, r4
 8001d5a:	028a      	lsls	r2, r1, #10
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d64:	2200      	movs	r2, #0
 8001d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d68:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d6e:	f7fe fa51 	bl	8000214 <__aeabi_uldivmod>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4613      	mov	r3, r2
 8001d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	0f1b      	lsrs	r3, r3, #28
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001d8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d9a:	e003      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001da2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	37b8      	adds	r7, #184	; 0xb8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	00f42400 	.word	0x00f42400

08001dbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e28d      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8083 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ddc:	4b94      	ldr	r3, [pc, #592]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d019      	beq.n	8001e1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001de8:	4b91      	ldr	r3, [pc, #580]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001df4:	4b8e      	ldr	r3, [pc, #568]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e00:	d00c      	beq.n	8001e1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e02:	4b8b      	ldr	r3, [pc, #556]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d112      	bne.n	8001e34 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e0e:	4b88      	ldr	r3, [pc, #544]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e1a:	d10b      	bne.n	8001e34 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	4b84      	ldr	r3, [pc, #528]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d05b      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x124>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d157      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e25a      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d106      	bne.n	8001e4c <HAL_RCC_OscConfig+0x90>
 8001e3e:	4b7c      	ldr	r3, [pc, #496]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a7b      	ldr	r2, [pc, #492]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e01d      	b.n	8001e88 <HAL_RCC_OscConfig+0xcc>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0xb4>
 8001e56:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a75      	ldr	r2, [pc, #468]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a72      	ldr	r2, [pc, #456]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0xcc>
 8001e70:	4b6f      	ldr	r3, [pc, #444]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a6e      	ldr	r2, [pc, #440]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b6c      	ldr	r3, [pc, #432]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a6b      	ldr	r2, [pc, #428]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f810 	bl	8000eb4 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff f80c 	bl	8000eb4 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e21f      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b61      	ldr	r3, [pc, #388]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0xdc>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7fe fffc 	bl	8000eb4 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7fe fff8 	bl	8000eb4 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e20b      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	4b57      	ldr	r3, [pc, #348]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x104>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d06f      	beq.n	8001fce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eee:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d017      	beq.n	8001f2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001efa:	4b4d      	ldr	r3, [pc, #308]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d105      	bne.n	8001f12 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f06:	4b4a      	ldr	r3, [pc, #296]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00b      	beq.n	8001f2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d11c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1e:	4b44      	ldr	r3, [pc, #272]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d116      	bne.n	8001f58 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <HAL_RCC_OscConfig+0x186>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e1d3      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4937      	ldr	r1, [pc, #220]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	e03a      	b.n	8001fce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d020      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f60:	4b34      	ldr	r3, [pc, #208]	; (8002034 <HAL_RCC_OscConfig+0x278>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7fe ffa5 	bl	8000eb4 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7fe ffa1 	bl	8000eb4 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e1b4      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b28      	ldr	r3, [pc, #160]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4925      	ldr	r1, [pc, #148]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
 8001fa0:	e015      	b.n	8001fce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa2:	4b24      	ldr	r3, [pc, #144]	; (8002034 <HAL_RCC_OscConfig+0x278>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7fe ff84 	bl	8000eb4 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb0:	f7fe ff80 	bl	8000eb4 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e193      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d036      	beq.n	8002048 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe8:	f7fe ff64 	bl	8000eb4 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff0:	f7fe ff60 	bl	8000eb4 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e173      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8002004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x234>
 800200e:	e01b      	b.n	8002048 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_OscConfig+0x27c>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7fe ff4d 	bl	8000eb4 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	e00e      	b.n	800203c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201e:	f7fe ff49 	bl	8000eb4 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d907      	bls.n	800203c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e15c      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
 8002030:	40023800 	.word	0x40023800
 8002034:	42470000 	.word	0x42470000
 8002038:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	4b8a      	ldr	r3, [pc, #552]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800203e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1ea      	bne.n	800201e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 8097 	beq.w	8002184 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205a:	4b83      	ldr	r3, [pc, #524]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10f      	bne.n	8002086 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	4b7f      	ldr	r3, [pc, #508]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a7e      	ldr	r2, [pc, #504]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b7c      	ldr	r3, [pc, #496]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002082:	2301      	movs	r3, #1
 8002084:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002086:	4b79      	ldr	r3, [pc, #484]	; (800226c <HAL_RCC_OscConfig+0x4b0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208e:	2b00      	cmp	r3, #0
 8002090:	d118      	bne.n	80020c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002092:	4b76      	ldr	r3, [pc, #472]	; (800226c <HAL_RCC_OscConfig+0x4b0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a75      	ldr	r2, [pc, #468]	; (800226c <HAL_RCC_OscConfig+0x4b0>)
 8002098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209e:	f7fe ff09 	bl	8000eb4 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a6:	f7fe ff05 	bl	8000eb4 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e118      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	4b6c      	ldr	r3, [pc, #432]	; (800226c <HAL_RCC_OscConfig+0x4b0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x31e>
 80020cc:	4b66      	ldr	r3, [pc, #408]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80020ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d0:	4a65      	ldr	r2, [pc, #404]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6713      	str	r3, [r2, #112]	; 0x70
 80020d8:	e01c      	b.n	8002114 <HAL_RCC_OscConfig+0x358>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b05      	cmp	r3, #5
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x340>
 80020e2:	4b61      	ldr	r3, [pc, #388]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e6:	4a60      	ldr	r2, [pc, #384]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	6713      	str	r3, [r2, #112]	; 0x70
 80020ee:	4b5e      	ldr	r3, [pc, #376]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	4a5d      	ldr	r2, [pc, #372]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6713      	str	r3, [r2, #112]	; 0x70
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0x358>
 80020fc:	4b5a      	ldr	r3, [pc, #360]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	4a59      	ldr	r2, [pc, #356]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	6713      	str	r3, [r2, #112]	; 0x70
 8002108:	4b57      	ldr	r3, [pc, #348]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	4a56      	ldr	r2, [pc, #344]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800210e:	f023 0304 	bic.w	r3, r3, #4
 8002112:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d015      	beq.n	8002148 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211c:	f7fe feca 	bl	8000eb4 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002122:	e00a      	b.n	800213a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7fe fec6 	bl	8000eb4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e0d7      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213a:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0ee      	beq.n	8002124 <HAL_RCC_OscConfig+0x368>
 8002146:	e014      	b.n	8002172 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7fe feb4 	bl	8000eb4 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7fe feb0 	bl	8000eb4 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e0c1      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002166:	4b40      	ldr	r3, [pc, #256]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1ee      	bne.n	8002150 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002172:	7dfb      	ldrb	r3, [r7, #23]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002178:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	4a3a      	ldr	r2, [pc, #232]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 800217e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002182:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80ad 	beq.w	80022e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800218e:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b08      	cmp	r3, #8
 8002198:	d060      	beq.n	800225c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d145      	bne.n	800222e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a2:	4b33      	ldr	r3, [pc, #204]	; (8002270 <HAL_RCC_OscConfig+0x4b4>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fe84 	bl	8000eb4 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe fe80 	bl	8000eb4 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e093      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c2:	4b29      	ldr	r3, [pc, #164]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	019b      	lsls	r3, r3, #6
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	3b01      	subs	r3, #1
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	061b      	lsls	r3, r3, #24
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	071b      	lsls	r3, r3, #28
 80021fa:	491b      	ldr	r1, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x4b4>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002206:	f7fe fe55 	bl	8000eb4 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220e:	f7fe fe51 	bl	8000eb4 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e064      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x452>
 800222c:	e05c      	b.n	80022e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_RCC_OscConfig+0x4b4>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fe3e 	bl	8000eb4 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe fe3a 	bl	8000eb4 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e04d      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x480>
 800225a:	e045      	b.n	80022e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d107      	bne.n	8002274 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e040      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
 8002268:	40023800 	.word	0x40023800
 800226c:	40007000 	.word	0x40007000
 8002270:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002274:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <HAL_RCC_OscConfig+0x538>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d030      	beq.n	80022e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d129      	bne.n	80022e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d122      	bne.n	80022e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d119      	bne.n	80022e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	3b01      	subs	r3, #1
 80022be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d10f      	bne.n	80022e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800

080022f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e042      	b.n	8002390 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe fc86 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2224      	movs	r2, #36	; 0x24
 8002328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800233a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 fd75 	bl	8002e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002350:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695a      	ldr	r2, [r3, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002360:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002370:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	4613      	mov	r3, r2
 80023a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	f040 8081 	bne.w	80024bc <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <HAL_UART_Receive+0x2e>
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e079      	b.n	80024be <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2222      	movs	r2, #34	; 0x22
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023de:	f7fe fd69 	bl	8000eb4 <HAL_GetTick>
 80023e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	88fa      	ldrh	r2, [r7, #6]
 80023e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	88fa      	ldrh	r2, [r7, #6]
 80023ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f8:	d108      	bne.n	800240c <HAL_UART_Receive+0x74>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d104      	bne.n	800240c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	e003      	b.n	8002414 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002414:	e047      	b.n	80024a6 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2200      	movs	r2, #0
 800241e:	2120      	movs	r1, #32
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 fb0d 	bl	8002a40 <UART_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e042      	b.n	80024be <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10c      	bne.n	8002458 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	b29b      	uxth	r3, r3
 8002446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800244a:	b29a      	uxth	r2, r3
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	3302      	adds	r3, #2
 8002454:	61bb      	str	r3, [r7, #24]
 8002456:	e01f      	b.n	8002498 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002460:	d007      	beq.n	8002472 <HAL_UART_Receive+0xda>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10a      	bne.n	8002480 <HAL_UART_Receive+0xe8>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	e008      	b.n	8002492 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800248c:	b2da      	uxtb	r2, r3
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3301      	adds	r3, #1
 8002496:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1b2      	bne.n	8002416 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	e000      	b.n	80024be <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80024bc:	2302      	movs	r3, #2
  }
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3720      	adds	r7, #32
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b0ba      	sub	sp, #232	; 0xe8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10f      	bne.n	800252e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800250e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_UART_IRQHandler+0x66>
 800251a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fbc2 	bl	8002cb0 <UART_Receive_IT>
      return;
 800252c:	e25b      	b.n	80029e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800252e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80de 	beq.w	80026f4 <HAL_UART_IRQHandler+0x22c>
 8002538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002548:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80d1 	beq.w	80026f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00b      	beq.n	8002576 <HAL_UART_IRQHandler+0xae>
 800255e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_UART_IRQHandler+0xd2>
 8002582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f043 0202 	orr.w	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800259a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_UART_IRQHandler+0xf6>
 80025a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f043 0204 	orr.w	r2, r3, #4
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d011      	beq.n	80025ee <HAL_UART_IRQHandler+0x126>
 80025ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f043 0208 	orr.w	r2, r3, #8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 81f2 	beq.w	80029dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_UART_IRQHandler+0x14e>
 8002604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fb4d 	bl	8002cb0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b40      	cmp	r3, #64	; 0x40
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d103      	bne.n	8002642 <HAL_UART_IRQHandler+0x17a>
 800263a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d04f      	beq.n	80026e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fa55 	bl	8002af2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	2b40      	cmp	r3, #64	; 0x40
 8002654:	d141      	bne.n	80026da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3314      	adds	r3, #20
 800265c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002664:	e853 3f00 	ldrex	r3, [r3]
 8002668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800266c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3314      	adds	r3, #20
 800267e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002682:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800268e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800269a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1d9      	bne.n	8002656 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d013      	beq.n	80026d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ae:	4a7e      	ldr	r2, [pc, #504]	; (80028a8 <HAL_UART_IRQHandler+0x3e0>)
 80026b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fe28 	bl	800130c <HAL_DMA_Abort_IT>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d016      	beq.n	80026f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026cc:	4610      	mov	r0, r2
 80026ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d0:	e00e      	b.n	80026f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f99e 	bl	8002a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d8:	e00a      	b.n	80026f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f99a 	bl	8002a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e0:	e006      	b.n	80026f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f996 	bl	8002a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80026ee:	e175      	b.n	80029dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f0:	bf00      	nop
    return;
 80026f2:	e173      	b.n	80029dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	f040 814f 	bne.w	800299c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8148 	beq.w	800299c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800270c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8141 	beq.w	800299c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	2b40      	cmp	r3, #64	; 0x40
 800273c:	f040 80b6 	bne.w	80028ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800274c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8145 	beq.w	80029e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800275a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800275e:	429a      	cmp	r2, r3
 8002760:	f080 813e 	bcs.w	80029e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800276a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002776:	f000 8088 	beq.w	800288a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	330c      	adds	r3, #12
 8002780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002788:	e853 3f00 	ldrex	r3, [r3]
 800278c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027b6:	e841 2300 	strex	r3, r2, [r1]
 80027ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1d9      	bne.n	800277a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3314      	adds	r3, #20
 80027cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d0:	e853 3f00 	ldrex	r3, [r3]
 80027d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3314      	adds	r3, #20
 80027e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027f6:	e841 2300 	strex	r3, r2, [r1]
 80027fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80027fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e1      	bne.n	80027c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	3314      	adds	r3, #20
 8002808:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800280c:	e853 3f00 	ldrex	r3, [r3]
 8002810:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	3314      	adds	r3, #20
 8002822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002826:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002828:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800282c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800282e:	e841 2300 	strex	r3, r2, [r1]
 8002832:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e3      	bne.n	8002802 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	330c      	adds	r3, #12
 800284e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002852:	e853 3f00 	ldrex	r3, [r3]
 8002856:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285a:	f023 0310 	bic.w	r3, r3, #16
 800285e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	330c      	adds	r3, #12
 8002868:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800286c:	65ba      	str	r2, [r7, #88]	; 0x58
 800286e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002872:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002874:	e841 2300 	strex	r3, r2, [r1]
 8002878:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800287a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1e3      	bne.n	8002848 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fcd1 	bl	800122c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2202      	movs	r2, #2
 800288e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002898:	b29b      	uxth	r3, r3
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	b29b      	uxth	r3, r3
 800289e:	4619      	mov	r1, r3
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f8c1 	bl	8002a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028a6:	e09b      	b.n	80029e0 <HAL_UART_IRQHandler+0x518>
 80028a8:	08002bb9 	.word	0x08002bb9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 808e 	beq.w	80029e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80028c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8089 	beq.w	80029e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	e853 3f00 	ldrex	r3, [r3]
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	330c      	adds	r3, #12
 80028f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028f6:	647a      	str	r2, [r7, #68]	; 0x44
 80028f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028fe:	e841 2300 	strex	r3, r2, [r1]
 8002902:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1e3      	bne.n	80028d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3314      	adds	r3, #20
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	e853 3f00 	ldrex	r3, [r3]
 8002918:	623b      	str	r3, [r7, #32]
   return(result);
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800292e:	633a      	str	r2, [r7, #48]	; 0x30
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1e3      	bne.n	800290a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	330c      	adds	r3, #12
 8002956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	e853 3f00 	ldrex	r3, [r3]
 800295e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0310 	bic.w	r3, r3, #16
 8002966:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002974:	61fa      	str	r2, [r7, #28]
 8002976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002978:	69b9      	ldr	r1, [r7, #24]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	e841 2300 	strex	r3, r2, [r1]
 8002980:	617b      	str	r3, [r7, #20]
   return(result);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e3      	bne.n	8002950 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800298e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002992:	4619      	mov	r1, r3
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f847 	bl	8002a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800299a:	e023      	b.n	80029e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800299c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d009      	beq.n	80029bc <HAL_UART_IRQHandler+0x4f4>
 80029a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f913 	bl	8002be0 <UART_Transmit_IT>
    return;
 80029ba:	e014      	b.n	80029e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <HAL_UART_IRQHandler+0x51e>
 80029c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f953 	bl	8002c80 <UART_EndTransmit_IT>
    return;
 80029da:	e004      	b.n	80029e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80029dc:	bf00      	nop
 80029de:	e002      	b.n	80029e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029e0:	bf00      	nop
 80029e2:	e000      	b.n	80029e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029e4:	bf00      	nop
  }
}
 80029e6:	37e8      	adds	r7, #232	; 0xe8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a50:	e03b      	b.n	8002aca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d037      	beq.n	8002aca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5a:	f7fe fa2b 	bl	8000eb4 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d302      	bcc.n	8002a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e03a      	b.n	8002aea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d023      	beq.n	8002aca <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b80      	cmp	r3, #128	; 0x80
 8002a86:	d020      	beq.n	8002aca <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b40      	cmp	r3, #64	; 0x40
 8002a8c:	d01d      	beq.n	8002aca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d116      	bne.n	8002aca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f81d 	bl	8002af2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2208      	movs	r2, #8
 8002abc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e00f      	b.n	8002aea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	bf0c      	ite	eq
 8002ada:	2301      	moveq	r3, #1
 8002adc:	2300      	movne	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d0b4      	beq.n	8002a52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b095      	sub	sp, #84	; 0x54
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	330c      	adds	r3, #12
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	330c      	adds	r3, #12
 8002b18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b1a:	643a      	str	r2, [r7, #64]	; 0x40
 8002b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b22:	e841 2300 	strex	r3, r2, [r1]
 8002b26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1e5      	bne.n	8002afa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3314      	adds	r3, #20
 8002b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	e853 3f00 	ldrex	r3, [r3]
 8002b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3314      	adds	r3, #20
 8002b4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b56:	e841 2300 	strex	r3, r2, [r1]
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1e5      	bne.n	8002b2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d119      	bne.n	8002b9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	e853 3f00 	ldrex	r3, [r3]
 8002b78:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f023 0310 	bic.w	r3, r3, #16
 8002b80:	647b      	str	r3, [r7, #68]	; 0x44
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	330c      	adds	r3, #12
 8002b88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b8a:	61ba      	str	r2, [r7, #24]
 8002b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8e:	6979      	ldr	r1, [r7, #20]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	e841 2300 	strex	r3, r2, [r1]
 8002b96:	613b      	str	r3, [r7, #16]
   return(result);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1e5      	bne.n	8002b6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bac:	bf00      	nop
 8002bae:	3754      	adds	r7, #84	; 0x54
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f7ff ff1e 	bl	8002a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b21      	cmp	r3, #33	; 0x21
 8002bf2:	d13e      	bne.n	8002c72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfc:	d114      	bne.n	8002c28 <UART_Transmit_IT+0x48>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d110      	bne.n	8002c28 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	1c9a      	adds	r2, r3, #2
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	621a      	str	r2, [r3, #32]
 8002c26:	e008      	b.n	8002c3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	1c59      	adds	r1, r3, #1
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6211      	str	r1, [r2, #32]
 8002c32:	781a      	ldrb	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4619      	mov	r1, r3
 8002c48:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10f      	bne.n	8002c6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
  }
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff fea3 	bl	80029ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08c      	sub	sp, #48	; 0x30
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b22      	cmp	r3, #34	; 0x22
 8002cc2:	f040 80ae 	bne.w	8002e22 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cce:	d117      	bne.n	8002d00 <UART_Receive_IT+0x50>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d113      	bne.n	8002d00 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf8:	1c9a      	adds	r2, r3, #2
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	629a      	str	r2, [r3, #40]	; 0x28
 8002cfe:	e026      	b.n	8002d4e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d12:	d007      	beq.n	8002d24 <UART_Receive_IT+0x74>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <UART_Receive_IT+0x82>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d106      	bne.n	8002d32 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	e008      	b.n	8002d44 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d15d      	bne.n	8002e1e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0220 	bic.w	r2, r2, #32
 8002d70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0201 	bic.w	r2, r2, #1
 8002d90:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d135      	bne.n	8002e14 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	330c      	adds	r3, #12
 8002db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	e853 3f00 	ldrex	r3, [r3]
 8002dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f023 0310 	bic.w	r3, r3, #16
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	330c      	adds	r3, #12
 8002dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dce:	623a      	str	r2, [r7, #32]
 8002dd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd2:	69f9      	ldr	r1, [r7, #28]
 8002dd4:	6a3a      	ldr	r2, [r7, #32]
 8002dd6:	e841 2300 	strex	r3, r2, [r1]
 8002dda:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e5      	bne.n	8002dae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d10a      	bne.n	8002e06 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff fe0b 	bl	8002a28 <HAL_UARTEx_RxEventCallback>
 8002e12:	e002      	b.n	8002e1a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff fdf3 	bl	8002a00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e002      	b.n	8002e24 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e000      	b.n	8002e24 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e22:	2302      	movs	r3, #2
  }
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3730      	adds	r7, #48	; 0x30
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e30:	b0c0      	sub	sp, #256	; 0x100
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e48:	68d9      	ldr	r1, [r3, #12]
 8002e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	ea40 0301 	orr.w	r3, r0, r1
 8002e54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e84:	f021 010c 	bic.w	r1, r1, #12
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e92:	430b      	orrs	r3, r1
 8002e94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea6:	6999      	ldr	r1, [r3, #24]
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	ea40 0301 	orr.w	r3, r0, r1
 8002eb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4b8f      	ldr	r3, [pc, #572]	; (80030f8 <UART_SetConfig+0x2cc>)
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d005      	beq.n	8002ecc <UART_SetConfig+0xa0>
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4b8d      	ldr	r3, [pc, #564]	; (80030fc <UART_SetConfig+0x2d0>)
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d104      	bne.n	8002ed6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ecc:	f7fe fd32 	bl	8001934 <HAL_RCC_GetPCLK2Freq>
 8002ed0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ed4:	e003      	b.n	8002ede <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ed6:	f7fe fd19 	bl	800190c <HAL_RCC_GetPCLK1Freq>
 8002eda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee8:	f040 810c 	bne.w	8003104 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ef6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002efa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002efe:	4622      	mov	r2, r4
 8002f00:	462b      	mov	r3, r5
 8002f02:	1891      	adds	r1, r2, r2
 8002f04:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f06:	415b      	adcs	r3, r3
 8002f08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f0e:	4621      	mov	r1, r4
 8002f10:	eb12 0801 	adds.w	r8, r2, r1
 8002f14:	4629      	mov	r1, r5
 8002f16:	eb43 0901 	adc.w	r9, r3, r1
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f2e:	4690      	mov	r8, r2
 8002f30:	4699      	mov	r9, r3
 8002f32:	4623      	mov	r3, r4
 8002f34:	eb18 0303 	adds.w	r3, r8, r3
 8002f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f3c:	462b      	mov	r3, r5
 8002f3e:	eb49 0303 	adc.w	r3, r9, r3
 8002f42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	18db      	adds	r3, r3, r3
 8002f5e:	653b      	str	r3, [r7, #80]	; 0x50
 8002f60:	4613      	mov	r3, r2
 8002f62:	eb42 0303 	adc.w	r3, r2, r3
 8002f66:	657b      	str	r3, [r7, #84]	; 0x54
 8002f68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f70:	f7fd f950 	bl	8000214 <__aeabi_uldivmod>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4b61      	ldr	r3, [pc, #388]	; (8003100 <UART_SetConfig+0x2d4>)
 8002f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	011c      	lsls	r4, r3, #4
 8002f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f94:	4642      	mov	r2, r8
 8002f96:	464b      	mov	r3, r9
 8002f98:	1891      	adds	r1, r2, r2
 8002f9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f9c:	415b      	adcs	r3, r3
 8002f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fa4:	4641      	mov	r1, r8
 8002fa6:	eb12 0a01 	adds.w	sl, r2, r1
 8002faa:	4649      	mov	r1, r9
 8002fac:	eb43 0b01 	adc.w	fp, r3, r1
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fc4:	4692      	mov	sl, r2
 8002fc6:	469b      	mov	fp, r3
 8002fc8:	4643      	mov	r3, r8
 8002fca:	eb1a 0303 	adds.w	r3, sl, r3
 8002fce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	eb4b 0303 	adc.w	r3, fp, r3
 8002fd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fe8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	18db      	adds	r3, r3, r3
 8002ff4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	eb42 0303 	adc.w	r3, r2, r3
 8002ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ffe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003002:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003006:	f7fd f905 	bl	8000214 <__aeabi_uldivmod>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4611      	mov	r1, r2
 8003010:	4b3b      	ldr	r3, [pc, #236]	; (8003100 <UART_SetConfig+0x2d4>)
 8003012:	fba3 2301 	umull	r2, r3, r3, r1
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	2264      	movs	r2, #100	; 0x64
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	1acb      	subs	r3, r1, r3
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003026:	4b36      	ldr	r3, [pc, #216]	; (8003100 <UART_SetConfig+0x2d4>)
 8003028:	fba3 2302 	umull	r2, r3, r3, r2
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003034:	441c      	add	r4, r3
 8003036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800303a:	2200      	movs	r2, #0
 800303c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003040:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003044:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003048:	4642      	mov	r2, r8
 800304a:	464b      	mov	r3, r9
 800304c:	1891      	adds	r1, r2, r2
 800304e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003050:	415b      	adcs	r3, r3
 8003052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003054:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003058:	4641      	mov	r1, r8
 800305a:	1851      	adds	r1, r2, r1
 800305c:	6339      	str	r1, [r7, #48]	; 0x30
 800305e:	4649      	mov	r1, r9
 8003060:	414b      	adcs	r3, r1
 8003062:	637b      	str	r3, [r7, #52]	; 0x34
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003070:	4659      	mov	r1, fp
 8003072:	00cb      	lsls	r3, r1, #3
 8003074:	4651      	mov	r1, sl
 8003076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800307a:	4651      	mov	r1, sl
 800307c:	00ca      	lsls	r2, r1, #3
 800307e:	4610      	mov	r0, r2
 8003080:	4619      	mov	r1, r3
 8003082:	4603      	mov	r3, r0
 8003084:	4642      	mov	r2, r8
 8003086:	189b      	adds	r3, r3, r2
 8003088:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800308c:	464b      	mov	r3, r9
 800308e:	460a      	mov	r2, r1
 8003090:	eb42 0303 	adc.w	r3, r2, r3
 8003094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030ac:	460b      	mov	r3, r1
 80030ae:	18db      	adds	r3, r3, r3
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b2:	4613      	mov	r3, r2
 80030b4:	eb42 0303 	adc.w	r3, r2, r3
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030c2:	f7fd f8a7 	bl	8000214 <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <UART_SetConfig+0x2d4>)
 80030cc:	fba3 1302 	umull	r1, r3, r3, r2
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	2164      	movs	r1, #100	; 0x64
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	3332      	adds	r3, #50	; 0x32
 80030de:	4a08      	ldr	r2, [pc, #32]	; (8003100 <UART_SetConfig+0x2d4>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	f003 0207 	and.w	r2, r3, #7
 80030ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4422      	add	r2, r4
 80030f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030f4:	e106      	b.n	8003304 <UART_SetConfig+0x4d8>
 80030f6:	bf00      	nop
 80030f8:	40011000 	.word	0x40011000
 80030fc:	40011400 	.word	0x40011400
 8003100:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003108:	2200      	movs	r2, #0
 800310a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800310e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003112:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003116:	4642      	mov	r2, r8
 8003118:	464b      	mov	r3, r9
 800311a:	1891      	adds	r1, r2, r2
 800311c:	6239      	str	r1, [r7, #32]
 800311e:	415b      	adcs	r3, r3
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
 8003122:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003126:	4641      	mov	r1, r8
 8003128:	1854      	adds	r4, r2, r1
 800312a:	4649      	mov	r1, r9
 800312c:	eb43 0501 	adc.w	r5, r3, r1
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	00eb      	lsls	r3, r5, #3
 800313a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800313e:	00e2      	lsls	r2, r4, #3
 8003140:	4614      	mov	r4, r2
 8003142:	461d      	mov	r5, r3
 8003144:	4643      	mov	r3, r8
 8003146:	18e3      	adds	r3, r4, r3
 8003148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800314c:	464b      	mov	r3, r9
 800314e:	eb45 0303 	adc.w	r3, r5, r3
 8003152:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003162:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003172:	4629      	mov	r1, r5
 8003174:	008b      	lsls	r3, r1, #2
 8003176:	4621      	mov	r1, r4
 8003178:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800317c:	4621      	mov	r1, r4
 800317e:	008a      	lsls	r2, r1, #2
 8003180:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003184:	f7fd f846 	bl	8000214 <__aeabi_uldivmod>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4b60      	ldr	r3, [pc, #384]	; (8003310 <UART_SetConfig+0x4e4>)
 800318e:	fba3 2302 	umull	r2, r3, r3, r2
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	011c      	lsls	r4, r3, #4
 8003196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800319a:	2200      	movs	r2, #0
 800319c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031a8:	4642      	mov	r2, r8
 80031aa:	464b      	mov	r3, r9
 80031ac:	1891      	adds	r1, r2, r2
 80031ae:	61b9      	str	r1, [r7, #24]
 80031b0:	415b      	adcs	r3, r3
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b8:	4641      	mov	r1, r8
 80031ba:	1851      	adds	r1, r2, r1
 80031bc:	6139      	str	r1, [r7, #16]
 80031be:	4649      	mov	r1, r9
 80031c0:	414b      	adcs	r3, r1
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031d0:	4659      	mov	r1, fp
 80031d2:	00cb      	lsls	r3, r1, #3
 80031d4:	4651      	mov	r1, sl
 80031d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031da:	4651      	mov	r1, sl
 80031dc:	00ca      	lsls	r2, r1, #3
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	4603      	mov	r3, r0
 80031e4:	4642      	mov	r2, r8
 80031e6:	189b      	adds	r3, r3, r2
 80031e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031ec:	464b      	mov	r3, r9
 80031ee:	460a      	mov	r2, r1
 80031f0:	eb42 0303 	adc.w	r3, r2, r3
 80031f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	67bb      	str	r3, [r7, #120]	; 0x78
 8003202:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003210:	4649      	mov	r1, r9
 8003212:	008b      	lsls	r3, r1, #2
 8003214:	4641      	mov	r1, r8
 8003216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800321a:	4641      	mov	r1, r8
 800321c:	008a      	lsls	r2, r1, #2
 800321e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003222:	f7fc fff7 	bl	8000214 <__aeabi_uldivmod>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4611      	mov	r1, r2
 800322c:	4b38      	ldr	r3, [pc, #224]	; (8003310 <UART_SetConfig+0x4e4>)
 800322e:	fba3 2301 	umull	r2, r3, r3, r1
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	2264      	movs	r2, #100	; 0x64
 8003236:	fb02 f303 	mul.w	r3, r2, r3
 800323a:	1acb      	subs	r3, r1, r3
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	3332      	adds	r3, #50	; 0x32
 8003240:	4a33      	ldr	r2, [pc, #204]	; (8003310 <UART_SetConfig+0x4e4>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800324c:	441c      	add	r4, r3
 800324e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003252:	2200      	movs	r2, #0
 8003254:	673b      	str	r3, [r7, #112]	; 0x70
 8003256:	677a      	str	r2, [r7, #116]	; 0x74
 8003258:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800325c:	4642      	mov	r2, r8
 800325e:	464b      	mov	r3, r9
 8003260:	1891      	adds	r1, r2, r2
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	415b      	adcs	r3, r3
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800326c:	4641      	mov	r1, r8
 800326e:	1851      	adds	r1, r2, r1
 8003270:	6039      	str	r1, [r7, #0]
 8003272:	4649      	mov	r1, r9
 8003274:	414b      	adcs	r3, r1
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003284:	4659      	mov	r1, fp
 8003286:	00cb      	lsls	r3, r1, #3
 8003288:	4651      	mov	r1, sl
 800328a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800328e:	4651      	mov	r1, sl
 8003290:	00ca      	lsls	r2, r1, #3
 8003292:	4610      	mov	r0, r2
 8003294:	4619      	mov	r1, r3
 8003296:	4603      	mov	r3, r0
 8003298:	4642      	mov	r2, r8
 800329a:	189b      	adds	r3, r3, r2
 800329c:	66bb      	str	r3, [r7, #104]	; 0x68
 800329e:	464b      	mov	r3, r9
 80032a0:	460a      	mov	r2, r1
 80032a2:	eb42 0303 	adc.w	r3, r2, r3
 80032a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	663b      	str	r3, [r7, #96]	; 0x60
 80032b2:	667a      	str	r2, [r7, #100]	; 0x64
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032c0:	4649      	mov	r1, r9
 80032c2:	008b      	lsls	r3, r1, #2
 80032c4:	4641      	mov	r1, r8
 80032c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ca:	4641      	mov	r1, r8
 80032cc:	008a      	lsls	r2, r1, #2
 80032ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032d2:	f7fc ff9f 	bl	8000214 <__aeabi_uldivmod>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <UART_SetConfig+0x4e4>)
 80032dc:	fba3 1302 	umull	r1, r3, r3, r2
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	2164      	movs	r1, #100	; 0x64
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	3332      	adds	r3, #50	; 0x32
 80032ee:	4a08      	ldr	r2, [pc, #32]	; (8003310 <UART_SetConfig+0x4e4>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	f003 020f 	and.w	r2, r3, #15
 80032fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4422      	add	r2, r4
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	bf00      	nop
 8003306:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800330a:	46bd      	mov	sp, r7
 800330c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003310:	51eb851f 	.word	0x51eb851f

08003314 <memset>:
 8003314:	4402      	add	r2, r0
 8003316:	4603      	mov	r3, r0
 8003318:	4293      	cmp	r3, r2
 800331a:	d100      	bne.n	800331e <memset+0xa>
 800331c:	4770      	bx	lr
 800331e:	f803 1b01 	strb.w	r1, [r3], #1
 8003322:	e7f9      	b.n	8003318 <memset+0x4>

08003324 <strcat>:
 8003324:	b510      	push	{r4, lr}
 8003326:	4602      	mov	r2, r0
 8003328:	7814      	ldrb	r4, [r2, #0]
 800332a:	4613      	mov	r3, r2
 800332c:	3201      	adds	r2, #1
 800332e:	2c00      	cmp	r4, #0
 8003330:	d1fa      	bne.n	8003328 <strcat+0x4>
 8003332:	3b01      	subs	r3, #1
 8003334:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003338:	f803 2f01 	strb.w	r2, [r3, #1]!
 800333c:	2a00      	cmp	r2, #0
 800333e:	d1f9      	bne.n	8003334 <strcat+0x10>
 8003340:	bd10      	pop	{r4, pc}
	...

08003344 <__libc_init_array>:
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	4d0d      	ldr	r5, [pc, #52]	; (800337c <__libc_init_array+0x38>)
 8003348:	4c0d      	ldr	r4, [pc, #52]	; (8003380 <__libc_init_array+0x3c>)
 800334a:	1b64      	subs	r4, r4, r5
 800334c:	10a4      	asrs	r4, r4, #2
 800334e:	2600      	movs	r6, #0
 8003350:	42a6      	cmp	r6, r4
 8003352:	d109      	bne.n	8003368 <__libc_init_array+0x24>
 8003354:	4d0b      	ldr	r5, [pc, #44]	; (8003384 <__libc_init_array+0x40>)
 8003356:	4c0c      	ldr	r4, [pc, #48]	; (8003388 <__libc_init_array+0x44>)
 8003358:	f000 f826 	bl	80033a8 <_init>
 800335c:	1b64      	subs	r4, r4, r5
 800335e:	10a4      	asrs	r4, r4, #2
 8003360:	2600      	movs	r6, #0
 8003362:	42a6      	cmp	r6, r4
 8003364:	d105      	bne.n	8003372 <__libc_init_array+0x2e>
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	f855 3b04 	ldr.w	r3, [r5], #4
 800336c:	4798      	blx	r3
 800336e:	3601      	adds	r6, #1
 8003370:	e7ee      	b.n	8003350 <__libc_init_array+0xc>
 8003372:	f855 3b04 	ldr.w	r3, [r5], #4
 8003376:	4798      	blx	r3
 8003378:	3601      	adds	r6, #1
 800337a:	e7f2      	b.n	8003362 <__libc_init_array+0x1e>
 800337c:	0800369c 	.word	0x0800369c
 8003380:	0800369c 	.word	0x0800369c
 8003384:	0800369c 	.word	0x0800369c
 8003388:	080036a0 	.word	0x080036a0

0800338c <memcpy>:
 800338c:	440a      	add	r2, r1
 800338e:	4291      	cmp	r1, r2
 8003390:	f100 33ff 	add.w	r3, r0, #4294967295
 8003394:	d100      	bne.n	8003398 <memcpy+0xc>
 8003396:	4770      	bx	lr
 8003398:	b510      	push	{r4, lr}
 800339a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800339e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033a2:	4291      	cmp	r1, r2
 80033a4:	d1f9      	bne.n	800339a <memcpy+0xe>
 80033a6:	bd10      	pop	{r4, pc}

080033a8 <_init>:
 80033a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033aa:	bf00      	nop
 80033ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ae:	bc08      	pop	{r3}
 80033b0:	469e      	mov	lr, r3
 80033b2:	4770      	bx	lr

080033b4 <_fini>:
 80033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b6:	bf00      	nop
 80033b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ba:	bc08      	pop	{r3}
 80033bc:	469e      	mov	lr, r3
 80033be:	4770      	bx	lr
