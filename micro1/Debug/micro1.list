
micro1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031cc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003664  08003664  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003664  08003664  00013664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800366c  0800366c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800366c  0800366c  0001366c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003670  08003670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08003680  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08003680  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c5f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a82  00000000  00000000  00029cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000820  00000000  00000000  0002b760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000638  00000000  00000000  0002bf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021364  00000000  00000000  0002c5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000acc7  00000000  00000000  0004d91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca22e  00000000  00000000  000585e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020c0  00000000  00000000  00122814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001248d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003378 	.word	0x08003378

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003378 	.word	0x08003378

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b970 	b.w	800050c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	460d      	mov	r5, r1
 800024c:	4604      	mov	r4, r0
 800024e:	460f      	mov	r7, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4694      	mov	ip, r2
 8000258:	d965      	bls.n	8000326 <__udivmoddi4+0xe2>
 800025a:	fab2 f382 	clz	r3, r2
 800025e:	b143      	cbz	r3, 8000272 <__udivmoddi4+0x2e>
 8000260:	fa02 fc03 	lsl.w	ip, r2, r3
 8000264:	f1c3 0220 	rsb	r2, r3, #32
 8000268:	409f      	lsls	r7, r3
 800026a:	fa20 f202 	lsr.w	r2, r0, r2
 800026e:	4317      	orrs	r7, r2
 8000270:	409c      	lsls	r4, r3
 8000272:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000276:	fa1f f58c 	uxth.w	r5, ip
 800027a:	fbb7 f1fe 	udiv	r1, r7, lr
 800027e:	0c22      	lsrs	r2, r4, #16
 8000280:	fb0e 7711 	mls	r7, lr, r1, r7
 8000284:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000288:	fb01 f005 	mul.w	r0, r1, r5
 800028c:	4290      	cmp	r0, r2
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000290:	eb1c 0202 	adds.w	r2, ip, r2
 8000294:	f101 37ff 	add.w	r7, r1, #4294967295
 8000298:	f080 811c 	bcs.w	80004d4 <__udivmoddi4+0x290>
 800029c:	4290      	cmp	r0, r2
 800029e:	f240 8119 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002a2:	3902      	subs	r1, #2
 80002a4:	4462      	add	r2, ip
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	b2a4      	uxth	r4, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b6:	fb00 f505 	mul.w	r5, r0, r5
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x90>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x294>
 80002ca:	42a5      	cmp	r5, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x294>
 80002d0:	4464      	add	r4, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d8:	1b64      	subs	r4, r4, r5
 80002da:	2100      	movs	r1, #0
 80002dc:	b11e      	cbz	r6, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40dc      	lsrs	r4, r3
 80002e0:	2300      	movs	r3, #0
 80002e2:	e9c6 4300 	strd	r4, r3, [r6]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0xbc>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80ed 	beq.w	80004ce <__udivmoddi4+0x28a>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e9c6 0500 	strd	r0, r5, [r6]
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	d149      	bne.n	800039c <__udivmoddi4+0x158>
 8000308:	42ab      	cmp	r3, r5
 800030a:	d302      	bcc.n	8000312 <__udivmoddi4+0xce>
 800030c:	4282      	cmp	r2, r0
 800030e:	f200 80f8 	bhi.w	8000502 <__udivmoddi4+0x2be>
 8000312:	1a84      	subs	r4, r0, r2
 8000314:	eb65 0203 	sbc.w	r2, r5, r3
 8000318:	2001      	movs	r0, #1
 800031a:	4617      	mov	r7, r2
 800031c:	2e00      	cmp	r6, #0
 800031e:	d0e2      	beq.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	e9c6 4700 	strd	r4, r7, [r6]
 8000324:	e7df      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000326:	b902      	cbnz	r2, 800032a <__udivmoddi4+0xe6>
 8000328:	deff      	udf	#255	; 0xff
 800032a:	fab2 f382 	clz	r3, r2
 800032e:	2b00      	cmp	r3, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x210>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	2101      	movs	r1, #1
 8000340:	fbb2 f5f7 	udiv	r5, r2, r7
 8000344:	fb07 2015 	mls	r0, r7, r5, r2
 8000348:	0c22      	lsrs	r2, r4, #16
 800034a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034e:	fb0e f005 	mul.w	r0, lr, r5
 8000352:	4290      	cmp	r0, r2
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x124>
 8000356:	eb1c 0202 	adds.w	r2, ip, r2
 800035a:	f105 38ff 	add.w	r8, r5, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4290      	cmp	r0, r2
 8000362:	f200 80cb 	bhi.w	80004fc <__udivmoddi4+0x2b8>
 8000366:	4645      	mov	r5, r8
 8000368:	1a12      	subs	r2, r2, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000370:	fb07 2210 	mls	r2, r7, r0, r2
 8000374:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000378:	fb0e fe00 	mul.w	lr, lr, r0
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x14e>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x14c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f200 80bb 	bhi.w	8000506 <__udivmoddi4+0x2c2>
 8000390:	4610      	mov	r0, r2
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039a:	e79f      	b.n	80002dc <__udivmoddi4+0x98>
 800039c:	f1c1 0720 	rsb	r7, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003aa:	fa05 f401 	lsl.w	r4, r5, r1
 80003ae:	fa20 f307 	lsr.w	r3, r0, r7
 80003b2:	40fd      	lsrs	r5, r7
 80003b4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fbb5 f8f9 	udiv	r8, r5, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 5518 	mls	r5, r9, r8, r5
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003cc:	fb08 f50e 	mul.w	r5, r8, lr
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	fa00 f001 	lsl.w	r0, r0, r1
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e4:	f080 8088 	bcs.w	80004f8 <__udivmoddi4+0x2b4>
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	f240 8085 	bls.w	80004f8 <__udivmoddi4+0x2b4>
 80003ee:	f1a8 0802 	sub.w	r8, r8, #2
 80003f2:	4464      	add	r4, ip
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	b29d      	uxth	r5, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f103 35ff 	add.w	r5, r3, #4294967295
 8000414:	d26c      	bcs.n	80004f0 <__udivmoddi4+0x2ac>
 8000416:	45a6      	cmp	lr, r4
 8000418:	d96a      	bls.n	80004f0 <__udivmoddi4+0x2ac>
 800041a:	3b02      	subs	r3, #2
 800041c:	4464      	add	r4, ip
 800041e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000422:	fba3 9502 	umull	r9, r5, r3, r2
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	42ac      	cmp	r4, r5
 800042c:	46c8      	mov	r8, r9
 800042e:	46ae      	mov	lr, r5
 8000430:	d356      	bcc.n	80004e0 <__udivmoddi4+0x29c>
 8000432:	d053      	beq.n	80004dc <__udivmoddi4+0x298>
 8000434:	b156      	cbz	r6, 800044c <__udivmoddi4+0x208>
 8000436:	ebb0 0208 	subs.w	r2, r0, r8
 800043a:	eb64 040e 	sbc.w	r4, r4, lr
 800043e:	fa04 f707 	lsl.w	r7, r4, r7
 8000442:	40ca      	lsrs	r2, r1
 8000444:	40cc      	lsrs	r4, r1
 8000446:	4317      	orrs	r7, r2
 8000448:	e9c6 7400 	strd	r7, r4, [r6]
 800044c:	4618      	mov	r0, r3
 800044e:	2100      	movs	r1, #0
 8000450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000454:	f1c3 0120 	rsb	r1, r3, #32
 8000458:	fa02 fc03 	lsl.w	ip, r2, r3
 800045c:	fa20 f201 	lsr.w	r2, r0, r1
 8000460:	fa25 f101 	lsr.w	r1, r5, r1
 8000464:	409d      	lsls	r5, r3
 8000466:	432a      	orrs	r2, r5
 8000468:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1510 	mls	r5, r7, r0, r1
 8000478:	0c11      	lsrs	r1, r2, #16
 800047a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047e:	fb00 f50e 	mul.w	r5, r0, lr
 8000482:	428d      	cmp	r5, r1
 8000484:	fa04 f403 	lsl.w	r4, r4, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x258>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000492:	d22f      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 8000494:	428d      	cmp	r5, r1
 8000496:	d92d      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 8000498:	3802      	subs	r0, #2
 800049a:	4461      	add	r1, ip
 800049c:	1b49      	subs	r1, r1, r5
 800049e:	b292      	uxth	r2, r2
 80004a0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a4:	fb07 1115 	mls	r1, r7, r5, r1
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	fb05 f10e 	mul.w	r1, r5, lr
 80004b0:	4291      	cmp	r1, r2
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x282>
 80004b4:	eb1c 0202 	adds.w	r2, ip, r2
 80004b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004bc:	d216      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 80004be:	4291      	cmp	r1, r2
 80004c0:	d914      	bls.n	80004ec <__udivmoddi4+0x2a8>
 80004c2:	3d02      	subs	r5, #2
 80004c4:	4462      	add	r2, ip
 80004c6:	1a52      	subs	r2, r2, r1
 80004c8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004cc:	e738      	b.n	8000340 <__udivmoddi4+0xfc>
 80004ce:	4631      	mov	r1, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xa2>
 80004d4:	4639      	mov	r1, r7
 80004d6:	e6e6      	b.n	80002a6 <__udivmoddi4+0x62>
 80004d8:	4610      	mov	r0, r2
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x90>
 80004dc:	4548      	cmp	r0, r9
 80004de:	d2a9      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004e0:	ebb9 0802 	subs.w	r8, r9, r2
 80004e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e8:	3b01      	subs	r3, #1
 80004ea:	e7a3      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ec:	4645      	mov	r5, r8
 80004ee:	e7ea      	b.n	80004c6 <__udivmoddi4+0x282>
 80004f0:	462b      	mov	r3, r5
 80004f2:	e794      	b.n	800041e <__udivmoddi4+0x1da>
 80004f4:	4640      	mov	r0, r8
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x258>
 80004f8:	46d0      	mov	r8, sl
 80004fa:	e77b      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fc:	3d02      	subs	r5, #2
 80004fe:	4462      	add	r2, ip
 8000500:	e732      	b.n	8000368 <__udivmoddi4+0x124>
 8000502:	4608      	mov	r0, r1
 8000504:	e70a      	b.n	800031c <__udivmoddi4+0xd8>
 8000506:	4464      	add	r4, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e742      	b.n	8000392 <__udivmoddi4+0x14e>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fc08 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f9a4 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 fa64 	bl	80009e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000520:	f000 fa38 	bl	8000994 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000524:	f000 fa0c 	bl	8000940 <MX_DAC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
      /* USER CODE END WHILE */
  	  Switch_Mode();
 8000528:	f000 f81a 	bl	8000560 <Switch_Mode>

  	  //HAL_UART_Receive_IT(&huart2,(uint8_t *) receivedMessage,10);

  	  HAL_UART_Receive(&huart2,(uint8_t *) receivedMessage,10,5000);
 800052c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000530:	220a      	movs	r2, #10
 8000532:	4908      	ldr	r1, [pc, #32]	; (8000554 <main+0x44>)
 8000534:	4808      	ldr	r0, [pc, #32]	; (8000558 <main+0x48>)
 8000536:	f001 fec3 	bl	80022c0 <HAL_UART_Receive>
  	  Switch_Mode();
 800053a:	f000 f811 	bl	8000560 <Switch_Mode>
  	  convertToMorse(receivedMessage, morseCode, sizeof(morseCode));
 800053e:	2232      	movs	r2, #50	; 0x32
 8000540:	4906      	ldr	r1, [pc, #24]	; (800055c <main+0x4c>)
 8000542:	4804      	ldr	r0, [pc, #16]	; (8000554 <main+0x44>)
 8000544:	f000 f846 	bl	80005d4 <convertToMorse>

  	  transmitMorse(morseCode,GPIO_PIN_7);
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	4804      	ldr	r0, [pc, #16]	; (800055c <main+0x4c>)
 800054c:	f000 f914 	bl	8000778 <transmitMorse>
  	  Switch_Mode();
 8000550:	e7ea      	b.n	8000528 <main+0x18>
 8000552:	bf00      	nop
 8000554:	2000002c 	.word	0x2000002c
 8000558:	20000080 	.word	0x20000080
 800055c:	20000038 	.word	0x20000038

08000560 <Switch_Mode>:
  	  /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void Switch_Mode(void){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 && mode == 0){
 8000564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000568:	4817      	ldr	r0, [pc, #92]	; (80005c8 <Switch_Mode+0x68>)
 800056a:	f001 f825 	bl	80015b8 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d10b      	bne.n	800058c <Switch_Mode+0x2c>
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <Switch_Mode+0x6c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d107      	bne.n	800058c <Switch_Mode+0x2c>
		mode = 1;
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <Switch_Mode+0x6c>)
 800057e:	2201      	movs	r2, #1
 8000580:	601a      	str	r2, [r3, #0]
		HAL_Delay(500);
 8000582:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000586:	f000 fc41 	bl	8000e0c <HAL_Delay>
 800058a:	e012      	b.n	80005b2 <Switch_Mode+0x52>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 && mode == 1){
 800058c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <Switch_Mode+0x68>)
 8000592:	f001 f811 	bl	80015b8 <HAL_GPIO_ReadPin>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d10a      	bne.n	80005b2 <Switch_Mode+0x52>
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <Switch_Mode+0x6c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d106      	bne.n	80005b2 <Switch_Mode+0x52>
		mode = 0;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <Switch_Mode+0x6c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
		HAL_Delay(500);
 80005aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ae:	f000 fc2d 	bl	8000e0c <HAL_Delay>
	}
	if(mode == 1){
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <Switch_Mode+0x6c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d103      	bne.n	80005c2 <Switch_Mode+0x62>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005ba:	2120      	movs	r1, #32
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <Switch_Mode+0x70>)
 80005be:	f001 f82c 	bl	800161a <HAL_GPIO_TogglePin>
	}
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020800 	.word	0x40020800
 80005cc:	20000028 	.word	0x20000028
 80005d0:	40020000 	.word	0x40020000

080005d4 <convertToMorse>:

void convertToMorse(char* message, char* morseCode, int maxLength)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b0ae      	sub	sp, #184	; 0xb8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
    // Define the Morse code alphabet
    const char* morseAlphabet[] = {   "......", ".....-", "....-.", "....--", "...-..", "...-.-", "...--.", "...---", "..-...", "..-..-",
 80005e0:	4a61      	ldr	r2, [pc, #388]	; (8000768 <convertToMorse+0x194>)
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4611      	mov	r1, r2
 80005e8:	2290      	movs	r2, #144	; 0x90
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 feb6 	bl	800335c <memcpy>
		    "..-.-.", "..-.--", "..--..", "..--.-", "..----", ".-....", ".-...-", ".-..-.", ".-..--", ".-.-..",
		    ".-.-.-", ".-.--.", ".-.---", ".--...", ".--..-", ".--.-.", ".--.--", ".---..", ".---.-", ".----.",
		    ".-----", "-.....", "-....-", "-...-.", "-...--", "-..-.."};

    // Iterate through the message characters
    int morseIndex = 0; // Index to write into the morseCode array
 80005f0:	2300      	movs	r3, #0
 80005f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    for (int i = 0; message[i] != '\0' && morseIndex < maxLength - 5; i++) { // Adjusted to avoid buffer overflow
 80005f6:	2300      	movs	r3, #0
 80005f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80005fc:	e0a1      	b.n	8000742 <convertToMorse+0x16e>
        // Get the uppercase representation of the character
        char uppercaseChar = toupper(message[i]);
 80005fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	4413      	add	r3, r2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800060c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000610:	3301      	adds	r3, #1
 8000612:	4a56      	ldr	r2, [pc, #344]	; (800076c <convertToMorse+0x198>)
 8000614:	4413      	add	r3, r2
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f003 0303 	and.w	r3, r3, #3
 800061c:	2b02      	cmp	r3, #2
 800061e:	d103      	bne.n	8000628 <convertToMorse+0x54>
 8000620:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000624:	3b20      	subs	r3, #32
 8000626:	e001      	b.n	800062c <convertToMorse+0x58>
 8000628:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800062c:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae

        // If it's a space, add a space to the Morse code
        if (uppercaseChar == ' ') {
 8000630:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000634:	2b20      	cmp	r3, #32
 8000636:	d10f      	bne.n	8000658 <convertToMorse+0x84>
            strcat(morseCode, " / "); // Use '/' to represent word spacing
 8000638:	68b8      	ldr	r0, [r7, #8]
 800063a:	f7ff fde3 	bl	8000204 <strlen>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	4413      	add	r3, r2
 8000646:	4a4a      	ldr	r2, [pc, #296]	; (8000770 <convertToMorse+0x19c>)
 8000648:	6810      	ldr	r0, [r2, #0]
 800064a:	6018      	str	r0, [r3, #0]
            morseIndex += 3; // Move to the next position in morseCode
 800064c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000650:	3303      	adds	r3, #3
 8000652:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000656:	e06f      	b.n	8000738 <convertToMorse+0x164>
        }
        else if (isalnum(uppercaseChar)) {
 8000658:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800065c:	3301      	adds	r3, #1
 800065e:	4a43      	ldr	r2, [pc, #268]	; (800076c <convertToMorse+0x198>)
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	f003 0307 	and.w	r3, r3, #7
 8000668:	2b00      	cmp	r3, #0
 800066a:	d065      	beq.n	8000738 <convertToMorse+0x164>
            // Check if it's an alphanumeric character
            if (isalpha(uppercaseChar)) {
 800066c:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000670:	3301      	adds	r3, #1
 8000672:	4a3e      	ldr	r2, [pc, #248]	; (800076c <convertToMorse+0x198>)
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	f003 0303 	and.w	r3, r3, #3
 800067c:	2b00      	cmp	r3, #0
 800067e:	d020      	beq.n	80006c2 <convertToMorse+0xee>
                // Convert letters to Morse code
                int index = uppercaseChar - 'A'; // Index for Morse code lookup
 8000680:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000684:	3b41      	subs	r3, #65	; 0x41
 8000686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                strcat(morseCode, morseAlphabet[index]);
 800068a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	33b8      	adds	r3, #184	; 0xb8
 8000692:	443b      	add	r3, r7
 8000694:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8000698:	4619      	mov	r1, r3
 800069a:	68b8      	ldr	r0, [r7, #8]
 800069c:	f002 fe2a 	bl	80032f4 <strcat>
                morseIndex += strlen(morseAlphabet[index]); // Move to the next position in morseCode
 80006a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	33b8      	adds	r3, #184	; 0xb8
 80006a8:	443b      	add	r3, r7
 80006aa:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fda8 	bl	8000204 <strlen>
 80006b4:	4602      	mov	r2, r0
 80006b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80006ba:	4413      	add	r3, r2
 80006bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80006c0:	e029      	b.n	8000716 <convertToMorse+0x142>
            } else if (isdigit(uppercaseChar)) {
 80006c2:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80006c6:	3301      	adds	r3, #1
 80006c8:	4a28      	ldr	r2, [pc, #160]	; (800076c <convertToMorse+0x198>)
 80006ca:	4413      	add	r3, r2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d01f      	beq.n	8000716 <convertToMorse+0x142>
                // Convert digits to Morse code
                int index = uppercaseChar - '0' + 26; // Index for Morse code lookup
 80006d6:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80006da:	3b16      	subs	r3, #22
 80006dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                strcat(morseCode, morseAlphabet[index]);
 80006e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	33b8      	adds	r3, #184	; 0xb8
 80006e8:	443b      	add	r3, r7
 80006ea:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80006ee:	4619      	mov	r1, r3
 80006f0:	68b8      	ldr	r0, [r7, #8]
 80006f2:	f002 fdff 	bl	80032f4 <strcat>
                morseIndex += strlen(morseAlphabet[index]); // Move to the next position in morseCode
 80006f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	33b8      	adds	r3, #184	; 0xb8
 80006fe:	443b      	add	r3, r7
 8000700:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fd7d 	bl	8000204 <strlen>
 800070a:	4602      	mov	r2, r0
 800070c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000710:	4413      	add	r3, r2
 8000712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            }
            // Add a space after each Morse code character
            strcat(morseCode, " ");
 8000716:	68b8      	ldr	r0, [r7, #8]
 8000718:	f7ff fd74 	bl	8000204 <strlen>
 800071c:	4603      	mov	r3, r0
 800071e:	461a      	mov	r2, r3
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	4413      	add	r3, r2
 8000724:	4913      	ldr	r1, [pc, #76]	; (8000774 <convertToMorse+0x1a0>)
 8000726:	461a      	mov	r2, r3
 8000728:	460b      	mov	r3, r1
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	8013      	strh	r3, [r2, #0]
            morseIndex += 1; // Move to the next position in morseCode
 800072e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000732:	3301      	adds	r3, #1
 8000734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    for (int i = 0; message[i] != '\0' && morseIndex < maxLength - 5; i++) { // Adjusted to avoid buffer overflow
 8000738:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800073c:	3301      	adds	r3, #1
 800073e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000742:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d006      	beq.n	800075e <convertToMorse+0x18a>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b05      	subs	r3, #5
 8000754:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000758:	429a      	cmp	r2, r3
 800075a:	f6ff af50 	blt.w	80005fe <convertToMorse+0x2a>
        }
    }
    //HAL_Delay(3000);
}
 800075e:	bf00      	nop
 8000760:	37b8      	adds	r7, #184	; 0xb8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	080034b8 	.word	0x080034b8
 800076c:	08003560 	.word	0x08003560
 8000770:	08003390 	.word	0x08003390
 8000774:	08003394 	.word	0x08003394

08000778 <transmitMorse>:

void transmitMorse(char* morseCode,uint16_t pin){
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	807b      	strh	r3, [r7, #2]
    // Implement Morse code transmission logic here
    // You need to control the buzzer to produce the Morse code signals
    // Adjust the delay according to Morse code timing

    int i = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
    while (morseCode[i] != '\0') {
 8000788:	e04c      	b.n	8000824 <transmitMorse+0xac>
        if (morseCode[i] == '.') {
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b2e      	cmp	r3, #46	; 0x2e
 8000794:	d113      	bne.n	80007be <transmitMorse+0x46>
            HAL_GPIO_WritePin(GPIOA, pin, GPIO_PIN_SET); // Turn on buzzer for dot
 8000796:	887b      	ldrh	r3, [r7, #2]
 8000798:	2201      	movs	r2, #1
 800079a:	4619      	mov	r1, r3
 800079c:	4827      	ldr	r0, [pc, #156]	; (800083c <transmitMorse+0xc4>)
 800079e:	f000 ff23 	bl	80015e8 <HAL_GPIO_WritePin>
            HAL_Delay(100); // Adjust delay for dot
 80007a2:	2064      	movs	r0, #100	; 0x64
 80007a4:	f000 fb32 	bl	8000e0c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, pin, GPIO_PIN_RESET); // Turn off buzzer
 80007a8:	887b      	ldrh	r3, [r7, #2]
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	4823      	ldr	r0, [pc, #140]	; (800083c <transmitMorse+0xc4>)
 80007b0:	f000 ff1a 	bl	80015e8 <HAL_GPIO_WritePin>
            HAL_Delay(500); // Delay between dot and next signal
 80007b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b8:	f000 fb28 	bl	8000e0c <HAL_Delay>
 80007bc:	e02f      	b.n	800081e <transmitMorse+0xa6>
        } else if (morseCode[i] == '-') {
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b2d      	cmp	r3, #45	; 0x2d
 80007c8:	d114      	bne.n	80007f4 <transmitMorse+0x7c>
            HAL_GPIO_WritePin(GPIOA, pin, GPIO_PIN_SET); // Turn on buzzer for dash
 80007ca:	887b      	ldrh	r3, [r7, #2]
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	481a      	ldr	r0, [pc, #104]	; (800083c <transmitMorse+0xc4>)
 80007d2:	f000 ff09 	bl	80015e8 <HAL_GPIO_WritePin>
            HAL_Delay(300); // Adjust delay for dash
 80007d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007da:	f000 fb17 	bl	8000e0c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, pin, GPIO_PIN_RESET); // Turn off buzzer
 80007de:	887b      	ldrh	r3, [r7, #2]
 80007e0:	2200      	movs	r2, #0
 80007e2:	4619      	mov	r1, r3
 80007e4:	4815      	ldr	r0, [pc, #84]	; (800083c <transmitMorse+0xc4>)
 80007e6:	f000 feff 	bl	80015e8 <HAL_GPIO_WritePin>
            HAL_Delay(500); // Delay between dash and next signal
 80007ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ee:	f000 fb0d 	bl	8000e0c <HAL_Delay>
 80007f2:	e014      	b.n	800081e <transmitMorse+0xa6>
        } else if (morseCode[i] == ' ') {
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b20      	cmp	r3, #32
 80007fe:	d104      	bne.n	800080a <transmitMorse+0x92>
            // Delay for character gap
            HAL_Delay(1000); // Adjust delay for character gap
 8000800:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000804:	f000 fb02 	bl	8000e0c <HAL_Delay>
 8000808:	e009      	b.n	800081e <transmitMorse+0xa6>
        } else if (morseCode[i] == '/') {
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b2f      	cmp	r3, #47	; 0x2f
 8000814:	d103      	bne.n	800081e <transmitMorse+0xa6>
            // Delay for word gap
            HAL_Delay(700); // Adjust delay for word gap
 8000816:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800081a:	f000 faf7 	bl	8000e0c <HAL_Delay>
        }
        i++;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	3301      	adds	r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
    while (morseCode[i] != '\0') {
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1ac      	bne.n	800078a <transmitMorse+0x12>
    }
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40020000 	.word	0x40020000

08000840 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, (uint8_t *) receivedMessage, 10);
 8000848:	220a      	movs	r2, #10
 800084a:	4904      	ldr	r1, [pc, #16]	; (800085c <HAL_UART_RxCpltCallback+0x1c>)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <HAL_UART_RxCpltCallback+0x20>)
 800084e:	f001 fdce 	bl	80023ee <HAL_UART_Receive_IT>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000002c 	.word	0x2000002c
 8000860:	20000080 	.word	0x20000080

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2234      	movs	r2, #52	; 0x34
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fd36 	bl	80032e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <SystemClock_Config+0xd4>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a29      	ldr	r2, [pc, #164]	; (8000938 <SystemClock_Config+0xd4>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b27      	ldr	r3, [pc, #156]	; (8000938 <SystemClock_Config+0xd4>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	4b24      	ldr	r3, [pc, #144]	; (800093c <SystemClock_Config+0xd8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b0:	4a22      	ldr	r2, [pc, #136]	; (800093c <SystemClock_Config+0xd8>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b20      	ldr	r3, [pc, #128]	; (800093c <SystemClock_Config+0xd8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2310      	movs	r3, #16
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008d8:	2310      	movs	r3, #16
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008e2:	2304      	movs	r3, #4
 80008e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 f9f6 	bl	8001ce4 <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008fe:	f000 f8e1 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000906:	2302      	movs	r3, #2
 8000908:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	2102      	movs	r1, #2
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fe96 	bl	8001650 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800092a:	f000 f8cb 	bl	8000ac4 <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	3750      	adds	r7, #80	; 0x50
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40007000 	.word	0x40007000

08000940 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_DAC_Init+0x4c>)
 8000950:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <MX_DAC_Init+0x50>)
 8000952:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <MX_DAC_Init+0x4c>)
 8000956:	f000 fb8e 	bl	8001076 <HAL_DAC_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000960:	f000 f8b0 	bl	8000ac4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000964:	2300      	movs	r3, #0
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <MX_DAC_Init+0x4c>)
 8000974:	f000 fba1 	bl	80010ba <HAL_DAC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800097e:	f000 f8a1 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000006c 	.word	0x2000006c
 8000990:	40007400 	.word	0x40007400

08000994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <MX_USART2_UART_Init+0x50>)
 800099c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009cc:	f001 fc28 	bl	8002220 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009d6:	f000 f875 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000080 	.word	0x20000080
 80009e4:	40004400 	.word	0x40004400

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a2c      	ldr	r2, [pc, #176]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a25      	ldr	r2, [pc, #148]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	21e0      	movs	r1, #224	; 0xe0
 8000a72:	4812      	ldr	r0, [pc, #72]	; (8000abc <MX_GPIO_Init+0xd4>)
 8000a74:	f000 fdb8 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <MX_GPIO_Init+0xd8>)
 8000a8e:	f000 fbff 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a92:	23e0      	movs	r3, #224	; 0xe0
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_GPIO_Init+0xd4>)
 8000aaa:	f000 fbf1 	bl	8001290 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	; 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020800 	.word	0x40020800

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	e7fe      	b.n	8000acc <Error_Handler+0x8>
	...

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b0e:	2007      	movs	r0, #7
 8000b10:	f000 fa70 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_DAC_MspInit+0x7c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d127      	bne.n	8000b92 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <HAL_DAC_MspInit+0x80>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <HAL_DAC_MspInit+0x80>)
 8000b4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <HAL_DAC_MspInit+0x80>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_DAC_MspInit+0x80>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_DAC_MspInit+0x80>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_DAC_MspInit+0x80>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_DAC_MspInit+0x84>)
 8000b8e:	f000 fb7f 	bl	8001290 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40007400 	.word	0x40007400
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <HAL_UART_MspInit+0x94>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d133      	bne.n	8000c32 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c02:	230c      	movs	r3, #12
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c12:	2307      	movs	r3, #7
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4809      	ldr	r0, [pc, #36]	; (8000c44 <HAL_UART_MspInit+0x9c>)
 8000c1e:	f000 fb37 	bl	8001290 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2026      	movs	r0, #38	; 0x26
 8000c28:	f000 f9ef 	bl	800100a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c2c:	2026      	movs	r0, #38	; 0x26
 8000c2e:	f000 fa08 	bl	8001042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f89a 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <USART2_IRQHandler+0x10>)
 8000ca2:	f001 fbc9 	bl	8002438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000080 	.word	0x20000080

08000cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <SystemInit+0x20>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <SystemInit+0x20>)
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cd8:	f7ff ffea 	bl	8000cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cde:	490d      	ldr	r1, [pc, #52]	; (8000d14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf4:	4c0a      	ldr	r4, [pc, #40]	; (8000d20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d02:	f002 fb07 	bl	8003314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d06:	f7ff fc03 	bl	8000510 <main>
  bx  lr    
 8000d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d18:	08003674 	.word	0x08003674
  ldr r2, =_sbss
 8000d1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d20:	200000cc 	.word	0x200000cc

08000d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC_IRQHandler>
	...

08000d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <HAL_Init+0x40>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_Init+0x40>)
 8000d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <HAL_Init+0x40>)
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f000 f94f 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 f808 	bl	8000d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5c:	f7ff feb8 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023c00 	.word	0x40023c00

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x54>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x58>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f967 	bl	800105e <HAL_SYSTICK_Config>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00e      	b.n	8000db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d80a      	bhi.n	8000db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f000 f92f 	bl	800100a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <HAL_InitTick+0x5c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008
 8000df0:	200000c8 	.word	0x200000c8

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200000c8 	.word	0x200000c8

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff ffee 	bl	8000df4 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_Delay+0x44>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffde 	bl	8000df4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <__NVIC_EnableIRQ+0x38>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	; (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	; (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	; 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	210f      	movs	r1, #15
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f7ff ff8e 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff29 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800101c:	f7ff ff3e 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8001020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	6978      	ldr	r0, [r7, #20]
 8001028:	f7ff ff8e 	bl	8000f48 <NVIC_EncodePriority>
 800102c:	4602      	mov	r2, r0
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff5d 	bl	8000ef4 <__NVIC_SetPriority>
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff31 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffa2 	bl	8000fb0 <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e014      	b.n	80010b2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	791b      	ldrb	r3, [r3, #4]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d105      	bne.n	800109e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff fd41 	bl	8000b20 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2202      	movs	r2, #2
 80010a2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b089      	sub	sp, #36	; 0x24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <HAL_DAC_ConfigChannel+0x1c>
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e042      	b.n	8001160 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	795b      	ldrb	r3, [r3, #5]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d101      	bne.n	80010e6 <HAL_DAC_ConfigChannel+0x2c>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e03c      	b.n	8001160 <HAL_DAC_ConfigChannel+0xa6>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2201      	movs	r2, #1
 80010ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2202      	movs	r2, #2
 80010f0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4313      	orrs	r3, r2
 800111a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6819      	ldr	r1, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	22c0      	movs	r2, #192	; 0xc0
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43da      	mvns	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	400a      	ands	r2, r1
 8001150:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2201      	movs	r2, #1
 8001156:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800115e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3724      	adds	r7, #36	; 0x24
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001178:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800117a:	f7ff fe3b 	bl	8000df4 <HAL_GetTick>
 800117e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d008      	beq.n	800119e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e052      	b.n	8001244 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0216 	bic.w	r2, r2, #22
 80011ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	695a      	ldr	r2, [r3, #20]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d103      	bne.n	80011ce <HAL_DMA_Abort+0x62>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d007      	beq.n	80011de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0208 	bic.w	r2, r2, #8
 80011dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0201 	bic.w	r2, r2, #1
 80011ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ee:	e013      	b.n	8001218 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011f0:	f7ff fe00 	bl	8000df4 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	d90c      	bls.n	8001218 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2220      	movs	r2, #32
 8001202:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2203      	movs	r2, #3
 8001208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e015      	b.n	8001244 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1e4      	bne.n	80011f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122a:	223f      	movs	r2, #63	; 0x3f
 800122c:	409a      	lsls	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d004      	beq.n	800126a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2280      	movs	r2, #128	; 0x80
 8001264:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e00c      	b.n	8001284 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2205      	movs	r2, #5
 800126e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0201 	bic.w	r2, r2, #1
 8001280:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	e165      	b.n	8001578 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012ac:	2201      	movs	r2, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	f040 8154 	bne.w	8001572 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d005      	beq.n	80012e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d130      	bne.n	8001344 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001318:	2201      	movs	r2, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0201 	and.w	r2, r3, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b03      	cmp	r3, #3
 800134e:	d017      	beq.n	8001380 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d123      	bne.n	80013d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	69b9      	ldr	r1, [r7, #24]
 80013d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0203 	and.w	r2, r3, #3
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80ae 	beq.w	8001572 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <HAL_GPIO_Init+0x300>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a5c      	ldr	r2, [pc, #368]	; (8001590 <HAL_GPIO_Init+0x300>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b5a      	ldr	r3, [pc, #360]	; (8001590 <HAL_GPIO_Init+0x300>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001432:	4a58      	ldr	r2, [pc, #352]	; (8001594 <HAL_GPIO_Init+0x304>)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	220f      	movs	r2, #15
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4f      	ldr	r2, [pc, #316]	; (8001598 <HAL_GPIO_Init+0x308>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d025      	beq.n	80014aa <HAL_GPIO_Init+0x21a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4e      	ldr	r2, [pc, #312]	; (800159c <HAL_GPIO_Init+0x30c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d01f      	beq.n	80014a6 <HAL_GPIO_Init+0x216>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a4d      	ldr	r2, [pc, #308]	; (80015a0 <HAL_GPIO_Init+0x310>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d019      	beq.n	80014a2 <HAL_GPIO_Init+0x212>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4c      	ldr	r2, [pc, #304]	; (80015a4 <HAL_GPIO_Init+0x314>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d013      	beq.n	800149e <HAL_GPIO_Init+0x20e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4b      	ldr	r2, [pc, #300]	; (80015a8 <HAL_GPIO_Init+0x318>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d00d      	beq.n	800149a <HAL_GPIO_Init+0x20a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4a      	ldr	r2, [pc, #296]	; (80015ac <HAL_GPIO_Init+0x31c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d007      	beq.n	8001496 <HAL_GPIO_Init+0x206>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a49      	ldr	r2, [pc, #292]	; (80015b0 <HAL_GPIO_Init+0x320>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d101      	bne.n	8001492 <HAL_GPIO_Init+0x202>
 800148e:	2306      	movs	r3, #6
 8001490:	e00c      	b.n	80014ac <HAL_GPIO_Init+0x21c>
 8001492:	2307      	movs	r3, #7
 8001494:	e00a      	b.n	80014ac <HAL_GPIO_Init+0x21c>
 8001496:	2305      	movs	r3, #5
 8001498:	e008      	b.n	80014ac <HAL_GPIO_Init+0x21c>
 800149a:	2304      	movs	r3, #4
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x21c>
 800149e:	2303      	movs	r3, #3
 80014a0:	e004      	b.n	80014ac <HAL_GPIO_Init+0x21c>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e002      	b.n	80014ac <HAL_GPIO_Init+0x21c>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_GPIO_Init+0x21c>
 80014aa:	2300      	movs	r3, #0
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	f002 0203 	and.w	r2, r2, #3
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	4093      	lsls	r3, r2
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014bc:	4935      	ldr	r1, [pc, #212]	; (8001594 <HAL_GPIO_Init+0x304>)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <HAL_GPIO_Init+0x324>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ee:	4a31      	ldr	r2, [pc, #196]	; (80015b4 <HAL_GPIO_Init+0x324>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_GPIO_Init+0x324>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001518:	4a26      	ldr	r2, [pc, #152]	; (80015b4 <HAL_GPIO_Init+0x324>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800151e:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <HAL_GPIO_Init+0x324>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <HAL_GPIO_Init+0x324>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <HAL_GPIO_Init+0x324>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800156c:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <HAL_GPIO_Init+0x324>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3301      	adds	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	2b0f      	cmp	r3, #15
 800157c:	f67f ae96 	bls.w	80012ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3724      	adds	r7, #36	; 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40013800 	.word	0x40013800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40021400 	.word	0x40021400
 80015b0:	40021800 	.word	0x40021800
 80015b4:	40013c00 	.word	0x40013c00

080015b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	887b      	ldrh	r3, [r7, #2]
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e001      	b.n	80015da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
 80015f4:	4613      	mov	r3, r2
 80015f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f8:	787b      	ldrb	r3, [r7, #1]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001604:	e003      	b.n	800160e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	041a      	lsls	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	619a      	str	r2, [r3, #24]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800161a:	b480      	push	{r7}
 800161c:	b085      	sub	sp, #20
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	460b      	mov	r3, r1
 8001624:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800162c:	887a      	ldrh	r2, [r7, #2]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4013      	ands	r3, r2
 8001632:	041a      	lsls	r2, r3, #16
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43d9      	mvns	r1, r3
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	400b      	ands	r3, r1
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	619a      	str	r2, [r3, #24]
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0cc      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001664:	4b68      	ldr	r3, [pc, #416]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d90c      	bls.n	800168c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b65      	ldr	r3, [pc, #404]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b63      	ldr	r3, [pc, #396]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0b8      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d020      	beq.n	80016da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a4:	4b59      	ldr	r3, [pc, #356]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4a58      	ldr	r2, [pc, #352]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016bc:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4a52      	ldr	r2, [pc, #328]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c8:	4b50      	ldr	r3, [pc, #320]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	494d      	ldr	r1, [pc, #308]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d044      	beq.n	8001770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d119      	bne.n	800172e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e07f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d003      	beq.n	800170e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170a:	2b03      	cmp	r3, #3
 800170c:	d107      	bne.n	800171e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170e:	4b3f      	ldr	r3, [pc, #252]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e06f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e067      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f023 0203 	bic.w	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4934      	ldr	r1, [pc, #208]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	4313      	orrs	r3, r2
 800173e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001740:	f7ff fb58 	bl	8000df4 <HAL_GetTick>
 8001744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	e00a      	b.n	800175e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001748:	f7ff fb54 	bl	8000df4 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	; 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e04f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175e:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 020c 	and.w	r2, r3, #12
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	429a      	cmp	r2, r3
 800176e:	d1eb      	bne.n	8001748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d20c      	bcs.n	8001798 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177e:	4b22      	ldr	r3, [pc, #136]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e032      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	4916      	ldr	r1, [pc, #88]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d009      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	490e      	ldr	r1, [pc, #56]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017d6:	f000 f855 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 80017da:	4602      	mov	r2, r0
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	490a      	ldr	r1, [pc, #40]	; (8001810 <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	5ccb      	ldrb	r3, [r1, r3]
 80017ea:	fa22 f303 	lsr.w	r3, r2, r3
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_RCC_ClockConfig+0x1c8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fab8 	bl	8000d6c <HAL_InitTick>

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00
 800180c:	40023800 	.word	0x40023800
 8001810:	08003548 	.word	0x08003548
 8001814:	20000000 	.word	0x20000000
 8001818:	20000004 	.word	0x20000004

0800181c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_RCC_GetHCLKFreq+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000000 	.word	0x20000000

08001834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001838:	f7ff fff0 	bl	800181c <HAL_RCC_GetHCLKFreq>
 800183c:	4602      	mov	r2, r0
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	0a9b      	lsrs	r3, r3, #10
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	4903      	ldr	r1, [pc, #12]	; (8001858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800184a:	5ccb      	ldrb	r3, [r1, r3]
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001850:	4618      	mov	r0, r3
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	08003558 	.word	0x08003558

0800185c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001860:	f7ff ffdc 	bl	800181c <HAL_RCC_GetHCLKFreq>
 8001864:	4602      	mov	r2, r0
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	0b5b      	lsrs	r3, r3, #13
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	4903      	ldr	r1, [pc, #12]	; (8001880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001872:	5ccb      	ldrb	r3, [r1, r3]
 8001874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001878:	4618      	mov	r0, r3
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	08003558 	.word	0x08003558

08001884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001888:	b0ae      	sub	sp, #184	; 0xb8
 800188a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018aa:	4bcb      	ldr	r3, [pc, #812]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	f200 8206 	bhi.w	8001cc4 <HAL_RCC_GetSysClockFreq+0x440>
 80018b8:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80018ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018be:	bf00      	nop
 80018c0:	080018f5 	.word	0x080018f5
 80018c4:	08001cc5 	.word	0x08001cc5
 80018c8:	08001cc5 	.word	0x08001cc5
 80018cc:	08001cc5 	.word	0x08001cc5
 80018d0:	080018fd 	.word	0x080018fd
 80018d4:	08001cc5 	.word	0x08001cc5
 80018d8:	08001cc5 	.word	0x08001cc5
 80018dc:	08001cc5 	.word	0x08001cc5
 80018e0:	08001905 	.word	0x08001905
 80018e4:	08001cc5 	.word	0x08001cc5
 80018e8:	08001cc5 	.word	0x08001cc5
 80018ec:	08001cc5 	.word	0x08001cc5
 80018f0:	08001af5 	.word	0x08001af5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f4:	4bb9      	ldr	r3, [pc, #740]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x358>)
 80018f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80018fa:	e1e7      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018fc:	4bb8      	ldr	r3, [pc, #736]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80018fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001902:	e1e3      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001904:	4bb4      	ldr	r3, [pc, #720]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800190c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001910:	4bb1      	ldr	r3, [pc, #708]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d071      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191c:	4bae      	ldr	r3, [pc, #696]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	099b      	lsrs	r3, r3, #6
 8001922:	2200      	movs	r2, #0
 8001924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001928:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800192c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001934:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800193e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001942:	4622      	mov	r2, r4
 8001944:	462b      	mov	r3, r5
 8001946:	f04f 0000 	mov.w	r0, #0
 800194a:	f04f 0100 	mov.w	r1, #0
 800194e:	0159      	lsls	r1, r3, #5
 8001950:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001954:	0150      	lsls	r0, r2, #5
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4621      	mov	r1, r4
 800195c:	1a51      	subs	r1, r2, r1
 800195e:	6439      	str	r1, [r7, #64]	; 0x40
 8001960:	4629      	mov	r1, r5
 8001962:	eb63 0301 	sbc.w	r3, r3, r1
 8001966:	647b      	str	r3, [r7, #68]	; 0x44
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001974:	4649      	mov	r1, r9
 8001976:	018b      	lsls	r3, r1, #6
 8001978:	4641      	mov	r1, r8
 800197a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800197e:	4641      	mov	r1, r8
 8001980:	018a      	lsls	r2, r1, #6
 8001982:	4641      	mov	r1, r8
 8001984:	1a51      	subs	r1, r2, r1
 8001986:	63b9      	str	r1, [r7, #56]	; 0x38
 8001988:	4649      	mov	r1, r9
 800198a:	eb63 0301 	sbc.w	r3, r3, r1
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800199c:	4649      	mov	r1, r9
 800199e:	00cb      	lsls	r3, r1, #3
 80019a0:	4641      	mov	r1, r8
 80019a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019a6:	4641      	mov	r1, r8
 80019a8:	00ca      	lsls	r2, r1, #3
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	4603      	mov	r3, r0
 80019b0:	4622      	mov	r2, r4
 80019b2:	189b      	adds	r3, r3, r2
 80019b4:	633b      	str	r3, [r7, #48]	; 0x30
 80019b6:	462b      	mov	r3, r5
 80019b8:	460a      	mov	r2, r1
 80019ba:	eb42 0303 	adc.w	r3, r2, r3
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019cc:	4629      	mov	r1, r5
 80019ce:	024b      	lsls	r3, r1, #9
 80019d0:	4621      	mov	r1, r4
 80019d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019d6:	4621      	mov	r1, r4
 80019d8:	024a      	lsls	r2, r1, #9
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019e2:	2200      	movs	r2, #0
 80019e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80019e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80019ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80019f0:	f7fe fc10 	bl	8000214 <__aeabi_uldivmod>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4613      	mov	r3, r2
 80019fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80019fe:	e067      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a00:	4b75      	ldr	r3, [pc, #468]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	099b      	lsrs	r3, r3, #6
 8001a06:	2200      	movs	r2, #0
 8001a08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a0c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001a10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a18:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001a22:	4622      	mov	r2, r4
 8001a24:	462b      	mov	r3, r5
 8001a26:	f04f 0000 	mov.w	r0, #0
 8001a2a:	f04f 0100 	mov.w	r1, #0
 8001a2e:	0159      	lsls	r1, r3, #5
 8001a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a34:	0150      	lsls	r0, r2, #5
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	1a51      	subs	r1, r2, r1
 8001a3e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001a40:	4629      	mov	r1, r5
 8001a42:	eb63 0301 	sbc.w	r3, r3, r1
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001a54:	4649      	mov	r1, r9
 8001a56:	018b      	lsls	r3, r1, #6
 8001a58:	4641      	mov	r1, r8
 8001a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a5e:	4641      	mov	r1, r8
 8001a60:	018a      	lsls	r2, r1, #6
 8001a62:	4641      	mov	r1, r8
 8001a64:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a68:	4649      	mov	r1, r9
 8001a6a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a82:	4692      	mov	sl, r2
 8001a84:	469b      	mov	fp, r3
 8001a86:	4623      	mov	r3, r4
 8001a88:	eb1a 0303 	adds.w	r3, sl, r3
 8001a8c:	623b      	str	r3, [r7, #32]
 8001a8e:	462b      	mov	r3, r5
 8001a90:	eb4b 0303 	adc.w	r3, fp, r3
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	028b      	lsls	r3, r1, #10
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aac:	4621      	mov	r1, r4
 8001aae:	028a      	lsls	r2, r1, #10
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ab8:	2200      	movs	r2, #0
 8001aba:	673b      	str	r3, [r7, #112]	; 0x70
 8001abc:	677a      	str	r2, [r7, #116]	; 0x74
 8001abe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001ac2:	f7fe fba7 	bl	8000214 <__aeabi_uldivmod>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4613      	mov	r3, r2
 8001acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ad0:	4b41      	ldr	r3, [pc, #260]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	0c1b      	lsrs	r3, r3, #16
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	3301      	adds	r3, #1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001ae2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001af2:	e0eb      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af4:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001afc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b00:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d06b      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0c:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	2200      	movs	r2, #0
 8001b14:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b1e:	663b      	str	r3, [r7, #96]	; 0x60
 8001b20:	2300      	movs	r3, #0
 8001b22:	667b      	str	r3, [r7, #100]	; 0x64
 8001b24:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b28:	4622      	mov	r2, r4
 8001b2a:	462b      	mov	r3, r5
 8001b2c:	f04f 0000 	mov.w	r0, #0
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	0159      	lsls	r1, r3, #5
 8001b36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b3a:	0150      	lsls	r0, r2, #5
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4621      	mov	r1, r4
 8001b42:	1a51      	subs	r1, r2, r1
 8001b44:	61b9      	str	r1, [r7, #24]
 8001b46:	4629      	mov	r1, r5
 8001b48:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001b5a:	4659      	mov	r1, fp
 8001b5c:	018b      	lsls	r3, r1, #6
 8001b5e:	4651      	mov	r1, sl
 8001b60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b64:	4651      	mov	r1, sl
 8001b66:	018a      	lsls	r2, r1, #6
 8001b68:	4651      	mov	r1, sl
 8001b6a:	ebb2 0801 	subs.w	r8, r2, r1
 8001b6e:	4659      	mov	r1, fp
 8001b70:	eb63 0901 	sbc.w	r9, r3, r1
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b88:	4690      	mov	r8, r2
 8001b8a:	4699      	mov	r9, r3
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	eb18 0303 	adds.w	r3, r8, r3
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	462b      	mov	r3, r5
 8001b96:	eb49 0303 	adc.w	r3, r9, r3
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ba8:	4629      	mov	r1, r5
 8001baa:	024b      	lsls	r3, r1, #9
 8001bac:	4621      	mov	r1, r4
 8001bae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	024a      	lsls	r2, r1, #9
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bc2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001bc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001bc8:	f7fe fb24 	bl	8000214 <__aeabi_uldivmod>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001bd6:	e065      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x420>
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	00f42400 	.word	0x00f42400
 8001be0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be4:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x458>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	2200      	movs	r2, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	4611      	mov	r1, r2
 8001bf0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bf4:	653b      	str	r3, [r7, #80]	; 0x50
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	657b      	str	r3, [r7, #84]	; 0x54
 8001bfa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001bfe:	4642      	mov	r2, r8
 8001c00:	464b      	mov	r3, r9
 8001c02:	f04f 0000 	mov.w	r0, #0
 8001c06:	f04f 0100 	mov.w	r1, #0
 8001c0a:	0159      	lsls	r1, r3, #5
 8001c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c10:	0150      	lsls	r0, r2, #5
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4641      	mov	r1, r8
 8001c18:	1a51      	subs	r1, r2, r1
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	4649      	mov	r1, r9
 8001c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001c30:	4659      	mov	r1, fp
 8001c32:	018b      	lsls	r3, r1, #6
 8001c34:	4651      	mov	r1, sl
 8001c36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c3a:	4651      	mov	r1, sl
 8001c3c:	018a      	lsls	r2, r1, #6
 8001c3e:	4651      	mov	r1, sl
 8001c40:	1a54      	subs	r4, r2, r1
 8001c42:	4659      	mov	r1, fp
 8001c44:	eb63 0501 	sbc.w	r5, r3, r1
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	00eb      	lsls	r3, r5, #3
 8001c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c56:	00e2      	lsls	r2, r4, #3
 8001c58:	4614      	mov	r4, r2
 8001c5a:	461d      	mov	r5, r3
 8001c5c:	4643      	mov	r3, r8
 8001c5e:	18e3      	adds	r3, r4, r3
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	464b      	mov	r3, r9
 8001c64:	eb45 0303 	adc.w	r3, r5, r3
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c76:	4629      	mov	r1, r5
 8001c78:	028b      	lsls	r3, r1, #10
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c80:	4621      	mov	r1, r4
 8001c82:	028a      	lsls	r2, r1, #10
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c90:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001c92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c96:	f7fe fabd 	bl	8000214 <__aeabi_uldivmod>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x458>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	0f1b      	lsrs	r3, r3, #28
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001cb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001cb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cc2:	e003      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ccc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	37b8      	adds	r7, #184	; 0xb8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	00f42400 	.word	0x00f42400

08001ce4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e28d      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8083 	beq.w	8001e0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d04:	4b94      	ldr	r3, [pc, #592]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 030c 	and.w	r3, r3, #12
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d019      	beq.n	8001d44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d10:	4b91      	ldr	r3, [pc, #580]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d106      	bne.n	8001d2a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d1c:	4b8e      	ldr	r3, [pc, #568]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d28:	d00c      	beq.n	8001d44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2a:	4b8b      	ldr	r3, [pc, #556]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d112      	bne.n	8001d5c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d36:	4b88      	ldr	r3, [pc, #544]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d42:	d10b      	bne.n	8001d5c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	4b84      	ldr	r3, [pc, #528]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d05b      	beq.n	8001e08 <HAL_RCC_OscConfig+0x124>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d157      	bne.n	8001e08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e25a      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d64:	d106      	bne.n	8001d74 <HAL_RCC_OscConfig+0x90>
 8001d66:	4b7c      	ldr	r3, [pc, #496]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a7b      	ldr	r2, [pc, #492]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e01d      	b.n	8001db0 <HAL_RCC_OscConfig+0xcc>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0xb4>
 8001d7e:	4b76      	ldr	r3, [pc, #472]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a75      	ldr	r2, [pc, #468]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b73      	ldr	r3, [pc, #460]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a72      	ldr	r2, [pc, #456]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e00b      	b.n	8001db0 <HAL_RCC_OscConfig+0xcc>
 8001d98:	4b6f      	ldr	r3, [pc, #444]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a6e      	ldr	r2, [pc, #440]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b6c      	ldr	r3, [pc, #432]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a6b      	ldr	r2, [pc, #428]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff f81c 	bl	8000df4 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff f818 	bl	8000df4 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e21f      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	4b61      	ldr	r3, [pc, #388]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0xdc>
 8001dde:	e014      	b.n	8001e0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff f808 	bl	8000df4 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff f804 	bl	8000df4 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e20b      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfa:	4b57      	ldr	r3, [pc, #348]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x104>
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d06f      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e16:	4b50      	ldr	r3, [pc, #320]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d017      	beq.n	8001e52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e22:	4b4d      	ldr	r3, [pc, #308]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d105      	bne.n	8001e3a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e2e:	4b4a      	ldr	r3, [pc, #296]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d11c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e46:	4b44      	ldr	r3, [pc, #272]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d116      	bne.n	8001e80 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_RCC_OscConfig+0x186>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e1d3      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4937      	ldr	r1, [pc, #220]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7e:	e03a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d020      	beq.n	8001eca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e88:	4b34      	ldr	r3, [pc, #208]	; (8001f5c <HAL_RCC_OscConfig+0x278>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7fe ffb1 	bl	8000df4 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e96:	f7fe ffad 	bl	8000df4 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e1b4      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4925      	ldr	r1, [pc, #148]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]
 8001ec8:	e015      	b.n	8001ef6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eca:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <HAL_RCC_OscConfig+0x278>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7fe ff90 	bl	8000df4 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed8:	f7fe ff8c 	bl	8000df4 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e193      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eea:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d036      	beq.n	8001f70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d016      	beq.n	8001f38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7fe ff70 	bl	8000df4 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f18:	f7fe ff6c 	bl	8000df4 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e173      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x234>
 8001f36:	e01b      	b.n	8001f70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3e:	f7fe ff59 	bl	8000df4 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f44:	e00e      	b.n	8001f64 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f46:	f7fe ff55 	bl	8000df4 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d907      	bls.n	8001f64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e15c      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	42470000 	.word	0x42470000
 8001f60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f64:	4b8a      	ldr	r3, [pc, #552]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8001f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1ea      	bne.n	8001f46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 8097 	beq.w	80020ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f82:	4b83      	ldr	r3, [pc, #524]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10f      	bne.n	8001fae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b7f      	ldr	r3, [pc, #508]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a7e      	ldr	r2, [pc, #504]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9e:	4b7c      	ldr	r3, [pc, #496]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001faa:	2301      	movs	r3, #1
 8001fac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fae:	4b79      	ldr	r3, [pc, #484]	; (8002194 <HAL_RCC_OscConfig+0x4b0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d118      	bne.n	8001fec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fba:	4b76      	ldr	r3, [pc, #472]	; (8002194 <HAL_RCC_OscConfig+0x4b0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a75      	ldr	r2, [pc, #468]	; (8002194 <HAL_RCC_OscConfig+0x4b0>)
 8001fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc6:	f7fe ff15 	bl	8000df4 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fce:	f7fe ff11 	bl	8000df4 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e118      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	4b6c      	ldr	r3, [pc, #432]	; (8002194 <HAL_RCC_OscConfig+0x4b0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d106      	bne.n	8002002 <HAL_RCC_OscConfig+0x31e>
 8001ff4:	4b66      	ldr	r3, [pc, #408]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	4a65      	ldr	r2, [pc, #404]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8002000:	e01c      	b.n	800203c <HAL_RCC_OscConfig+0x358>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b05      	cmp	r3, #5
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0x340>
 800200a:	4b61      	ldr	r3, [pc, #388]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200e:	4a60      	ldr	r2, [pc, #384]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	6713      	str	r3, [r2, #112]	; 0x70
 8002016:	4b5e      	ldr	r3, [pc, #376]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	4a5d      	ldr	r2, [pc, #372]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6713      	str	r3, [r2, #112]	; 0x70
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0x358>
 8002024:	4b5a      	ldr	r3, [pc, #360]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	4a59      	ldr	r2, [pc, #356]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	6713      	str	r3, [r2, #112]	; 0x70
 8002030:	4b57      	ldr	r3, [pc, #348]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8002032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002034:	4a56      	ldr	r2, [pc, #344]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8002036:	f023 0304 	bic.w	r3, r3, #4
 800203a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d015      	beq.n	8002070 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7fe fed6 	bl	8000df4 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204a:	e00a      	b.n	8002062 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f7fe fed2 	bl	8000df4 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e0d7      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002062:	4b4b      	ldr	r3, [pc, #300]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0ee      	beq.n	800204c <HAL_RCC_OscConfig+0x368>
 800206e:	e014      	b.n	800209a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7fe fec0 	bl	8000df4 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002076:	e00a      	b.n	800208e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002078:	f7fe febc 	bl	8000df4 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e0c1      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208e:	4b40      	ldr	r3, [pc, #256]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1ee      	bne.n	8002078 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800209a:	7dfb      	ldrb	r3, [r7, #23]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d105      	bne.n	80020ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a0:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	4a3a      	ldr	r2, [pc, #232]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 80020a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80ad 	beq.w	8002210 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020b6:	4b36      	ldr	r3, [pc, #216]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d060      	beq.n	8002184 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d145      	bne.n	8002156 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ca:	4b33      	ldr	r3, [pc, #204]	; (8002198 <HAL_RCC_OscConfig+0x4b4>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7fe fe90 	bl	8000df4 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d8:	f7fe fe8c 	bl	8000df4 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e093      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69da      	ldr	r2, [r3, #28]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	019b      	lsls	r3, r3, #6
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	085b      	lsrs	r3, r3, #1
 800210e:	3b01      	subs	r3, #1
 8002110:	041b      	lsls	r3, r3, #16
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	061b      	lsls	r3, r3, #24
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	071b      	lsls	r3, r3, #28
 8002122:	491b      	ldr	r1, [pc, #108]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_RCC_OscConfig+0x4b4>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7fe fe61 	bl	8000df4 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002136:	f7fe fe5d 	bl	8000df4 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e064      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x452>
 8002154:	e05c      	b.n	8002210 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <HAL_RCC_OscConfig+0x4b4>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7fe fe4a 	bl	8000df4 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002164:	f7fe fe46 	bl	8000df4 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e04d      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_RCC_OscConfig+0x4ac>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x480>
 8002182:	e045      	b.n	8002210 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d107      	bne.n	800219c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e040      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
 8002190:	40023800 	.word	0x40023800
 8002194:	40007000 	.word	0x40007000
 8002198:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800219c:	4b1f      	ldr	r3, [pc, #124]	; (800221c <HAL_RCC_OscConfig+0x538>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d030      	beq.n	800220c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d129      	bne.n	800220c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d122      	bne.n	800220c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d119      	bne.n	800220c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	085b      	lsrs	r3, r3, #1
 80021e4:	3b01      	subs	r3, #1
 80021e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d10f      	bne.n	800220c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d107      	bne.n	800220c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800

08002220 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e042      	b.n	80022b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7fe fcae 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2224      	movs	r2, #36	; 0x24
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002262:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 fdc9 	bl	8002dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002278:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002288:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002298:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b20      	cmp	r3, #32
 80022de:	f040 8081 	bne.w	80023e4 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_UART_Receive+0x2e>
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e079      	b.n	80023e6 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2222      	movs	r2, #34	; 0x22
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002306:	f7fe fd75 	bl	8000df4 <HAL_GetTick>
 800230a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	88fa      	ldrh	r2, [r7, #6]
 8002310:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	88fa      	ldrh	r2, [r7, #6]
 8002316:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002320:	d108      	bne.n	8002334 <HAL_UART_Receive+0x74>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d104      	bne.n	8002334 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	e003      	b.n	800233c <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002338:	2300      	movs	r3, #0
 800233a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800233c:	e047      	b.n	80023ce <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2200      	movs	r2, #0
 8002346:	2120      	movs	r1, #32
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 fb27 	bl	800299c <UART_WaitOnFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e042      	b.n	80023e6 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10c      	bne.n	8002380 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	b29b      	uxth	r3, r3
 800236e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002372:	b29a      	uxth	r2, r3
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	3302      	adds	r3, #2
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	e01f      	b.n	80023c0 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002388:	d007      	beq.n	800239a <HAL_UART_Receive+0xda>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10a      	bne.n	80023a8 <HAL_UART_Receive+0xe8>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	e008      	b.n	80023ba <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3301      	adds	r3, #1
 80023be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1b2      	bne.n	800233e <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	4613      	mov	r3, r2
 80023fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b20      	cmp	r3, #32
 8002406:	d112      	bne.n	800242e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_UART_Receive_IT+0x26>
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e00b      	b.n	8002430 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	461a      	mov	r2, r3
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 fb12 	bl	8002a4e <UART_Start_Receive_IT>
 800242a:	4603      	mov	r3, r0
 800242c:	e000      	b.n	8002430 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800242e:	2302      	movs	r3, #2
  }
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0ba      	sub	sp, #232	; 0xe8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800246a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800247e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_UART_IRQHandler+0x66>
 800248a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fbf2 	bl	8002c80 <UART_Receive_IT>
      return;
 800249c:	e25b      	b.n	8002956 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800249e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80de 	beq.w	8002664 <HAL_UART_IRQHandler+0x22c>
 80024a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d106      	bne.n	80024c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80d1 	beq.w	8002664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_UART_IRQHandler+0xae>
 80024ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_UART_IRQHandler+0xd2>
 80024f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	f043 0202 	orr.w	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800250a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_UART_IRQHandler+0xf6>
 8002516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f043 0204 	orr.w	r2, r3, #4
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800252e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d011      	beq.n	800255e <HAL_UART_IRQHandler+0x126>
 800253a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f043 0208 	orr.w	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 81f2 	beq.w	800294c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_UART_IRQHandler+0x14e>
 8002574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fb7d 	bl	8002c80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002590:	2b40      	cmp	r3, #64	; 0x40
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <HAL_UART_IRQHandler+0x17a>
 80025aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d04f      	beq.n	8002652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fa85 	bl	8002ac2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d141      	bne.n	800264a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3314      	adds	r3, #20
 80025cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025d4:	e853 3f00 	ldrex	r3, [r3]
 80025d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3314      	adds	r3, #20
 80025ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002602:	e841 2300 	strex	r3, r2, [r1]
 8002606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800260a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1d9      	bne.n	80025c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d013      	beq.n	8002642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	4a7e      	ldr	r2, [pc, #504]	; (8002818 <HAL_UART_IRQHandler+0x3e0>)
 8002620:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fe10 	bl	800124c <HAL_DMA_Abort_IT>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d016      	beq.n	8002660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800263c:	4610      	mov	r0, r2
 800263e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002640:	e00e      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f994 	bl	8002970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	e00a      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f990 	bl	8002970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	e006      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f98c 	bl	8002970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800265e:	e175      	b.n	800294c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	bf00      	nop
    return;
 8002662:	e173      	b.n	800294c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	2b01      	cmp	r3, #1
 800266a:	f040 814f 	bne.w	800290c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800266e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8148 	beq.w	800290c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800267c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8141 	beq.w	800290c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026aa:	2b40      	cmp	r3, #64	; 0x40
 80026ac:	f040 80b6 	bne.w	800281c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8145 	beq.w	8002950 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026ce:	429a      	cmp	r2, r3
 80026d0:	f080 813e 	bcs.w	8002950 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e6:	f000 8088 	beq.w	80027fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	330c      	adds	r3, #12
 8002712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002716:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800271a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800272e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1d9      	bne.n	80026ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3314      	adds	r3, #20
 800273c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002740:	e853 3f00 	ldrex	r3, [r3]
 8002744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3314      	adds	r3, #20
 8002756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800275a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800275e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002766:	e841 2300 	strex	r3, r2, [r1]
 800276a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800276c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e1      	bne.n	8002736 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3314      	adds	r3, #20
 8002778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3314      	adds	r3, #20
 8002792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002796:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800279c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800279e:	e841 2300 	strex	r3, r2, [r1]
 80027a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80027a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1e3      	bne.n	8002772 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c2:	e853 3f00 	ldrex	r3, [r3]
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ca:	f023 0310 	bic.w	r3, r3, #16
 80027ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	330c      	adds	r3, #12
 80027d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80027de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027e4:	e841 2300 	strex	r3, r2, [r1]
 80027e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e3      	bne.n	80027b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fcb9 	bl	800116c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2202      	movs	r2, #2
 80027fe:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002808:	b29b      	uxth	r3, r3
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	b29b      	uxth	r3, r3
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8b7 	bl	8002984 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002816:	e09b      	b.n	8002950 <HAL_UART_IRQHandler+0x518>
 8002818:	08002b89 	.word	0x08002b89
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002824:	b29b      	uxth	r3, r3
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 808e 	beq.w	8002954 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8089 	beq.w	8002954 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	330c      	adds	r3, #12
 8002848:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	e853 3f00 	ldrex	r3, [r3]
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002858:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	330c      	adds	r3, #12
 8002862:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002866:	647a      	str	r2, [r7, #68]	; 0x44
 8002868:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800286c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800286e:	e841 2300 	strex	r3, r2, [r1]
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1e3      	bne.n	8002842 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	3314      	adds	r3, #20
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	e853 3f00 	ldrex	r3, [r3]
 8002888:	623b      	str	r3, [r7, #32]
   return(result);
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3314      	adds	r3, #20
 800289a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800289e:	633a      	str	r2, [r7, #48]	; 0x30
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a6:	e841 2300 	strex	r3, r2, [r1]
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1e3      	bne.n	800287a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	330c      	adds	r3, #12
 80028c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	e853 3f00 	ldrex	r3, [r3]
 80028ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0310 	bic.w	r3, r3, #16
 80028d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	330c      	adds	r3, #12
 80028e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028e4:	61fa      	str	r2, [r7, #28]
 80028e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e8:	69b9      	ldr	r1, [r7, #24]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	e841 2300 	strex	r3, r2, [r1]
 80028f0:	617b      	str	r3, [r7, #20]
   return(result);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e3      	bne.n	80028c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002902:	4619      	mov	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f83d 	bl	8002984 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800290a:	e023      	b.n	8002954 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800290c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002914:	2b00      	cmp	r3, #0
 8002916:	d009      	beq.n	800292c <HAL_UART_IRQHandler+0x4f4>
 8002918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f943 	bl	8002bb0 <UART_Transmit_IT>
    return;
 800292a:	e014      	b.n	8002956 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800292c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00e      	beq.n	8002956 <HAL_UART_IRQHandler+0x51e>
 8002938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f983 	bl	8002c50 <UART_EndTransmit_IT>
    return;
 800294a:	e004      	b.n	8002956 <HAL_UART_IRQHandler+0x51e>
    return;
 800294c:	bf00      	nop
 800294e:	e002      	b.n	8002956 <HAL_UART_IRQHandler+0x51e>
      return;
 8002950:	bf00      	nop
 8002952:	e000      	b.n	8002956 <HAL_UART_IRQHandler+0x51e>
      return;
 8002954:	bf00      	nop
  }
}
 8002956:	37e8      	adds	r7, #232	; 0xe8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ac:	e03b      	b.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b4:	d037      	beq.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b6:	f7fe fa1d 	bl	8000df4 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	6a3a      	ldr	r2, [r7, #32]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d302      	bcc.n	80029cc <UART_WaitOnFlagUntilTimeout+0x30>
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e03a      	b.n	8002a46 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d023      	beq.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x8a>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b80      	cmp	r3, #128	; 0x80
 80029e2:	d020      	beq.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x8a>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d01d      	beq.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d116      	bne.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f857 	bl	8002ac2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2208      	movs	r2, #8
 8002a18:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00f      	b.n	8002a46 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d0b4      	beq.n	80029ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	88fa      	ldrh	r2, [r7, #6]
 8002a66:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	88fa      	ldrh	r2, [r7, #6]
 8002a6c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2222      	movs	r2, #34	; 0x22
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a92:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0220 	orr.w	r2, r2, #32
 8002ab2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b095      	sub	sp, #84	; 0x54
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	330c      	adds	r3, #12
 8002ae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002aea:	643a      	str	r2, [r7, #64]	; 0x40
 8002aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002af2:	e841 2300 	strex	r3, r2, [r1]
 8002af6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1e5      	bne.n	8002aca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3314      	adds	r3, #20
 8002b04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	e853 3f00 	ldrex	r3, [r3]
 8002b0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3314      	adds	r3, #20
 8002b1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b26:	e841 2300 	strex	r3, r2, [r1]
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1e5      	bne.n	8002afe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d119      	bne.n	8002b6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	330c      	adds	r3, #12
 8002b40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	e853 3f00 	ldrex	r3, [r3]
 8002b48:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f023 0310 	bic.w	r3, r3, #16
 8002b50:	647b      	str	r3, [r7, #68]	; 0x44
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	330c      	adds	r3, #12
 8002b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b5a:	61ba      	str	r2, [r7, #24]
 8002b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5e:	6979      	ldr	r1, [r7, #20]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	613b      	str	r3, [r7, #16]
   return(result);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1e5      	bne.n	8002b3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b7c:	bf00      	nop
 8002b7e:	3754      	adds	r7, #84	; 0x54
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f7ff fee4 	bl	8002970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b21      	cmp	r3, #33	; 0x21
 8002bc2:	d13e      	bne.n	8002c42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bcc:	d114      	bne.n	8002bf8 <UART_Transmit_IT+0x48>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d110      	bne.n	8002bf8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	1c9a      	adds	r2, r3, #2
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	621a      	str	r2, [r3, #32]
 8002bf6:	e008      	b.n	8002c0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	1c59      	adds	r1, r3, #1
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6211      	str	r1, [r2, #32]
 8002c02:	781a      	ldrb	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4619      	mov	r1, r3
 8002c18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10f      	bne.n	8002c3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e000      	b.n	8002c44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
  }
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff fe73 	bl	800295c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08c      	sub	sp, #48	; 0x30
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b22      	cmp	r3, #34	; 0x22
 8002c92:	f040 80ae 	bne.w	8002df2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9e:	d117      	bne.n	8002cd0 <UART_Receive_IT+0x50>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d113      	bne.n	8002cd0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	1c9a      	adds	r2, r3, #2
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28
 8002cce:	e026      	b.n	8002d1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce2:	d007      	beq.n	8002cf4 <UART_Receive_IT+0x74>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10a      	bne.n	8002d02 <UART_Receive_IT+0x82>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	e008      	b.n	8002d14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d15d      	bne.n	8002dee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0220 	bic.w	r2, r2, #32
 8002d40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d135      	bne.n	8002de4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	330c      	adds	r3, #12
 8002d84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	e853 3f00 	ldrex	r3, [r3]
 8002d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f023 0310 	bic.w	r3, r3, #16
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9e:	623a      	str	r2, [r7, #32]
 8002da0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da2:	69f9      	ldr	r1, [r7, #28]
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	e841 2300 	strex	r3, r2, [r1]
 8002daa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1e5      	bne.n	8002d7e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d10a      	bne.n	8002dd6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff fdd1 	bl	8002984 <HAL_UARTEx_RxEventCallback>
 8002de2:	e002      	b.n	8002dea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7fd fd2b 	bl	8000840 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e002      	b.n	8002df4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
  }
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3730      	adds	r7, #48	; 0x30
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e00:	b0c0      	sub	sp, #256	; 0x100
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e18:	68d9      	ldr	r1, [r3, #12]
 8002e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	ea40 0301 	orr.w	r3, r0, r1
 8002e24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e54:	f021 010c 	bic.w	r1, r1, #12
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e62:	430b      	orrs	r3, r1
 8002e64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e76:	6999      	ldr	r1, [r3, #24]
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	ea40 0301 	orr.w	r3, r0, r1
 8002e82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4b8f      	ldr	r3, [pc, #572]	; (80030c8 <UART_SetConfig+0x2cc>)
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d005      	beq.n	8002e9c <UART_SetConfig+0xa0>
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4b8d      	ldr	r3, [pc, #564]	; (80030cc <UART_SetConfig+0x2d0>)
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d104      	bne.n	8002ea6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e9c:	f7fe fcde 	bl	800185c <HAL_RCC_GetPCLK2Freq>
 8002ea0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ea4:	e003      	b.n	8002eae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ea6:	f7fe fcc5 	bl	8001834 <HAL_RCC_GetPCLK1Freq>
 8002eaa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb8:	f040 810c 	bne.w	80030d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ec6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002eca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ece:	4622      	mov	r2, r4
 8002ed0:	462b      	mov	r3, r5
 8002ed2:	1891      	adds	r1, r2, r2
 8002ed4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ed6:	415b      	adcs	r3, r3
 8002ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ede:	4621      	mov	r1, r4
 8002ee0:	eb12 0801 	adds.w	r8, r2, r1
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	eb43 0901 	adc.w	r9, r3, r1
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efe:	4690      	mov	r8, r2
 8002f00:	4699      	mov	r9, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	eb18 0303 	adds.w	r3, r8, r3
 8002f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f0c:	462b      	mov	r3, r5
 8002f0e:	eb49 0303 	adc.w	r3, r9, r3
 8002f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	18db      	adds	r3, r3, r3
 8002f2e:	653b      	str	r3, [r7, #80]	; 0x50
 8002f30:	4613      	mov	r3, r2
 8002f32:	eb42 0303 	adc.w	r3, r2, r3
 8002f36:	657b      	str	r3, [r7, #84]	; 0x54
 8002f38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f40:	f7fd f968 	bl	8000214 <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4b61      	ldr	r3, [pc, #388]	; (80030d0 <UART_SetConfig+0x2d4>)
 8002f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	011c      	lsls	r4, r3, #4
 8002f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	1891      	adds	r1, r2, r2
 8002f6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f6c:	415b      	adcs	r3, r3
 8002f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f74:	4641      	mov	r1, r8
 8002f76:	eb12 0a01 	adds.w	sl, r2, r1
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	eb43 0b01 	adc.w	fp, r3, r1
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f94:	4692      	mov	sl, r2
 8002f96:	469b      	mov	fp, r3
 8002f98:	4643      	mov	r3, r8
 8002f9a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fa2:	464b      	mov	r3, r9
 8002fa4:	eb4b 0303 	adc.w	r3, fp, r3
 8002fa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	18db      	adds	r3, r3, r3
 8002fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	eb42 0303 	adc.w	r3, r2, r3
 8002fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8002fce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002fd6:	f7fd f91d 	bl	8000214 <__aeabi_uldivmod>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <UART_SetConfig+0x2d4>)
 8002fe2:	fba3 2301 	umull	r2, r3, r3, r1
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	2264      	movs	r2, #100	; 0x64
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	1acb      	subs	r3, r1, r3
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ff6:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <UART_SetConfig+0x2d4>)
 8002ff8:	fba3 2302 	umull	r2, r3, r3, r2
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003004:	441c      	add	r4, r3
 8003006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800300a:	2200      	movs	r2, #0
 800300c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003010:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003014:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003018:	4642      	mov	r2, r8
 800301a:	464b      	mov	r3, r9
 800301c:	1891      	adds	r1, r2, r2
 800301e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003020:	415b      	adcs	r3, r3
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003024:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003028:	4641      	mov	r1, r8
 800302a:	1851      	adds	r1, r2, r1
 800302c:	6339      	str	r1, [r7, #48]	; 0x30
 800302e:	4649      	mov	r1, r9
 8003030:	414b      	adcs	r3, r1
 8003032:	637b      	str	r3, [r7, #52]	; 0x34
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003040:	4659      	mov	r1, fp
 8003042:	00cb      	lsls	r3, r1, #3
 8003044:	4651      	mov	r1, sl
 8003046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800304a:	4651      	mov	r1, sl
 800304c:	00ca      	lsls	r2, r1, #3
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	4603      	mov	r3, r0
 8003054:	4642      	mov	r2, r8
 8003056:	189b      	adds	r3, r3, r2
 8003058:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800305c:	464b      	mov	r3, r9
 800305e:	460a      	mov	r2, r1
 8003060:	eb42 0303 	adc.w	r3, r2, r3
 8003064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003074:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003078:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800307c:	460b      	mov	r3, r1
 800307e:	18db      	adds	r3, r3, r3
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
 8003082:	4613      	mov	r3, r2
 8003084:	eb42 0303 	adc.w	r3, r2, r3
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800308a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800308e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003092:	f7fd f8bf 	bl	8000214 <__aeabi_uldivmod>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <UART_SetConfig+0x2d4>)
 800309c:	fba3 1302 	umull	r1, r3, r3, r2
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	2164      	movs	r1, #100	; 0x64
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	3332      	adds	r3, #50	; 0x32
 80030ae:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <UART_SetConfig+0x2d4>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	f003 0207 	and.w	r2, r3, #7
 80030ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4422      	add	r2, r4
 80030c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030c4:	e106      	b.n	80032d4 <UART_SetConfig+0x4d8>
 80030c6:	bf00      	nop
 80030c8:	40011000 	.word	0x40011000
 80030cc:	40011400 	.word	0x40011400
 80030d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d8:	2200      	movs	r2, #0
 80030da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030e6:	4642      	mov	r2, r8
 80030e8:	464b      	mov	r3, r9
 80030ea:	1891      	adds	r1, r2, r2
 80030ec:	6239      	str	r1, [r7, #32]
 80030ee:	415b      	adcs	r3, r3
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
 80030f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030f6:	4641      	mov	r1, r8
 80030f8:	1854      	adds	r4, r2, r1
 80030fa:	4649      	mov	r1, r9
 80030fc:	eb43 0501 	adc.w	r5, r3, r1
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	00eb      	lsls	r3, r5, #3
 800310a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800310e:	00e2      	lsls	r2, r4, #3
 8003110:	4614      	mov	r4, r2
 8003112:	461d      	mov	r5, r3
 8003114:	4643      	mov	r3, r8
 8003116:	18e3      	adds	r3, r4, r3
 8003118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800311c:	464b      	mov	r3, r9
 800311e:	eb45 0303 	adc.w	r3, r5, r3
 8003122:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003132:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003142:	4629      	mov	r1, r5
 8003144:	008b      	lsls	r3, r1, #2
 8003146:	4621      	mov	r1, r4
 8003148:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800314c:	4621      	mov	r1, r4
 800314e:	008a      	lsls	r2, r1, #2
 8003150:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003154:	f7fd f85e 	bl	8000214 <__aeabi_uldivmod>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4b60      	ldr	r3, [pc, #384]	; (80032e0 <UART_SetConfig+0x4e4>)
 800315e:	fba3 2302 	umull	r2, r3, r3, r2
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	011c      	lsls	r4, r3, #4
 8003166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800316a:	2200      	movs	r2, #0
 800316c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003170:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003174:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003178:	4642      	mov	r2, r8
 800317a:	464b      	mov	r3, r9
 800317c:	1891      	adds	r1, r2, r2
 800317e:	61b9      	str	r1, [r7, #24]
 8003180:	415b      	adcs	r3, r3
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003188:	4641      	mov	r1, r8
 800318a:	1851      	adds	r1, r2, r1
 800318c:	6139      	str	r1, [r7, #16]
 800318e:	4649      	mov	r1, r9
 8003190:	414b      	adcs	r3, r1
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031a0:	4659      	mov	r1, fp
 80031a2:	00cb      	lsls	r3, r1, #3
 80031a4:	4651      	mov	r1, sl
 80031a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031aa:	4651      	mov	r1, sl
 80031ac:	00ca      	lsls	r2, r1, #3
 80031ae:	4610      	mov	r0, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	4603      	mov	r3, r0
 80031b4:	4642      	mov	r2, r8
 80031b6:	189b      	adds	r3, r3, r2
 80031b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031bc:	464b      	mov	r3, r9
 80031be:	460a      	mov	r2, r1
 80031c0:	eb42 0303 	adc.w	r3, r2, r3
 80031c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80031d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031e0:	4649      	mov	r1, r9
 80031e2:	008b      	lsls	r3, r1, #2
 80031e4:	4641      	mov	r1, r8
 80031e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ea:	4641      	mov	r1, r8
 80031ec:	008a      	lsls	r2, r1, #2
 80031ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031f2:	f7fd f80f 	bl	8000214 <__aeabi_uldivmod>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4611      	mov	r1, r2
 80031fc:	4b38      	ldr	r3, [pc, #224]	; (80032e0 <UART_SetConfig+0x4e4>)
 80031fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	2264      	movs	r2, #100	; 0x64
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	1acb      	subs	r3, r1, r3
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	3332      	adds	r3, #50	; 0x32
 8003210:	4a33      	ldr	r2, [pc, #204]	; (80032e0 <UART_SetConfig+0x4e4>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800321c:	441c      	add	r4, r3
 800321e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003222:	2200      	movs	r2, #0
 8003224:	673b      	str	r3, [r7, #112]	; 0x70
 8003226:	677a      	str	r2, [r7, #116]	; 0x74
 8003228:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800322c:	4642      	mov	r2, r8
 800322e:	464b      	mov	r3, r9
 8003230:	1891      	adds	r1, r2, r2
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	415b      	adcs	r3, r3
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800323c:	4641      	mov	r1, r8
 800323e:	1851      	adds	r1, r2, r1
 8003240:	6039      	str	r1, [r7, #0]
 8003242:	4649      	mov	r1, r9
 8003244:	414b      	adcs	r3, r1
 8003246:	607b      	str	r3, [r7, #4]
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003254:	4659      	mov	r1, fp
 8003256:	00cb      	lsls	r3, r1, #3
 8003258:	4651      	mov	r1, sl
 800325a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800325e:	4651      	mov	r1, sl
 8003260:	00ca      	lsls	r2, r1, #3
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	4603      	mov	r3, r0
 8003268:	4642      	mov	r2, r8
 800326a:	189b      	adds	r3, r3, r2
 800326c:	66bb      	str	r3, [r7, #104]	; 0x68
 800326e:	464b      	mov	r3, r9
 8003270:	460a      	mov	r2, r1
 8003272:	eb42 0303 	adc.w	r3, r2, r3
 8003276:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	663b      	str	r3, [r7, #96]	; 0x60
 8003282:	667a      	str	r2, [r7, #100]	; 0x64
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003290:	4649      	mov	r1, r9
 8003292:	008b      	lsls	r3, r1, #2
 8003294:	4641      	mov	r1, r8
 8003296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800329a:	4641      	mov	r1, r8
 800329c:	008a      	lsls	r2, r1, #2
 800329e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032a2:	f7fc ffb7 	bl	8000214 <__aeabi_uldivmod>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <UART_SetConfig+0x4e4>)
 80032ac:	fba3 1302 	umull	r1, r3, r3, r2
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	2164      	movs	r1, #100	; 0x64
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	3332      	adds	r3, #50	; 0x32
 80032be:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <UART_SetConfig+0x4e4>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	f003 020f 	and.w	r2, r3, #15
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4422      	add	r2, r4
 80032d2:	609a      	str	r2, [r3, #8]
}
 80032d4:	bf00      	nop
 80032d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80032da:	46bd      	mov	sp, r7
 80032dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e0:	51eb851f 	.word	0x51eb851f

080032e4 <memset>:
 80032e4:	4402      	add	r2, r0
 80032e6:	4603      	mov	r3, r0
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d100      	bne.n	80032ee <memset+0xa>
 80032ec:	4770      	bx	lr
 80032ee:	f803 1b01 	strb.w	r1, [r3], #1
 80032f2:	e7f9      	b.n	80032e8 <memset+0x4>

080032f4 <strcat>:
 80032f4:	b510      	push	{r4, lr}
 80032f6:	4602      	mov	r2, r0
 80032f8:	7814      	ldrb	r4, [r2, #0]
 80032fa:	4613      	mov	r3, r2
 80032fc:	3201      	adds	r2, #1
 80032fe:	2c00      	cmp	r4, #0
 8003300:	d1fa      	bne.n	80032f8 <strcat+0x4>
 8003302:	3b01      	subs	r3, #1
 8003304:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003308:	f803 2f01 	strb.w	r2, [r3, #1]!
 800330c:	2a00      	cmp	r2, #0
 800330e:	d1f9      	bne.n	8003304 <strcat+0x10>
 8003310:	bd10      	pop	{r4, pc}
	...

08003314 <__libc_init_array>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	4d0d      	ldr	r5, [pc, #52]	; (800334c <__libc_init_array+0x38>)
 8003318:	4c0d      	ldr	r4, [pc, #52]	; (8003350 <__libc_init_array+0x3c>)
 800331a:	1b64      	subs	r4, r4, r5
 800331c:	10a4      	asrs	r4, r4, #2
 800331e:	2600      	movs	r6, #0
 8003320:	42a6      	cmp	r6, r4
 8003322:	d109      	bne.n	8003338 <__libc_init_array+0x24>
 8003324:	4d0b      	ldr	r5, [pc, #44]	; (8003354 <__libc_init_array+0x40>)
 8003326:	4c0c      	ldr	r4, [pc, #48]	; (8003358 <__libc_init_array+0x44>)
 8003328:	f000 f826 	bl	8003378 <_init>
 800332c:	1b64      	subs	r4, r4, r5
 800332e:	10a4      	asrs	r4, r4, #2
 8003330:	2600      	movs	r6, #0
 8003332:	42a6      	cmp	r6, r4
 8003334:	d105      	bne.n	8003342 <__libc_init_array+0x2e>
 8003336:	bd70      	pop	{r4, r5, r6, pc}
 8003338:	f855 3b04 	ldr.w	r3, [r5], #4
 800333c:	4798      	blx	r3
 800333e:	3601      	adds	r6, #1
 8003340:	e7ee      	b.n	8003320 <__libc_init_array+0xc>
 8003342:	f855 3b04 	ldr.w	r3, [r5], #4
 8003346:	4798      	blx	r3
 8003348:	3601      	adds	r6, #1
 800334a:	e7f2      	b.n	8003332 <__libc_init_array+0x1e>
 800334c:	0800366c 	.word	0x0800366c
 8003350:	0800366c 	.word	0x0800366c
 8003354:	0800366c 	.word	0x0800366c
 8003358:	08003670 	.word	0x08003670

0800335c <memcpy>:
 800335c:	440a      	add	r2, r1
 800335e:	4291      	cmp	r1, r2
 8003360:	f100 33ff 	add.w	r3, r0, #4294967295
 8003364:	d100      	bne.n	8003368 <memcpy+0xc>
 8003366:	4770      	bx	lr
 8003368:	b510      	push	{r4, lr}
 800336a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800336e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003372:	4291      	cmp	r1, r2
 8003374:	d1f9      	bne.n	800336a <memcpy+0xe>
 8003376:	bd10      	pop	{r4, pc}

08003378 <_init>:
 8003378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337a:	bf00      	nop
 800337c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337e:	bc08      	pop	{r3}
 8003380:	469e      	mov	lr, r3
 8003382:	4770      	bx	lr

08003384 <_fini>:
 8003384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003386:	bf00      	nop
 8003388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338a:	bc08      	pop	{r3}
 800338c:	469e      	mov	lr, r3
 800338e:	4770      	bx	lr
